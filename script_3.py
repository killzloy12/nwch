# –°–æ–∑–¥–∞–¥–∏–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é main.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

main_content = """#!/usr/bin/env python3
\"\"\"
Enhanced Telegram Bot v3.0 - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
\"\"\"

import asyncio
import logging
import signal
import sys
from contextlib import asynccontextmanager
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.storage.memory import MemoryStorage

from improved_config import get_config, BotConfig
from improved_database import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data/logs/bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class TelegramBot:
    \"\"\"–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.\"\"\"
    
    def __init__(self, config: BotConfig):
        self.config = config
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.is_running = False
        
    async def initialize(self):
        \"\"\"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.\"\"\"
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = Bot(token=self.config.bot_token)
            self.dp = Dispatcher(storage=MemoryStorage())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await db_manager.init_database()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram
            bot_info = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def _register_handlers(self):
        \"\"\"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.\"\"\"
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        @self.dp.message(CommandStart())
        async def cmd_start(message: Message):
            await self._handle_start(message)
        
        # –ö–æ–º–∞–Ω–¥–∞ /help
        @self.dp.message(Command('help'))
        async def cmd_help(message: Message):
            await self._handle_help(message)
        
        # –ö–æ–º–∞–Ω–¥–∞ /status (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        @self.dp.message(Command('status'))
        async def cmd_status(message: Message):
            await self._handle_status(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.dp.message()
        async def handle_message(message: Message):
            await self._handle_message(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @self.dp.error()
        async def error_handler(event, exception):
            await self._handle_error(event, exception)
    
    async def _handle_start(self, message: Message):
        \"\"\"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.\"\"\"
        try:
            user = message.from_user
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            await db_manager.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if await self._check_permissions(user.id, message.chat.id):
                welcome_text = (
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\\n\\n"
                    "ü§ñ –Ø Enhanced Telegram Bot v3.0\\n"
                    "üîß –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\\n\\n"
                    "‚ö° –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                )
                
                await message.answer(welcome_text)
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_help(self, message: Message):
        \"\"\"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.\"\"\"
        try:
            user_id = message.from_user.id
            is_admin = user_id in self.config.admin_ids
            
            help_text = [
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\\n",
                "üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
                "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
                "üîπ /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            ]
            
            if is_admin:
                help_text.extend([
                    "\\nüëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>",
                    "üîπ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
                    "üîπ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "üîπ /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                ])
            
            await message.answer(
                "\\n".join(help_text),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _handle_status(self, message: Message):
        \"\"\"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\"\"\"
        try:
            user_id = message.from_user.id
            
            if user_id not in self.config.admin_ids:
                await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
            status_text = [
                "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\\n",
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if self.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
                f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞",
                f"üë• –ê–¥–º–∏–Ω—ã: {len(self.config.admin_ids)}",
                "\\nüí° –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
            ]
            
            await message.answer(
                "\\n".join(status_text),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /status: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    
    async def _handle_message(self, message: Message):
        \"\"\"–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\"\"\"
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not await self._check_permissions(message.from_user.id, message.chat.id):
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._save_message(message)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤,
            # AI –æ—Ç–≤–µ—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_error(self, event, exception):
        \"\"\"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.\"\"\"
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if hasattr(event, 'message') and event.message:
                await event.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
                )
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    async def _check_permissions(self, user_id: int, chat_id: int) -> bool:
        \"\"\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\"\"\"
        # –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞
        if user_id in self.config.admin_ids:
            return True
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist/blacklist
        # –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return True  # –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    
    async def _save_message(self, message: Message):
        \"\"\"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\"\"\"
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start(self):
        \"\"\"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.\"\"\"
        try:
            self.is_running = True
            logger.info("–ó–∞–ø—É—Å–∫ polling...")
            await self.dp.start_polling(self.bot)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        \"\"\"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\"\"\"
        try:
            self.is_running = False
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            
            if self.bot:
                await self.bot.session.close()
            
            await db_manager.close()
            logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

async def main():
    \"\"\"–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\"\"\"
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot_instance = TelegramBot(config)
        await bot_instance.initialize()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            asyncio.create_task(bot_instance.shutdown())
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot_instance.start()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    import os
    os.makedirs('data/logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
"""

# –°–æ—Ö—Ä–∞–Ω–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–π main.py
with open('improved_main.py', 'w', encoding='utf-8') as f:
    f.write(main_content)

print("–°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π main.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")

# –°–æ–∑–¥–∞–¥–∏–º —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_recommendations = """# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram –±–æ—Ç–∞

## 1. –ó–∞—â–∏—Ç–∞ API –∫–ª—é—á–µ–π
```env
# .env —Ñ–∞–π–ª - –ù–ò–ö–û–ì–î–ê –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –≤ git!
BOT_TOKEN=your_secret_token_here
OPENAI_API_KEY=your_openai_key_here
ADMIN_IDS=123456789,987654321

# –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
```

## 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
```python
import re
from typing import Optional

def validate_user_input(text: str) -> Optional[str]:
    \"\"\"–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.\"\"\"
    if not text or len(text.strip()) == 0:
        return None
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    if len(text) > 4000:
        return text[:4000]
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    sanitized = re.sub(r'[<>\"\'&]', '', text)
    
    return sanitized.strip()
```

## 3. Rate Limiting
```python
from collections import defaultdict
import time

class RateLimiter:
    def __init__(self, max_requests: int = 30, time_window: int = 60):
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests = defaultdict(list)
    
    def is_allowed(self, user_id: int) -> bool:
        now = time.time()
        user_requests = self.requests[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        user_requests[:] = [req_time for req_time in user_requests 
                           if now - req_time < self.time_window]
        
        if len(user_requests) >= self.max_requests:
            return False
        
        user_requests.append(now)
        return True
```

## 4. –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π
```python
# –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
async def get_user_safe(user_id: int):
    async with aiosqlite.connect(db_path) as db:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        cursor = await db.execute(
            "SELECT * FROM users WHERE user_id = ?", 
            (user_id,)
        )
        return await cursor.fetchone()

# –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫:
# query = f"SELECT * FROM users WHERE user_id = {user_id}"  # –û–ü–ê–°–ù–û!
```

## 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
```python
import logging

security_logger = logging.getLogger('security')
security_handler = logging.FileHandler('data/logs/security.log')
security_logger.addHandler(security_handler)

def log_security_event(event_type: str, user_id: int, details: str):
    security_logger.warning(
        f"SECURITY_EVENT: {event_type} | User: {user_id} | Details: {details}"
    )
```

## 6. –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞
```python
class AntiSpam:
    def __init__(self):
        self.message_history = defaultdict(list)
        self.spam_threshold = 5  # —Å–æ–æ–±—â–µ–Ω–∏–π
        self.time_window = 10   # —Å–µ–∫—É–Ω–¥
    
    def check_spam(self, user_id: int, message_text: str) -> bool:
        now = time.time()
        user_messages = self.message_history[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_messages[:] = [(msg_time, msg_text) for msg_time, msg_text in user_messages
                           if now - msg_time < self.time_window]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª—É–¥
        recent_messages = len(user_messages)
        if recent_messages >= self.spam_threshold:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        identical_count = sum(1 for _, msg in user_messages if msg == message_text)
        if identical_count >= 3:
            return True
        
        user_messages.append((now, message_text))
        return False
```

## 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
```python
def require_admin(func):
    \"\"\"–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\"\"\"
    def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            return message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return func(message, *args, **kwargs)
    return wrapper

@require_admin
async def admin_command(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
```
"""

with open('security_recommendations.md', 'w', encoding='utf-8') as f:
    f.write(security_recommendations)

print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª security_recommendations.md —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")