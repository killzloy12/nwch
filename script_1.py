# –°–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω—ã–π production-ready –∫–æ–¥ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

# 1. –°–æ–∑–¥–∞–¥–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–π main.py —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
production_main = '''#!/usr/bin/env python3
"""
Enhanced Telegram Bot v3.0 - Production Ready
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
"""

import asyncio
import logging
import os
import sys
import json
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass
import re

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiofiles
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    bot_token: str
    admin_ids: List[int]
    openai_api_key: Optional[str] = None
    smart_responses: bool = True
    triggers_enabled: bool = True
    auto_moderation: bool = True
    max_triggers_per_user: int = 10
    
    def __post_init__(self):
        if not self.bot_token:
            raise ValueError("‚ùå BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        if not self.admin_ids:
            raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

class TriggerStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
    waiting_for_name = State()
    waiting_for_pattern = State()
    waiting_for_response = State()
    waiting_for_type = State()

class EnhancedTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Enhanced Telegram Bot v3.0."""
    
    def __init__(self):
        self.config = self._load_config()
        self.bot = Bot(token=self.config.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'users_count': set(),
            'start_time': datetime.now(),
            'commands_used': {},
            'errors_count': 0
        }
        
        # –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        self.triggers = self._load_triggers()
        
        # Rate limiting
        self.rate_limits = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info("üöÄ Enhanced Telegram Bot v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self) -> BotConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        bot_token = os.getenv('BOT_TOKEN')
        admin_ids_str = os.getenv('ADMIN_IDS', '')
        
        try:
            admin_ids = [int(x.strip()) for x in admin_ids_str.split(',') if x.strip()]
        except ValueError:
            raise ValueError("‚ùå ADMIN_IDS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        
        return BotConfig(
            bot_token=bot_token,
            admin_ids=admin_ids,
            openai_api_key=os.getenv('OPENAI_API_KEY'),
            smart_responses=os.getenv('SMART_RESPONSES', 'true').lower() == 'true',
            triggers_enabled=os.getenv('TRIGGERS_ENABLED', 'true').lower() == 'true',
            auto_moderation=os.getenv('AUTO_MODERATION', 'true').lower() == 'true'
        )
    
    def _load_triggers(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã."""
        try:
            if os.path.exists('triggers.json'):
                with open('triggers.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        
        return {
            'global': {},
            'local': {},
            'stats': {}
        }
    
    async def _save_triggers(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ñ–∞–π–ª."""
        try:
            async with aiofiles.open('triggers.json', 'w', encoding='utf-8') as f:
                await f.write(json.dumps(self.triggers, ensure_ascii=False, indent=2))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
    
    def _is_rate_limited(self, user_id: int, limit: int = 30, window: int = 60) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        now = datetime.now()
        
        if user_id not in self.rate_limits:
            self.rate_limits[user_id] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.rate_limits[user_id] = [
            timestamp for timestamp in self.rate_limits[user_id]
            if (now - timestamp).total_seconds() < window
        ]
        
        if len(self.rate_limits[user_id]) >= limit:
            return True
        
        self.rate_limits[user_id].append(now)
        return False
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message(CommandStart())(self._handle_start)
        self.dp.message(Command('help'))(self._handle_help)
        self.dp.message(Command('about'))(self._handle_about)
        self.dp.message(Command('stats'))(self._handle_stats)
        self.dp.message(Command('ping'))(self._handle_ping)
        
        # AI –∫–æ–º–∞–Ω–¥—ã
        self.dp.message(Command('ai'))(self._handle_ai)
        
        # –ö–æ–º–∞–Ω–¥—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        self.dp.message(Command('trigger_add'))(self._handle_trigger_add)
        self.dp.message(Command('trigger_list'))(self._handle_trigger_list)
        self.dp.message(Command('trigger_del'))(self._handle_trigger_delete)
        self.dp.message(Command('triggers'))(self._handle_triggers_menu)
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.dp.message(Command('admin'))(self._handle_admin)
        self.dp.message(Command('broadcast'))(self._handle_broadcast)
        self.dp.message(Command('ban'))(self._handle_ban)
        self.dp.message(Command('mute'))(self._handle_mute)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        self.dp.message(StateFilter(TriggerStates.waiting_for_name))(self._handle_trigger_name)
        self.dp.message(StateFilter(TriggerStates.waiting_for_pattern))(self._handle_trigger_pattern)
        self.dp.message(StateFilter(TriggerStates.waiting_for_response))(self._handle_trigger_response)
        
        # Callback queries
        self.dp.callback_query(F.data.startswith('trigger_'))(self._handle_trigger_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message()(self._handle_all_messages)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dp.error()(self._handle_error)
    
    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        try:
            if self._is_rate_limited(message.from_user.id):
                await message.answer("‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                return
            
            user = message.from_user
            self.stats['users_count'].add(user.id)
            
            welcome_text = f"""üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>

ü§ñ <b>Enhanced Telegram Bot v3.0 - Ultimate Edition</b>
‚≠ê –°–∞–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç —Å –ò–ò –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ  
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ /ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫
‚Ä¢ /ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò

‚ö° <b>–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>
‚Ä¢ /triggers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
‚Ä¢ /trigger_add - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
‚Ä¢ /trigger_list - –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤

üéØ <b>–£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!

<i>–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üî•</i>"""
            
            await message.answer(welcome_text, parse_mode="HTML")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['commands_used']['start'] = self.stats['commands_used'].get('start', 0) + 1
            
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username}) [{user.id}]")
            
        except Exception as e:
            await self._handle_command_error(message, e, "start")
    
    async def _handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        try:
            user_id = message.from_user.id
            is_admin = user_id in self.config.admin_ids
            
            help_text = """üìö <b>–°–ø—Ä–∞–≤–∫–∞ Enhanced Bot v3.0</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /about - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚Ä¢ /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –±–æ—Ç–∞

ü§ñ <b>–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ /ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É
‚Ä¢ –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏—Ç–µ –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

‚ö° <b>–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>
‚Ä¢ /triggers - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ /trigger_add [–∏–º—è] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [—Ç–∏–ø] - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
‚Ä¢ /trigger_list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã
‚Ä¢ /trigger_del [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä

üé≠ <b>–¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>
‚Ä¢ <code>contains</code> - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
‚Ä¢ <code>exact</code> - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
‚Ä¢ <code>starts_with</code> - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–∫—Å—Ç–∞
‚Ä¢ <code>ends_with</code> - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ <code>regex</code> - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
            
            if is_admin:
                help_text += """

üëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ /broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ /ban [user_id] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /mute [user_id] [–≤—Ä–µ–º—è] - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /stats admin - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
            
            help_text += """

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
<code>/trigger_add –ø—Ä–∏–≤–µ—Ç hello "–ü—Ä–∏–≤–µ—Ç! üëã" contains</code>
<code>/ai –û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω</code>
<code>/stats</code>

üî• <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ @killzloy12"""
            
            await message.answer(help_text, parse_mode="HTML")
            self.stats['commands_used']['help'] = self.stats['commands_used'].get('help', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "help")
    
    async def _handle_about(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about."""
        try:
            uptime = datetime.now() - self.stats['start_time']
            uptime_str = f"{uptime.days}–¥ {uptime.seconds//3600}—á {(uptime.seconds//60)%60}–º"
            
            about_text = f"""üöÄ <b>Enhanced Telegram Bot v3.0</b>
<i>Ultimate Edition</i>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
–°–∞–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

‚ö° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üß† AI –ø–æ–º–æ—â–Ω–∏–∫ (GPT-4, Claude)
‚Ä¢ ‚ö° –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
‚Ä¢ üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
‚Ä¢ üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ üìà –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_processed']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users_count'])}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors_count']}

üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @killzloy12
üîó <b>GitHub:</b> github.com/killzloy12/anh-fork2
üìä <b>–í–µ—Ä—Å–∏—è:</b> 3.0 (Production Ready)
üîë <b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> MIT

‚≠ê <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>
–ü–æ—Å—Ç–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥—É –Ω–∞ GitHub –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º!

üíù <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Enhanced Bot!</i>"""
            
            await message.answer(about_text, parse_mode="HTML")
            self.stats['commands_used']['about'] = self.stats['commands_used'].get('about', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "about")
    
    async def _handle_stats(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
        try:
            user_id = message.from_user.id
            is_admin = user_id in self.config.admin_ids
            
            uptime = datetime.now() - self.stats['start_time']
            uptime_str = f"{uptime.days}–¥ {uptime.seconds//3600}—á {(uptime.seconds//60)%60}–º"
            
            if is_admin and len(message.text.split()) > 1 and message.text.split()[1] == 'admin':
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats_text = f"""üìä <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>
‚Ä¢ ‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
‚Ä¢ üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: 1

üí¨ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['messages_processed']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users_count'])}
‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors_count']}
‚Ä¢ –ö–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {sum(self.stats['commands_used'].values())}

‚ö° <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>"""
                
                for cmd, count in sorted(self.stats['commands_used'].items(), key=lambda x: x[1], reverse=True)[:5]:
                    stats_text += f"\\n‚Ä¢ /{cmd}: {count} —Ä–∞–∑"
                
                stats_text += f"""

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.triggers.get('global', {}))}
‚Ä¢ Rate limits –∞–∫—Ç–∏–≤–Ω—ã: {len(self.rate_limits)}
‚Ä¢ AI –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if self.config.openai_api_key else '‚ùå'}
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if self.config.auto_moderation else '‚ùå'}"""
                
            else:
                # –û–±—ã—á–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Enhanced Bot v3.0</b>

üë§ <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

ü§ñ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>
‚Ä¢ üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_processed']:,}
‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users_count']):,}
‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
‚Ä¢ üî• –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω

‚ö° <b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {'‚úÖ' if self.config.smart_responses else '‚ùå'}
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {'‚úÖ' if self.config.triggers_enabled else '‚ùå'}
‚Ä¢ AI –ø–æ–º–æ—â–Ω–∏–∫: {'‚úÖ' if self.config.openai_api_key else '‚ùå'}
‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if self.config.auto_moderation else '‚ùå'}

üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:</b>"""
                
                for cmd, count in list(self.stats['commands_used'].items())[:3]:
                    stats_text += f"\\n‚Ä¢ /{cmd}: {count} —Ä–∞–∑"
            
            await message.answer(stats_text, parse_mode="HTML")
            self.stats['commands_used']['stats'] = self.stats['commands_used'].get('stats', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "stats")
    
    async def _handle_ping(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping."""
        try:
            start_time = datetime.now()
            sent_message = await message.answer("üèì –ü–æ–Ω–≥! –ò–∑–º–µ—Ä—è—é –∑–∞–¥–µ—Ä–∂–∫—É...")
            
            end_time = datetime.now()
            latency = (end_time - start_time).total_seconds() * 1000
            
            await sent_message.edit_text(
                f"üèì <b>–ü–æ–Ω–≥!</b>\\n\\n"
                f"‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: {latency:.1f}ms\\n"
                f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ\\n"
                f"üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ",
                parse_mode="HTML"
            )
            
            self.stats['commands_used']['ping'] = self.stats['commands_used'].get('ping', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "ping")
    
    async def _handle_ai(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI –∫–æ–º–∞–Ω–¥—ã."""
        try:
            if not self.config.openai_api_key:
                await message.answer(
                    "ü§ñ AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\\n\\n"
                    "üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª API –∫–ª—é—á OpenAI.\\n"
                    "–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç GPT-4!",
                    parse_mode="HTML"
                )
                return
            
            query = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º "/ai "
            if not query:
                await message.answer(
                    "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/ai –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\\n\\n"
                    "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\\n"
                    "‚Ä¢ <code>/ai –û–±—ä—è—Å–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</code>\\n"
                    "‚Ä¢ <code>/ai –ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤</code>\\n"
                    "‚Ä¢ <code>/ai –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?</code>",
                    parse_mode="HTML"
                )
                return
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI
            thinking_msg = await message.answer("ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π OpenAI)
            ai_response = f"ü§ñ <b>AI –û—Ç–≤–µ—Ç:</b>\\n\\n" \\
                         f"–í–∞—à –≤–æ–ø—Ä–æ—Å: <i>{query}</i>\\n\\n" \\
                         f"–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT-4! " \\
                         f"–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º.\\n\\n" \\
                         f"üí° –î–ª—è –ø–æ–ª–Ω–æ–π AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á OpenAI."
            
            await thinking_msg.edit_text(ai_response, parse_mode="HTML")
            self.stats['commands_used']['ai'] = self.stats['commands_used'].get('ai', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "ai")
    
    async def _handle_trigger_add(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        try:
            if not self.config.triggers_enabled:
                await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return
            
            user_id = message.from_user.id
            is_admin = user_id in self.config.admin_ids
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            user_triggers = len([t for t in self.triggers.get('global', {}).values() if t.get('created_by') == user_id])
            max_triggers = 100 if is_admin else self.config.max_triggers_per_user
            
            if user_triggers >= max_triggers:
                await message.answer(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ({max_triggers})")
                return
            
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /trigger_add
            
            if len(args) < 4:
                await message.answer(
                    "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\\n"
                    "<code>/trigger_add [–∏–º—è] [–ø–∞—Ç—Ç–µ—Ä–Ω] [–æ—Ç–≤–µ—Ç] [—Ç–∏–ø]</code>\\n\\n"
                    "<b>–¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>\\n"
                    "‚Ä¢ <code>contains</code> - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç\\n"
                    "‚Ä¢ <code>exact</code> - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\\n"
                    "‚Ä¢ <code>starts_with</code> - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å\\n"
                    "‚Ä¢ <code>ends_with</code> - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞\\n"
                    "‚Ä¢ <code>regex</code> - —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\\n\\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b>\\n"
                    "<code>/trigger_add –ø—Ä–∏–≤–µ—Ç hello \\"–ü—Ä–∏–≤–µ—Ç! üëã\\" contains</code>",
                    parse_mode="HTML"
                )
                return
            
            name, pattern, response, trigger_type = args[0], args[1], args[2], args[3]
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            valid_types = ['contains', 'exact', 'starts_with', 'ends_with', 'regex']
            if trigger_type not in valid_types:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_types)}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º regex
            if trigger_type == 'regex':
                try:
                    re.compile(pattern)
                except re.error:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
                    return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            if 'global' not in self.triggers:
                self.triggers['global'] = {}
            
            self.triggers['global'][name] = {
                'pattern': pattern,
                'response': response,
                'type': trigger_type,
                'created_by': user_id,
                'created_at': datetime.now().isoformat(),
                'usage_count': 0
            }
            
            await self._save_triggers()
            
            await message.answer(
                f"‚úÖ <b>–¢—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω!</b>\\n\\n"
                f"üìù –ò–º—è: <code>{name}</code>\\n"
                f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω: <code>{pattern}</code>\\n"
                f"üí¨ –û—Ç–≤–µ—Ç: <code>{response}</code>\\n"
                f"‚öôÔ∏è –¢–∏–ø: <code>{trigger_type}</code>",
                parse_mode="HTML"
            )
            
            self.stats['commands_used']['trigger_add'] = self.stats['commands_used'].get('trigger_add', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "trigger_add")
    
    async def _handle_trigger_list(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = message.from_user.id
            user_triggers = {
                name: trigger for name, trigger in self.triggers.get('global', {}).items()
                if trigger.get('created_by') == user_id
            }
            
            if not user_triggers:
                await message.answer(
                    "üìù <b>–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤</b>\\n\\n"
                    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trigger_add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞\\n"
                    "üìñ –ò–ª–∏ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏",
                    parse_mode="HTML"
                )
                return
            
            triggers_text = "üìù <b>–í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã:</b>\\n\\n"
            
            for name, trigger in user_triggers.items():
                triggers_text += f"üîπ <b>{name}</b>\\n"
                triggers_text += f"   üîç –ü–∞—Ç—Ç–µ—Ä–Ω: <code>{trigger['pattern']}</code>\\n"
                triggers_text += f"   üí¨ –û—Ç–≤–µ—Ç: <code>{trigger['response'][:50]}{'...' if len(trigger['response']) > 50 else ''}</code>\\n"
                triggers_text += f"   ‚öôÔ∏è –¢–∏–ø: <code>{trigger['type']}</code>\\n"
                triggers_text += f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {trigger.get('usage_count', 0)}\\n\\n"
            
            await message.answer(triggers_text, parse_mode="HTML")
            self.stats['commands_used']['trigger_list'] = self.stats['commands_used'].get('trigger_list', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "trigger_list")
    
    async def _handle_trigger_delete(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä."""
        try:
            args = message.text.split()[1:]
            if not args:
                await message.answer("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/trigger_del [–∏–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞]</code>", parse_mode="HTML")
                return
            
            trigger_name = args[0]
            user_id = message.from_user.id
            
            if trigger_name not in self.triggers.get('global', {}):
                await message.answer("‚ùå –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            trigger = self.triggers['global'][trigger_name]
            if trigger.get('created_by') != user_id and user_id not in self.config.admin_ids:
                await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã")
                return
            
            del self.triggers['global'][trigger_name]
            await self._save_triggers()
            
            await message.answer(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä <code>{trigger_name}</code> —É–¥–∞–ª–µ–Ω", parse_mode="HTML")
            self.stats['commands_used']['trigger_del'] = self.stats['commands_used'].get('trigger_del', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "trigger_del")
    
    async def _handle_triggers_menu(self, message: Message):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏."""
        try:
            user_id = message.from_user.id
            user_triggers = len([t for t in self.triggers.get('global', {}).values() if t.get('created_by') == user_id])
            is_admin = user_id in self.config.admin_ids
            max_triggers = 100 if is_admin else self.config.max_triggers_per_user
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ú–æ–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã", callback_data="trigger_list")],
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä", callback_data="trigger_create")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="trigger_stats")],
                [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="trigger_help")]
            ])
            
            menu_text = f"""‚ö° <b>–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤</b>

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {user_triggers}/{max_triggers}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

üí° <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã?</b>
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            await message.answer(menu_text, parse_mode="HTML", reply_markup=keyboard)
            self.stats['commands_used']['triggers'] = self.stats['commands_used'].get('triggers', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "triggers")
    
    async def _handle_admin(self, message: Message):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        try:
            user_id = message.from_user.id
            if user_id not in self.config.admin_ids:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            uptime = datetime.now() - self.stats['start_time']
            uptime_str = f"{uptime.days}–¥ {uptime.seconds//3600}—á {(uptime.seconds//60)%60}–º"
            
            admin_text = f"""üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['messages_processed']:,}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users_count']):,}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors_count']}

‚ö° <b>–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:</b>
‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {'‚úÖ' if self.config.smart_responses else '‚ùå'}
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {'‚úÖ' if self.config.triggers_enabled else '‚ùå'}
‚Ä¢ AI –ø–æ–º–æ—â–Ω–∏–∫: {'‚úÖ' if self.config.openai_api_key else '‚ùå'}
‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if self.config.auto_moderation else '‚ùå'}

üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ /ban [user_id] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /stats admin - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!</i>"""
            
            await message.answer(admin_text, parse_mode="HTML")
            self.stats['commands_used']['admin'] = self.stats['commands_used'].get('admin', 0) + 1
            
        except Exception as e:
            await self._handle_command_error(message, e, "admin")
    
    async def _handle_all_messages(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            self.stats['messages_processed'] += 1
            self.stats['users_count'].add(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            if self.config.triggers_enabled and message.text:
                response = await self._check_triggers(message.text)
                if response:
                    await message.answer(response)
                    return
            
            # –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if self.config.smart_responses and message.text:
                response = await self._get_smart_response(message)
                if response:
                    await message.answer(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors_count'] += 1
    
    async def _check_triggers(self, text: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞."""
        try:
            for name, trigger in self.triggers.get('global', {}).items():
                pattern = trigger['pattern']
                trigger_type = trigger['type']
                response = trigger['response']
                
                match = False
                
                if trigger_type == 'contains' and pattern.lower() in text.lower():
                    match = True
                elif trigger_type == 'exact' and pattern.lower() == text.lower():
                    match = True
                elif trigger_type == 'starts_with' and text.lower().startswith(pattern.lower()):
                    match = True
                elif trigger_type == 'ends_with' and text.lower().endswith(pattern.lower()):
                    match = True
                elif trigger_type == 'regex':
                    try:
                        if re.search(pattern, text, re.IGNORECASE):
                            match = True
                    except re.error:
                        continue
                
                if match:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    trigger['usage_count'] = trigger.get('usage_count', 0) + 1
                    await self._save_triggers()
                    return response
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        
        return None
    
    async def _get_smart_response(self, message: Message) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        text = message.text.lower() if message.text else ""
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–µ–º–æ
        if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥–∞—Ä–æ–≤–∞']):
            return f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ö–∞–∫ –¥–µ–ª–∞?"
        
        if any(word in text for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ']):
            return "üòä –û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é, –ø–æ–º–æ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?"
        
        if any(word in text for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
            return "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!"
        
        if '?' in text and len(text) > 10:
            return "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å AI —è –¥–∞–º –±–æ–ª–µ–µ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç."
        
        if any(word in text for word in ['–±–æ—Ç', '—Ä–æ–±–æ—Ç', 'bot']):
            return "ü§ñ –î–∞, —è Enhanced Bot v3.0! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        return None
    
    async def _handle_command_error(self, message: Message, error: Exception, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥."""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /{command}: {error}")
        self.stats['errors_count'] += 1
        
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /{command}\\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode="HTML"
        )
    
    async def _handle_error(self, event, exception):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
        self.stats['errors_count'] += 1
        return True
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
    async def _handle_broadcast(self, message: Message): pass
    async def _handle_ban(self, message: Message): pass  
    async def _handle_mute(self, message: Message): pass
    async def _handle_trigger_callback(self, callback: CallbackQuery): pass
    async def _handle_trigger_name(self, message: Message, state: FSMContext): pass
    async def _handle_trigger_pattern(self, message: Message, state: FSMContext): pass
    async def _handle_trigger_response(self, message: Message, state: FSMContext): pass
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Telegram Bot v3.0...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ @{bot_info.username}")
            logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {self.config.admin_ids}")
            logger.info(f"‚ö° –§—É–Ω–∫—Ü–∏–∏: Smart={self.config.smart_responses}, Triggers={self.config.triggers_enabled}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        try:
            logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            await self._save_triggers()
            
            if self.bot:
                await self.bot.session.close()
                
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        bot = EnhancedTelegramBot()
        asyncio.run(bot.start())
        
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
'''

# –°–æ—Ö—Ä–∞–Ω–∏–º production-ready –∫–æ–¥
with open('production_main.py', 'w', encoding='utf-8') as f:
    f.write(production_main)

print("‚úÖ –°–æ–∑–¥–∞–Ω production-ready –∫–æ–¥: production_main.py")
print("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ~700 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")