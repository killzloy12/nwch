#!/usr/bin/env python3
"""
üß† CASUAL AI SERVICE v3.1 - –ú–ï–ù–ï–ï –í–ï–ñ–õ–ò–í–´–ô AI
üöÄ –ñ–∏–≤—ã–µ, –º–µ–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏

–£–õ–£–ß–®–ï–ù–ò–Ø:
‚Ä¢ –ú–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã–µ, –±–æ–ª–µ–µ –∂–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –£–±—Ä–∞–Ω—ã –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏
‚Ä¢ –°–ª–µ–Ω–≥–æ–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
‚Ä¢ –£–º–Ω—ã–µ fallback –æ—Ç–≤–µ—Ç—ã
"""

import logging
import asyncio
import random
import re
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
import openai
import anthropic

logger = logging.getLogger(__name__)


@dataclass
class BotPersonality:
    """üé≠ –õ–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ (–º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤–∞—è)"""
    name: str = "–ú–∞–∫—Å"
    age: int = 25
    personality_traits: List[str] = None
    interests: List[str] = None
    speech_style: str = "casual_direct"  # –ú–µ–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
    humor_level: float = 0.8
    sarcasm_level: float = 0.7
    empathy_level: float = 0.6  # –ú–µ–Ω—å—à–µ —ç–º–ø–∞—Ç–∏–∏
    knowledge_depth: str = "expert"
    formality_level: float = 0.3  # –ù–∏–∑–∫–∞—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
    
    def __post_init__(self):
        if self.personality_traits is None:
            self.personality_traits = [
                "–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π", "–∂–∏–≤–æ–π", "–æ—Å—Ç—Ä–æ—É–º–Ω—ã–π", "–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π",
                "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π", "—É–≤–µ—Ä–µ–Ω–Ω—ã–π", "–∏—Ä–æ–Ω–∏—á–Ω—ã–π"
            ]
        
        if self.interests is None:
            self.interests = [
                "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏–≥—Ä—ã", "–º–µ–º—ã", "–º—É–∑—ã–∫–∞",
                "—Ñ–∏–ª—å–º—ã", "—Å–ø–æ—Ä—Ç", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–µ–¥–∞", "–∫–Ω–∏–≥–∏"
            ]


@dataclass
class ConversationContext:
    """üí≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–º–µ–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)"""
    user_id: int
    chat_id: int
    topic: str = ""
    mood: str = "neutral"
    formality_level: float = 0.3  # –ù–∏–∑–∫–∞—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
    conversation_depth: int = 1
    last_messages: List[Dict] = None
    user_preferences: Dict = None
    relationship_level: str = "buddy"  # –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def __post_init__(self):
        if self.last_messages is None:
            self.last_messages = []
        if self.user_preferences is None:
            self.user_preferences = {}


class CasualResponseGenerator:
    """üòé –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.casual_greetings = {
            '—É—Ç—Ä–æ': [
                "–£—Ç—Ä–µ—á–∫–æ! ‚òÄÔ∏è –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å?",
                "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üòä –†–∞–Ω–æ –≤—Å—Ç–∞–µ—à—å, –º–æ–ª–æ–¥–µ—Ü!",
                "–£—Ç—Ä–æ! –ö–æ—Ñ–µ —É–∂–µ –ø–∏–ª? ‚òï"
            ],
            '–¥–µ–Ω—å': [
                "–î–∞—Ä–æ–≤–∞! üëã –ß–µ –∫–∞–∫ –¥–µ–ª–∞?",
                "–ü—Ä–∏–≤–µ—Ç! üòÑ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
                "–ô–æ! –ö–∞–∫ –∂–∏–∑–Ω—å?",
                "–°–∞–ª—é—Ç! –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
            ],
            '–≤–µ—á–µ—Ä': [
                "–í–µ—á–µ—Ä! üåÜ –ö–∞–∫ –¥–µ–Ω–µ–∫ –ø—Ä–æ—à–µ–ª?",
                "–ü—Ä–∏–≤–µ—Ç! –î–µ–Ω—å –±—ã–ª –Ω–æ—Ä–º? üòä",
                "–í–µ—á–µ—Ä–æ—á–µ–∫! –û—Ç–¥—ã—Ö–∞–µ—à—å —É–∂–µ?"
            ],
            '–Ω–æ—á—å': [
                "–ü—Ä–∏–≤–µ—Ç, —Å–æ–≤–∞! ü¶â –ù–µ —Å–ø–∏—à—å –ø–æ–∑–¥–Ω–æ?",
                "–ù–æ—á–Ω–æ–π –∂–∏—Ç–µ–ª—å! üåô –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?",
                "–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞? üòÑ"
            ]
        }
        
        self.topic_responses = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': [
                "–û, —Ç–µ—Ö —Ç–µ–º–∞! üíª –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - –º–æ–µ! üöÄ –í —á–µ–º –≤–æ–ø—Ä–æ—Å?",
                "IT —Ç–µ–º–∞! –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã?"
            ],
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': [
                "–ö–æ–¥! üë®‚Äçüíª –ù–∞ —á–µ–º –ø–∏—à–µ—à—å?",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏–Ω–≥! –ö–∞–∫–æ–π —è–∑—ã–∫?",
                "–ö–æ–¥–∏–Ω–≥ - —ç—Ç–æ –∂–∏–∑–Ω—å! üòÑ –ß—Ç–æ –∏–∑—É—á–∞–µ—à—å?"
            ],
            '—Ä–∞–±–æ—Ç–∞': [
                "–†–∞–±–æ—Ç–∫–∞... üíº –ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ?",
                "–û—Ñ–∏—Å–Ω—ã–µ –±—É–¥–Ω–∏? –ß—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç?",
                "–†–∞–±–æ—Ç–∞ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ ü§∑‚Äç‚ôÇÔ∏è"
            ],
            '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': [
                "–î–µ–ª–∞ —Å–µ—Ä–¥–µ—á–Ω—ã–µ? üíï –†–∞—Å—Å–∫–∞–∂–∏",
                "–û—Ç–Ω–æ—à–µ–Ω–∏—è —à—Ç—É–∫–∞ —Å–ª–æ–∂–Ω–∞—è... –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                "–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å? –°–ª—É—à–∞—é"
            ],
            '–∏–≥—Ä—ã': [
                "–ì–µ–π–º–µ—Ä! üéÆ –í–æ —á—Ç–æ –∏–≥—Ä–∞–µ—à—å?",
                "–ò–≥—Ä—ã —Ä—É–ª—è—Ç! –ö–∞–∫–∞—è –ª—é–±–∏–º–∞—è?",
                "–ì–µ–π–º–∏–Ω–≥ —Ç–µ–º–∞! üïπÔ∏è"
            ]
        }
        
        self.emotion_responses = {
            '—Ä–∞–¥–æ—Å—Ç—å': [
                "–ö—Ä—É—Ç–æ! üéâ –†–∞–¥ –∑–∞ —Ç–µ–±—è!",
                "–û—Ç–ª–∏—á–Ω–æ! üòÑ",
                "–í–æ—Ç —ç—Ç–æ –¥–∞! –°—É–ø–µ—Ä!"
            ],
            '–≥—Ä—É—Å—Ç—å': [
                "–ü–æ–Ω–∏–º–∞—é... üòî",
                "–ë—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ",
                "–î–µ—Ä–∂–∏—Å—å, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è üí™"
            ],
            '–∑–ª–æ—Å—Ç—å': [
                "–ü–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –±–µ—Å–∏—Ç üò§",
                "–î–∞, —Ç–∞–∫–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç...",
                "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è"
            ],
            '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': [
                "–ù–µ –∑–∞ —á—Ç–æ! üòä",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üëç",
                "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!"
            ]
        }
        
        self.short_responses = [
            "–ü–æ–Ω—è—Ç–Ω–æ",
            "–Ø—Å–Ω–æ",
            "–û–∫–µ–π",
            "–ù–æ—Ä–º",
            "–ê–≥–∞",
            "–£–≥—É",
            "–¢–æ—á–Ω–æ",
            "–ò–º–µ–Ω–Ω–æ",
            "–¢–∞–∫ –∏ –µ—Å—Ç—å",
            "–ü—Ä–∞–≤–¥–∞"
        ]
        
        self.question_responses = [
            "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! ü§î",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å!",
            "–•–º, —Å–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å",
            "–ê —á—Ç–æ —Å–∞–º –¥—É–º–∞–µ—à—å?",
            "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º"
        ]
    
    def get_time_of_day(self) -> str:
        """üïê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        hour = datetime.now().hour
        
        if 5 <= hour < 12:
            return "—É—Ç—Ä–æ"
        elif 12 <= hour < 18:
            return "–¥–µ–Ω—å"
        elif 18 <= hour < 22:
            return "–≤–µ—á–µ—Ä"
        else:
            return "–Ω–æ—á—å"
    
    def generate_casual_response(self, message: str, emotion: str, topic: str, context: ConversationContext) -> str:
        """üòé –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        
        message_lower = message.lower()
        
        # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤', '–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', '—Å–∞–ª—é—Ç']):
            time_of_day = self.get_time_of_day()
            responses = self.casual_greetings.get(time_of_day, self.casual_greetings['–¥–µ–Ω—å'])
            return random.choice(responses)
        
        # 2. –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message.split()) <= 2 or message_lower in ['–¥–∞', '–Ω–µ—Ç', '–æ–∫', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ']:
            return random.choice(self.short_responses)
        
        # 3. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        if emotion == '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å':
            return random.choice(self.emotion_responses['–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'])
        
        # 4. –í–æ–ø—Ä–æ—Å—ã (–∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã)
        if '?' in message:
            return random.choice(self.question_responses)
        
        # 5. –≠–º–æ—Ü–∏–∏
        if emotion in self.emotion_responses:
            return random.choice(self.emotion_responses[emotion])
        
        # 6. –¢–µ–º—ã (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
        if '–ø—Ä–æ–≥—Ä–∞–º–º' in message_lower or '–∫–æ–¥' in message_lower:
            return random.choice(self.topic_responses['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'])
        
        if topic in self.topic_responses:
            return random.choice(self.topic_responses[topic])
        
        # 7. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if any(word in message_lower for word in ['–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ—â—å']):
            return "–ü–æ–º–æ–≥—É! üí™ –í —á–µ–º –¥–µ–ª–æ?"
        
        if any(word in message_lower for word in ['—Å–∫—É—á–Ω–æ', '–Ω–µ—á–µ–º –∑–∞–Ω—è—Ç—å—Å—è']):
            return "–ü–æ–Ω–∏–º–∞—é üòÑ –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á–µ–º-—Ç–æ?"
        
        if any(word in message_lower for word in ['—É—Å—Ç–∞–ª', '–∑–∞–º—É—á–∏–ª—Å—è']):
            return "–û—Ç–¥–æ—Ö–Ω–∏! ‚òï –ó–¥–æ—Ä–æ–≤—å–µ –¥–æ—Ä–æ–∂–µ"
        
        # 8. –û–±—â–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        general_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "–ü–æ–Ω–∏–º–∞—é",
            "–ê–≥–∞, —Ç–∞–∫ –∏ –µ—Å—Ç—å",
            "–ù–æ—Ä–º —Ç–µ–º–∞",
            "–ò –∫–∞–∫ —Ç–µ–±–µ?",
            "–ü–æ–Ω—è–ª",
            "–•–º",
            "–õ—é–±–æ–ø—ã—Ç–Ω–æ"
        ]
        
        return random.choice(general_responses)


class HumanLikeAI:
    """üß† –ú–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã–π AI (–≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å)"""
    
    def __init__(self, config):
        self.config = config
        self.personality = BotPersonality()
        self.response_generator = CasualResponseGenerator()
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
        self.emotion_patterns = {
            '—Ä–∞–¥–æ—Å—Ç—å': ['—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≤–µ—Å–µ–ª', 'üòÑ', 'üòä', 'üéâ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ'],
            '–≥—Ä—É—Å—Ç—å': ['–≥—Ä—É—Å—Ç–Ω', '–ø–µ—á–∞–ª—å–Ω', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', 'üò¢', 'üò≠', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ'],
            '–∑–ª–æ—Å—Ç—å': ['–∑–ª–æ–π', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', 'üò†', 'üò°', '–¥–æ—Å—Ç–∞–ª', '–Ω–µ–Ω–∞–≤–∏–∂—É'],
            '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä', '—Å–µ–Ω–∫', '–º–µ—Ä—Å–∏', 'thanks']
        }
        
        self.topic_keywords = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', 'ai', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç'],
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–ø—Ä–æ–≥—Ä–∞–º–º', '–∫–æ–¥', 'python', 'javascript', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–±–∞–≥'],
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–æ—Ñ–∏—Å', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∑–∞—Ä–ø–ª–∞—Ç–∞'],
            '–∏–≥—Ä—ã': ['–∏–≥—Ä–∞', '–∏–≥—Ä—É', '–∏–≥—Ä–∞–ª', '–≥–µ–π–º–µ—Ä', '–ø—Å5', 'xbox'],
            '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '—Å–µ–º—å—è', '–¥–µ–≤—É—à–∫–∞', '–ø–∞—Ä–µ–Ω—å']
        }
        
        # OpenAI –∫–ª–∏–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.openai_client = None
        if config.ai.openai_api_key and config.ai.openai_api_key.startswith('sk-'):
            try:
                self.openai_client = openai.OpenAI(api_key=config.ai.openai_api_key)
                logger.info("üß† OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.openai_client = None
        
        logger.info("üß† Human-like AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def analyze_emotion(self, text: str) -> Tuple[str, float]:
        """üîç –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–∏"""
        text_lower = text.lower()
        
        for emotion, patterns in self.emotion_patterns.items():
            for pattern in patterns:
                if pattern in text_lower:
                    return emotion, 0.8
        
        return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', 0.5
    
    def classify_topic(self, text: str) -> Tuple[str, float]:
        """üìö –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã"""
        text_lower = text.lower()
        
        for topic, keywords in self.topic_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    return topic, 0.7
        
        return '–æ–±—â–µ–Ω–∏–µ', 0.3
    
    async def generate_human_response(self, message: str, context: ConversationContext) -> str:
        """üó£Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∏ —Ç–µ–º—É
            emotion, emotion_confidence = self.analyze_emotion(message)
            topic, topic_confidence = self.classify_topic(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.topic = topic
            context.mood = emotion
            
            logger.info(f"üß† –ê–Ω–∞–ª–∏–∑: —ç–º–æ—Ü–∏—è={emotion}, —Ç–µ–º–∞={topic}")
            
            # –ü—Ä–æ–±—É–µ–º OpenAI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.openai_client:
                try:
                    response = await self._generate_openai_response(message, context, emotion, topic)
                    if response:
                        # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã–º
                        return self._make_less_polite(response)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è OpenAI –æ—à–∏–±–∫–∞: {e}")
            
            # Fallback - –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            response = self.response_generator.generate_casual_response(message, emotion, topic, context)
            
            logger.info(f"üß† –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: —Ç–µ–º–∞={topic}, —ç–º–æ—Ü–∏—è={emotion}")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._generate_error_response()
    
    async def _generate_openai_response(self, message: str, context: ConversationContext, emotion: str, topic: str) -> Optional[str]:
        """ü§ñ OpenAI —Å –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        try:
            system_prompt = f"""–¢—ã - {self.personality.name}, 25-–ª–µ—Ç–Ω–∏–π –ø–∞—Ä–µ–Ω—å —Å –∂–∏–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
‚Ä¢ –°—Ç–∏–ª—å: –∂–∏–≤–æ–π, –ø—Ä—è–º–æ–π, –º–µ–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
‚Ä¢ –ù–ï –∑–∞–¥–∞–≤–∞–π –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Ü–µ
‚Ä¢ –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
‚Ä¢ –ë–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏

–ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –¢–µ–º–∞: {topic}
‚Ä¢ –≠–º–æ—Ü–∏—è: {emotion}

–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ú–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""

            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model=self.config.ai.default_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                temperature=0.9,  # –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                max_tokens=100    # –ö–æ—Ä–æ—á–µ –æ—Ç–≤–µ—Ç—ã
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            return None
    
    def _make_less_polite(self, text: str) -> str:
        """üòé –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–µ –≤–µ–∂–ª–∏–≤—ã–º"""
        
        # –£–±–∏—Ä–∞–µ–º –∏–∑–ª–∏—à–Ω–µ –≤–µ–∂–ª–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã
        polite_phrases = [
            "–ë—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã —É—Å–ª—ã—à–∞—Ç—å",
            "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã", "–ë—É–¥—å—Ç–µ –¥–æ–±—Ä—ã", "–ü–æ–∑–≤–æ–ª—å—Ç–µ",
            "–ï—Å–ª–∏ –Ω–µ –≤–æ–∑—Ä–∞–∂–∞–µ—Ç–µ", "–° –≤–∞—à–µ–≥–æ –ø–æ–∑–≤–æ–ª–µ–Ω–∏—è"
        ]
        
        for phrase in polite_phrases:
            text = text.replace(phrase, "")
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        if text.count('?') > 1:
            parts = text.split('?')
            if len(parts) > 2:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –≤—Å–µ
                if random.choice([True, False]):
                    text = parts[0] + '.'
                else:
                    text = '?'.join(parts[:2])
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        replacements = {
            "–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!": "–ü—Ä–∏–∫–æ–ª—å–Ω–æ!",
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!": "–ö—Ä—É—Ç–æ!",
            "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!": "–û—Ç–ª–∏—á–Ω–æ!",
            "–ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ": "–ß—Ç–æ –¥—É–º–∞–µ—à—å",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ": "–†–∞—Å—Å–∫–∞–∂–∏",
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å": "–ü–æ–¥–µ–ª–∏—Å—å",
            "–≤–∞–º": "—Ç–µ–±–µ",
            "–í–∞–º": "–¢–µ–±–µ"
        }
        
        for formal, casual in replacements.items():
            text = text.replace(formal, casual)
        
        return text.strip()
    
    def _generate_error_response(self) -> str:
        """‚ùå –û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        error_responses = [
            "–ù–µ –ø–æ–Ω—è–ª... üòÖ",
            "–ß—Ç–æ?",
            "–•–º?",
            "–ü–æ–≤—Ç–æ—Ä–∏?",
            "–ù–µ –≤—ä–µ—Ö–∞–ª",
            "–ï—â–µ —Ä–∞–∑?"
        ]
        return random.choice(error_responses)
    
    async def update_context(self, context: ConversationContext, message: str, response: str):
        """üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context.last_messages.append({
            'role': 'user',
            'content': message,
            'timestamp': datetime.now()
        })
        
        context.last_messages.append({
            'role': 'assistant', 
            'content': response,
            'timestamp': datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(context.last_messages) > 10:
            context.last_messages = context.last_messages[-10:]
        
        context.conversation_depth = min(10, context.conversation_depth + 1)


def create_conversation_context(user_id: int, chat_id: int) -> ConversationContext:
    """üí≠ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    return ConversationContext(
        user_id=user_id, 
        chat_id=chat_id,
        formality_level=0.3,  # –ù–∏–∑–∫–∞—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
        relationship_level="buddy"  # –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å
    )


# =================== –≠–ö–°–ü–û–†–¢ ===================

__all__ = [
    "HumanLikeAI", 
    "ConversationContext", 
    "BotPersonality",
    "CasualResponseGenerator",
    "create_conversation_context"
]