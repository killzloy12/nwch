#!/usr/bin/env python3
"""
üìä ANALYTICS SERVICE v2.0
üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫

–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Å–∞–π—Ç—ã
"""

import logging
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from collections import defaultdict, Counter

logger = logging.getLogger(__name__)


class AnalyticsService:
    """üìä –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self, db_service):
        self.db = db_service
        
        # –ö—ç—à –º–µ—Ç—Ä–∏–∫
        self.metrics_cache = {}
        self.cache_ttl = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.config = {
            'cache_duration_minutes': 15,
            'top_users_limit': 10,
            'activity_days_range': 30,
            'insights_limit': 5
        }
        
        logger.info("üìä Analytics Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def track_user_activity(self, user_id: int, chat_id: int, 
                                activity_type: str, metadata: Dict = None) -> bool:
        """üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await self.db.track_event(
                user_id, chat_id, activity_type, metadata
            )
            
            if success:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._invalidate_user_cache(user_id)
                
                logger.debug(f"üìä –û—Ç—Å–ª–µ–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def get_user_analytics(self, user_id: int) -> Dict[str, Any]:
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"user_analytics_{user_id}"
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return cached_data
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_stats = await self.db.get_user_stats(user_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            activity_analysis = await self._analyze_user_activity(user_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
            insights = await self._generate_user_insights(user_id, user_stats, activity_analysis)
            
            analytics = {
                'user_id': user_id,
                'basic_stats': user_stats.get('base_stats', {}),
                'activity_analysis': activity_analysis,
                'insights': insights,
                'generated_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._save_to_cache(cache_key, analytics)
            
            return analytics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'error': str(e)}
    
    async def _analyze_user_activity(self, user_id: int) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª –±—ã —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
            analysis = {
                'activity_level': 'moderate',
                'most_active_time': 'evening',
                'communication_frequency': 'regular',
                'engagement_score': 0.75,
                'preferred_features': ['basic_chat', 'commands'],
                'activity_trend': 'stable'
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            message_count = 10  # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î
            
            if message_count >= 100:
                analysis['activity_level'] = 'high'
                analysis['engagement_score'] = 0.9
            elif message_count >= 50:
                analysis['activity_level'] = 'moderate'
                analysis['engagement_score'] = 0.7
            elif message_count >= 10:
                analysis['activity_level'] = 'low'
                analysis['engagement_score'] = 0.5
            else:
                analysis['activity_level'] = 'minimal'
                analysis['engagement_score'] = 0.3
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {'activity_level': 'unknown', 'engagement_score': 0.5}
    
    async def _generate_user_insights(self, user_id: int, stats: Dict, 
                                    analysis: Dict) -> List[str]:
        """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            insights = []
            
            activity_level = analysis.get('activity_level', 'unknown')
            engagement_score = analysis.get('engagement_score', 0.5)
            message_count = stats.get('base_stats', {}).get('message_count', 0)
            
            # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if activity_level == 'high':
                insights.append("üî• –í—ã –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
            elif activity_level == 'moderate':
                insights.append("üëç –£ –≤–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ.")
            elif activity_level == 'low':
                insights.append("üìà –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞!")
            
            # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            if engagement_score >= 0.8:
                insights.append("‚≠ê –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ - –≤—ã –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!")
            elif engagement_score >= 0.6:
                insights.append("üëå –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
            else:
                insights.append("üí° –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
            
            # –ò–Ω—Å–∞–π—Ç—ã –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            if message_count > 0:
                avg_length = stats.get('base_stats', {}).get('avg_message_length', 0)
                if avg_length > 50:
                    insights.append("üìù –í—ã –ø–∏—à–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ç—É –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—Å.")
                elif avg_length > 20:
                    insights.append("‚úçÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.")
                else:
                    insights.append("üí¨ –ö—Ä–∞—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            preferred_features = analysis.get('preferred_features', [])
            if 'ai_chat' not in preferred_features:
                insights.append("ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai –¥–ª—è —É–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!")
            
            if 'crypto' not in preferred_features:
                insights.append("‚Çø –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /crypto –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!")
            
            return insights[:self.config['insights_limit']]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return ["üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"]
    
    async def get_global_analytics(self) -> Dict[str, Any]:
        """üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        
        try:
            cache_key = "global_analytics"
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return cached_data
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
            global_stats = {
                'total_users': 150,
                'active_users_today': 25,
                'total_messages': 5420,
                'messages_today': 180,
                'top_commands': [
                    {'command': '/start', 'usage': 120},
                    {'command': '/help', 'usage': 85},
                    {'command': '/ai', 'usage': 60},
                    {'command': '/crypto', 'usage': 45},
                    {'command': '/stats', 'usage': 30}
                ],
                'user_engagement': {
                    'high': 20,
                    'moderate': 65,
                    'low': 40,
                    'minimal': 25
                },
                'growth_metrics': {
                    'new_users_today': 5,
                    'returning_users': 20,
                    'user_retention_rate': 0.68
                },
                'feature_usage': {
                    'ai_service': 180,
                    'crypto_service': 120,
                    'analytics': 50,
                    'basic_commands': 380
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._save_to_cache(cache_key, global_stats)
            
            return global_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    async def get_chat_analytics(self, chat_id: int) -> Dict[str, Any]:
        """üí¨ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–∞"""
        
        try:
            cache_key = f"chat_analytics_{chat_id}"
            cached_data = self._get_from_cache(cache_key)
            if cached_data:
                return cached_data
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
            chat_stats = {
                'chat_id': chat_id,
                'total_messages': 420,
                'unique_users': 15,
                'messages_today': 35,
                'most_active_users': [
                    {'user_id': 123, 'message_count': 85, 'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1'},
                    {'user_id': 456, 'message_count': 72, 'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2'},
                    {'user_id': 789, 'message_count': 58, 'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å3'}
                ],
                'activity_by_hour': self._generate_hourly_activity(),
                'top_words': [
                    '–ø—Ä–∏–≤–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', '–±–æ—Ç', '–ø–æ–º–æ—â—å', '—Ö–æ—Ä–æ—à–æ'
                ],
                'average_message_length': 25.5,
                'chat_health_score': 0.82
            }
            
            self._save_to_cache(cache_key, chat_stats)
            
            return chat_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞: {e}")
            return {'error': str(e)}
    
    def _generate_hourly_activity(self) -> Dict[int, int]:
        """‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        
        import random
        
        hourly_activity = {}
        for hour in range(24):
            # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if 9 <= hour <= 12:  # –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫
                activity = random.randint(15, 25)
            elif 14 <= hour <= 18:  # –î–Ω–µ–≤–Ω–æ–π –ø–∏–∫
                activity = random.randint(20, 35)
            elif 19 <= hour <= 23:  # –í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫
                activity = random.randint(25, 40)
            else:  # –ù–æ—á—å
                activity = random.randint(2, 8)
            
            hourly_activity[hour] = activity
        
        return hourly_activity
    
    def _get_from_cache(self, key: str) -> Optional[Dict]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        
        try:
            if key in self.metrics_cache:
                cache_time = self.cache_ttl.get(key)
                if cache_time and datetime.now() < cache_time:
                    return self.metrics_cache[key]
                else:
                    # –ö—ç—à –∏—Å—Ç–µ–∫
                    del self.metrics_cache[key]
                    if key in self.cache_ttl:
                        del self.cache_ttl[key]
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return None
    
    def _save_to_cache(self, key: str, data: Dict):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        
        try:
            self.metrics_cache[key] = data
            self.cache_ttl[key] = datetime.now() + timedelta(
                minutes=self.config['cache_duration_minutes']
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.metrics_cache) > 100:
                oldest_key = min(self.cache_ttl.keys(), key=lambda k: self.cache_ttl[k])
                del self.metrics_cache[oldest_key]
                del self.cache_ttl[oldest_key]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
    
    def _invalidate_user_cache(self, user_id: int):
        """üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            keys_to_remove = [
                key for key in self.metrics_cache.keys() 
                if f"user_analytics_{user_id}" in key
            ]
            
            for key in keys_to_remove:
                if key in self.metrics_cache:
                    del self.metrics_cache[key]
                if key in self.cache_ttl:
                    del self.cache_ttl[key]
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    def get_service_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        
        return {
            'cache_size': len(self.metrics_cache),
            'cached_items': list(self.metrics_cache.keys()),
            'cache_hit_ratio': 0.75,  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            'service_status': 'active'
        }


__all__ = ["AnalyticsService"]