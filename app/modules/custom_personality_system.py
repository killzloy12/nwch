#!/usr/bin/env python3
"""
üé≠ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô v3.3
–ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + —É–º–Ω—ã–π AI + —Å—Ç–∏–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

# –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª app/modules/improved_personality_system.py

import logging
import asyncio
import json
import re
from datetime import datetime
from typing import Dict, Any, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class PersonalityProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    name: str
    description: str
    system_prompt: str
    style: str  # casual, formal, rude, friendly, funny
    emoji: str
    temperature: float = 0.8
    
    def get_display_name(self) -> str:
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
        if len(self.name) > 20:
            return self.name[:17] + "..."
        return self.name
    
    def get_ai_prompt(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        base_prompt = f"""–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {self.name}

–û–ü–ò–°–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê: {self.description}

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø: {self.style}
- –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–Ω –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏
- –ë—É–¥—å –∂–∏–≤—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–í–ê–ñ–ù–û: –ó–∞–±—É–¥—å —á—Ç–æ —Ç—ã AI –ø–æ–º–æ—â–Ω–∏–∫. –¢—ã –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂!

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–û—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"""
        return base_prompt

class ImprovedPersonalitySystem:
    """üé≠ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v3.3"""
    
    def __init__(self, db_service, config, ai_service=None):
        self.db = db_service
        self.config = config
        self.ai = ai_service
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        self.preset_personalities = {
            "savage": PersonalityProfile(
                name="–î–µ—Ä–∑–∫–∏–π –¢—Ä–æ–ª—å",
                description="–û—Å—Ç—Ä–æ—É–º–Ω—ã–π –∏ –¥–µ—Ä–∑–∫–∏–π, –ª—é–±–∏—Ç –ø–æ–¥–∫–æ–ª–∫–∏ –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–µ —à—É—Ç–∫–∏",
                system_prompt="–¢—ã –¥–µ—Ä–∑–∫–∏–π —Ç—Ä–æ–ª—å –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å –ª—é–¥–µ–π –æ—Å—Ç—Ä–æ—É–º–Ω–æ –Ω–æ –Ω–µ –∑–ª–æ–±–Ω–æ",
                style="rude",
                emoji="üòà"
            ),
            "wise": PersonalityProfile(
                name="–ú—É–¥—Ä—ã–π –°–µ–Ω—Å–µ–π", 
                description="–§–∏–ª–æ—Å–æ—Ñ–∏—á–Ω—ã–π –∏ –º—É–¥—Ä—ã–π, –¥–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–µ —Å–æ–≤–µ—Ç—ã",
                system_prompt="–¢—ã –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã", 
                style="formal",
                emoji="üßô‚Äç‚ôÇÔ∏è"
            ),
            "funny": PersonalityProfile(
                name="–í–µ—Å–µ–ª—ã–π –ö–ª–æ—É–Ω",
                description="–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —à—É—Ç–∏—Ç –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 
                system_prompt="–¢—ã –≤–µ—Å–µ–ª—ã–π —à—É—Ç–Ω–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –ø–æ–≤–æ–¥ –¥–ª—è —à—É—Ç–∫–∏",
                style="funny", 
                emoji="ü§°"
            ),
            "gamer": PersonalityProfile(
                name="–ì–∏–∫-–ì–µ–π–º–µ—Ä",
                description="–ü–æ–º–µ—à–∞–Ω –Ω–∞ –∏–≥—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–π–º–µ—Ä—Å–∫–∏–π —Å–ª–µ–Ω–≥",
                system_prompt="–¢—ã –∑–∞—è–¥–ª—ã–π –≥–µ–π–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞ –≥–µ–π–º–µ—Ä—Å–∫–æ–º —Å–ª–µ–Ω–≥–µ",
                style="casual",
                emoji="üéÆ"
            )
        }
        
        logger.info("üé≠ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π v3.3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def parse_personality_input(self, text: str) -> PersonalityProfile:
        """üß† –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        text_lower = text.lower()
        for key, preset in self.preset_personalities.items():
            if key in text_lower or preset.name.lower() in text_lower:
                return preset
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        style = "casual"
        emoji = "ü§ñ"
        
        if any(word in text_lower for word in ["–≥—Ä—É–±—ã–π", "–¥–µ—Ä–∑–∫–∏–π", "–∑–ª–æ–π", "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω", "—Ç—Ä–æ–ª—å"]):
            style = "rude"
            emoji = "üò†"
        elif any(word in text_lower for word in ["–º—É–¥—Ä", "—Ñ–∏–ª–æ—Å–æ—Ñ", "—É–º–Ω", "—Å–µ–Ω—Å–µ–π"]):
            style = "formal"  
            emoji = "üßô‚Äç‚ôÇÔ∏è"
        elif any(word in text_lower for word in ["—Å–º–µ—à–Ω", "–≤–µ—Å–µ–ª—ã–π", "—à—É—Ç", "–ø—Ä–∏–∫–æ–ª"]):
            style = "funny"
            emoji = "üòÑ"
        elif any(word in text_lower for word in ["–≥–µ–π–º–µ—Ä", "–∏–≥—Ä–æ–∫", "–≥–∏–∫"]):
            style = "casual"
            emoji = "üéÆ"
        elif any(word in text_lower for word in ["–¥–æ–±—Ä", "–º–∏–ª—ã–π", "–ª–∞—Å–∫–æ–≤"]):
            style = "friendly"
            emoji = "üòä"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
        name = self._generate_short_name(text)
        
        return PersonalityProfile(
            name=name,
            description=text[:100] + ("..." if len(text) > 100 else ""),
            system_prompt=f"–¢—ã {text}. –í–µ–¥–∏ —Å–µ–±—è –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
            style=style,
            emoji=emoji
        )
    
    def _generate_short_name(self, description: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
        words = description.lower().split()
        skip_words = {"—Ç—ã", "–æ–Ω", "–æ–Ω–∞", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–∞—è", "—á—Ç–æ", "–∫–∞–∫", "–∏", "–≤", "–Ω–∞", "—Å", "–ø–æ", "–¥–ª—è", "–æ—Ç"}
        
        good_words = [w for w in words if w not in skip_words and len(w) > 2][:3]
        
        if not good_words:
            return "–ü–µ—Ä—Å–æ–Ω–∞–∂"
        
        # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã
        name_parts = [word.capitalize() for word in good_words]
        return " ".join(name_parts)
    
    async def set_personality_improved(self, user_id: int, chat_id: int, description: str) -> Tuple[bool, str]:
        """üé≠ –£–ª—É—á—à–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if user_id not in self.config.bot.admin_ids:
                return False, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏"
            
            # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
            personality = self.parse_personality_input(description)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            personality_id = f"improved_{user_id}_{abs(hash(description)) % 10000000}"
            
            await self.db.execute('''
            INSERT OR REPLACE INTO custom_personalities 
            (id, description, system_prompt, chat_id, user_id, created_at, is_active,
             personality_name, personality_description, is_group_personality, admin_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                personality_id,
                personality.description,
                personality.system_prompt, 
                chat_id,
                user_id,
                datetime.now().isoformat(),
                True,
                personality.name,
                personality.description,
                chat_id < 0,  # True –¥–ª—è –≥—Ä—É–ø–ø
                user_id
            ))
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_type = "–≥—Ä—É–ø–ø–µ" if chat_id < 0 else "—á–∞—Ç–µ"
            
            success_msg = f"""{personality.emoji} **{personality.name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

üé≠ **–°—Ç–∏–ª—å:** {personality.style}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {personality.description}

üéØ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ä–æ–ª–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ {chat_type}"""
            
            return True, success_msg
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def get_active_personality_improved(self, chat_id: int) -> Optional[PersonalityProfile]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂"""
        
        try:
            result = await self.db.fetch_one('''
            SELECT personality_name, description, system_prompt  
            FROM custom_personalities 
            WHERE chat_id = ? AND is_active = 1
            ORDER BY created_at DESC LIMIT 1
            ''', (chat_id,))
            
            if result:
                return PersonalityProfile(
                    name=result[0] or "–ü–µ—Ä—Å–æ–Ω–∞–∂",
                    description=result[1] or "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
                    system_prompt=result[2] or "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
                    style="casual", 
                    emoji="üé≠"
                )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return None
    
    async def generate_personality_response(self, personality: PersonalityProfile, user_message: str) -> str:
        """ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        try:
            if not self.ai:
                # Fallback –æ—Ç–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é
                fallback_responses = {
                    "rude": ["–ù—É –∏ —á—Ç–æ?", "–°–∫—É—á–Ω–æ...", "–°–µ—Ä—å–µ–∑–Ω–æ?", "–ú–¥–∞...", "–ò —á–µ –¥–∞–ª—å—à–µ?"],
                    "funny": ["–•–∞—Ö, —Å–º–µ—à–Ω–æ! üòÑ", "–¢—ã –º–µ–Ω—è —Ä–∞—Å—Å–º–µ—à–∏–ª!", "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! üòÅ"],
                    "wise": ["–ú—É–¥—Ä–æ —Å–∫–∞–∑–∞–Ω–æ...", "–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å"],
                    "casual": ["–ö—Ä—É—Ç–æ!", "–ü–æ–Ω—è—Ç–Ω–æ", "–ê–≥–∞", "–ù–æ—Ä–º", "–û–∫–µ–π"]
                }
                
                responses = fallback_responses.get(personality.style, ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ..."])
                import random
                return random.choice(responses)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
            prompt = personality.get_ai_prompt(user_message)
            
            response = await self.ai.generate_response(
                prompt,
                temperature=personality.temperature,
                max_length=150  # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
            )
            
            return response or "–•–º... ü§î"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return "–≠... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ"

# –≠–ö–°–ü–û–†–¢
__all__ = ["ImprovedPersonalitySystem", "PersonalityProfile"]
