# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/custom_wake_words.py

#!/usr/bin/env python3
"""
üî§ CUSTOM WAKE WORDS SYSTEM v4.0
–ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞ –±–æ—Ç–∞
"""

import logging
import re
import json
from datetime import datetime
from typing import Dict, List, Set, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class WakeWord:
    word: str
    chat_id: int
    creator_id: int
    is_regex: bool = False
    case_sensitive: bool = False
    whole_word_only: bool = True
    response_probability: float = 1.0
    custom_greeting: Optional[str] = None
    created_at: datetime = None
    usage_count: int = 0

class CustomWakeWordsSystem:
    """üî§ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞"""
    
    def __init__(self, db_service, config):
        self.db = db_service
        self.config = config
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
        self.default_wake_words = {
            "–±–æ—Ç", "bot", "—Ä–æ–±–æ—Ç", "–º–∞–∫—Å", "max", "—ç–π", "—Å–ª—É—à–∞–π", 
            "–ø–æ–º–æ—â–Ω–∏–∫", "assistant", "ai", "–∞–π", "—Ö–µ–π", "hey"
        }
        
        # –ö—ç—à –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ —á–∞—Ç–∞–º
        self.custom_words_cache: Dict[int, Set[WakeWord]] = {}
        self.cache_last_update = {}
        
        logger.info("üî§ Custom Wake Words System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_tables()
        await self._load_all_wake_words()
        
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã"""
        
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS custom_wake_words (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            word TEXT NOT NULL,
            chat_id INTEGER NOT NULL,
            creator_id INTEGER NOT NULL,
            is_regex BOOLEAN DEFAULT 0,
            case_sensitive BOOLEAN DEFAULT 0,
            whole_word_only BOOLEAN DEFAULT 1,
            response_probability REAL DEFAULT 1.0,
            custom_greeting TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            usage_count INTEGER DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            
            UNIQUE(word, chat_id),
            INDEX(chat_id),
            INDEX(creator_id),
            INDEX(is_active)
        )
        ''')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS wake_words_usage (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            word_id INTEGER,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            word_used TEXT NOT NULL,
            message_text TEXT,
            used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            INDEX(chat_id),
            INDEX(used_at),
            FOREIGN KEY(word_id) REFERENCES custom_wake_words(id)
        )
        ''')
    
    async def add_wake_word(self, word: str, chat_id: int, creator_id: int, 
                           **options) -> Tuple[bool, str]:
        """‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞"""
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            word = word.strip()
            if not word:
                return False, "‚ùå –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞"
            
            if len(word) > 50:
                return False, "‚ùå –°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º regex –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            is_regex = options.get('is_regex', False)
            if is_regex:
                try:
                    re.compile(word)
                except re.error as e:
                    return False, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = await self.db.fetch_one('''
            SELECT id FROM custom_wake_words 
            WHERE word = ? AND chat_id = ? AND is_active = 1
            ''', (word, chat_id))
            
            if existing:
                return False, f"‚ùå –°–ª–æ–≤–æ '{word}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            wake_word = WakeWord(
                word=word,
                chat_id=chat_id,
                creator_id=creator_id,
                is_regex=is_regex,
                case_sensitive=options.get('case_sensitive', False),
                whole_word_only=options.get('whole_word_only', True),
                response_probability=options.get('response_probability', 1.0),
                custom_greeting=options.get('custom_greeting'),
                created_at=datetime.now()
            )
            
            await self.db.execute('''
            INSERT INTO custom_wake_words 
            (word, chat_id, creator_id, is_regex, case_sensitive, 
             whole_word_only, response_probability, custom_greeting)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                wake_word.word, wake_word.chat_id, wake_word.creator_id,
                wake_word.is_regex, wake_word.case_sensitive, wake_word.whole_word_only,
                wake_word.response_probability, wake_word.custom_greeting
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await self._update_chat_cache(chat_id)
            
            success_msg = f"‚úÖ –°–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞ **{word}** –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            
            if is_regex:
                success_msg += "üîç –¢–∏–ø: –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n"
            else:
                success_msg += "üìù –¢–∏–ø: –û–±—ã—á–Ω–æ–µ —Å–ª–æ–≤–æ\n"
            
            if not wake_word.case_sensitive:
                success_msg += "üî§ –†–µ–≥–∏—Å—Ç—Ä: –ù–µ –≤–∞–∂–µ–Ω\n"
            
            if wake_word.response_probability < 1.0:
                success_msg += f"üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {int(wake_word.response_probability * 100)}%\n"
            
            if wake_word.custom_greeting:
                success_msg += f"üëã –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {wake_word.custom_greeting}\n"
            
            return True, success_msg
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def remove_wake_word(self, word: str, chat_id: int, user_id: int) -> Tuple[bool, str]:
        """‚ûñ –£–¥–∞–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞
            existing = await self.db.fetch_one('''
            SELECT id, creator_id FROM custom_wake_words 
            WHERE word = ? AND chat_id = ? AND is_active = 1
            ''', (word, chat_id))
            
            if not existing:
                return False, f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
            if existing[1] != user_id and user_id not in self.config.bot.admin_ids:
                return False, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–ª–æ–≤–∞ –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å"
            
            # –£–¥–∞–ª—è–µ–º (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º)
            await self.db.execute('''
            UPDATE custom_wake_words SET is_active = 0 
            WHERE word = ? AND chat_id = ?
            ''', (word, chat_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await self._update_chat_cache(chat_id)
            
            return True, f"‚úÖ –°–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞ '{word}' —É–¥–∞–ª–µ–Ω–æ"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def check_wake_words(self, text: str, chat_id: int, user_id: int, 
                             bot_username: str = None) -> Tuple[bool, Optional[WakeWord], str]:
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
            if bot_username and f"@{bot_username.lower()}" in text.lower():
                await self._log_usage(None, chat_id, user_id, f"@{bot_username}", text)
                return True, None, "mention"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
            text_lower = text.lower()
            for default_word in self.default_wake_words:
                if self._check_word_match(default_word, text_lower, 
                                        case_sensitive=False, whole_word_only=True):
                    await self._log_usage(None, chat_id, user_id, default_word, text)
                    return True, None, "default"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞
            custom_words = await self._get_chat_wake_words(chat_id)
            
            for wake_word in custom_words:
                if self._check_wake_word_match(wake_word, text):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                    if wake_word.response_probability < 1.0:
                        import random
                        if random.random() > wake_word.response_probability:
                            continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await self._update_word_usage(wake_word, chat_id, user_id, text)
                    
                    return True, wake_word, "custom"
            
            return False, None, ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {e}")
            return False, None, ""
    
    def _check_wake_word_match(self, wake_word: WakeWord, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞"""
        
        try:
            if wake_word.is_regex:
                # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                flags = 0 if wake_word.case_sensitive else re.IGNORECASE
                return bool(re.search(wake_word.word, text, flags))
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–ª–æ–≤–æ
                check_text = text if wake_word.case_sensitive else text.lower()
                check_word = wake_word.word if wake_word.case_sensitive else wake_word.word.lower()
                
                return self._check_word_match(check_word, check_text, 
                                            wake_word.case_sensitive, wake_word.whole_word_only)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞: {e}")
            return False
    
    def _check_word_match(self, word: str, text: str, case_sensitive: bool, whole_word_only: bool) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
        
        if whole_word_only:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
            pattern = r'\b' + re.escape(word) + r'\b'
            flags = 0 if case_sensitive else re.IGNORECASE
            return bool(re.search(pattern, text, flags))
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
            return word in text
    
    async def list_wake_words(self, chat_id: int) -> Tuple[List[str], List[WakeWord]]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞ –¥–ª—è —á–∞—Ç–∞"""
        
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
            default_words = list(self.default_wake_words)
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞
            custom_words = await self._get_chat_wake_words(chat_id)
            
            return default_words, custom_words
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {e}")
            return [], []
    
    async def get_wake_words_stats(self, chat_id: int, days: int = 7) -> Dict[str, any]:
        """üìä –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞"""
        
        try:
            from_date = datetime.now() - timedelta(days=days)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_usage = await self.db.fetch_one('''
            SELECT COUNT(*) FROM wake_words_usage 
            WHERE chat_id = ? AND used_at >= ?
            ''', (chat_id, from_date))
            
            # –¢–æ–ø —Å–ª–æ–≤
            top_words = await self.db.fetch_all('''
            SELECT word_used, COUNT(*) as count
            FROM wake_words_usage 
            WHERE chat_id = ? AND used_at >= ?
            GROUP BY word_used 
            ORDER BY count DESC 
            LIMIT 10
            ''', (chat_id, from_date))
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            top_users = await self.db.fetch_all('''
            SELECT user_id, COUNT(*) as count
            FROM wake_words_usage 
            WHERE chat_id = ? AND used_at >= ?
            GROUP BY user_id 
            ORDER BY count DESC 
            LIMIT 10
            ''', (chat_id, from_date))
            
            return {
                'total_usage': total_usage[0] if total_usage else 0,
                'top_words': [{'word': row[0], 'count': row[1]} for row in top_words],
                'top_users': [{'user_id': row[0], 'count': row[1]} for row in top_users],
                'period_days': days
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {e}")
            return {}
    
    async def _get_chat_wake_words(self, chat_id: int) -> List[WakeWord]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ –¥–ª—è —á–∞—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if chat_id in self.custom_words_cache:
            cache_age = datetime.now() - self.cache_last_update.get(chat_id, datetime.min)
            if cache_age.total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                return list(self.custom_words_cache[chat_id])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        await self._update_chat_cache(chat_id)
        return list(self.custom_words_cache.get(chat_id, set()))
    
    async def _update_chat_cache(self, chat_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞ –¥–ª—è —á–∞—Ç–∞"""
        
        try:
            words_data = await self.db.fetch_all('''
            SELECT word, creator_id, is_regex, case_sensitive, whole_word_only,
                   response_probability, custom_greeting, created_at, usage_count
            FROM custom_wake_words 
            WHERE chat_id = ? AND is_active = 1
            ''', (chat_id,))
            
            words_set = set()
            for row in words_data:
                wake_word = WakeWord(
                    word=row[0],
                    chat_id=chat_id,
                    creator_id=row[1],
                    is_regex=bool(row[2]),
                    case_sensitive=bool(row[3]),
                    whole_word_only=bool(row[4]),
                    response_probability=row[5],
                    custom_greeting=row[6],
                    created_at=datetime.fromisoformat(row[7]) if row[7] else None,
                    usage_count=row[8]
                )
                words_set.add(wake_word)
            
            self.custom_words_cache[chat_id] = words_set
            self.cache_last_update[chat_id] = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {e}")
    
    async def _update_word_usage(self, wake_word: WakeWord, chat_id: int, user_id: int, text: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
        
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            await self.db.execute('''
            UPDATE custom_wake_words SET usage_count = usage_count + 1
            WHERE word = ? AND chat_id = ?
            ''', (wake_word.word, chat_id))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            await self._log_usage(None, chat_id, user_id, wake_word.word, text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤–∞: {e}")
    
    async def _log_usage(self, word_id: Optional[int], chat_id: int, user_id: int, 
                        word_used: str, message_text: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞"""
        
        try:
            await self.db.execute('''
            INSERT INTO wake_words_usage (word_id, chat_id, user_id, word_used, message_text)
            VALUES (?, ?, ?, ?, ?)
            ''', (word_id, chat_id, user_id, word_used, message_text[:200]))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")

# –≠–ö–°–ü–û–†–¢
__all__ = ["CustomWakeWordsSystem", "WakeWord"]
