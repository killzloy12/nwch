# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/adaptive_ai_learning.py

#!/usr/bin/env python3
"""
üß† ADAPTIVE AI LEARNING SYSTEM v4.0
–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–Ω–∏—è
"""

import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from collections import defaultdict, deque
import hashlib

logger = logging.getLogger(__name__)

@dataclass
class UserProfile:
    user_id: int
    chat_id: int
    communication_style: str = "neutral"  # friendly, formal, casual, rude
    interests: List[str] = None
    preferred_topics: List[str] = None
    response_length_preference: str = "medium"  # short, medium, long
    humor_level: float = 0.5  # 0.0 - serious, 1.0 - very humorous
    technical_level: str = "medium"  # basic, medium, advanced
    language_complexity: str = "medium"  # simple, medium, complex
    activity_times: List[int] = None  # –ß–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_updated: datetime = None
    interaction_count: int = 0

@dataclass
class ConversationContext:
    chat_id: int
    current_topic: Optional[str] = None
    mood: str = "neutral"  # positive, neutral, negative
    formality_level: str = "casual"  # formal, casual, informal
    participants: List[int] = None
    recent_messages: deque = None
    topic_history: List[str] = None
    last_updated: datetime = None

@dataclass
class LearningPattern:
    pattern_id: str
    chat_id: int
    user_id: Optional[int]
    pattern_type: str  # response_style, topic_preference, timing, etc.
    pattern_data: Dict[str, Any]
    confidence: float = 0.0  # 0.0 - 1.0
    usage_count: int = 0
    success_rate: float = 0.0
    created_at: datetime = None
    last_used: datetime = None

class AdaptiveAILearning:
    """üß† –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI"""
    
    def __init__(self, db_service, ai_service, config):
        self.db = db_service
        self.ai = ai_service
        self.config = config
        
        # –ö—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_profiles: Dict[Tuple[int, int], UserProfile] = {}
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        self.conversation_contexts: Dict[int, ConversationContext] = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—É—á–µ–Ω–∏—è
        self.learning_patterns: Dict[str, LearningPattern] = {}
        
        # –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.message_queues: Dict[int, deque] = defaultdict(lambda: deque(maxlen=50))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        self.learning_stats = {
            'patterns_learned': 0,
            'successful_adaptations': 0,
            'user_profiles_created': 0
        }
        
        logger.info("üß† Adaptive AI Learning System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_tables()
        await self._load_user_profiles()
        await self._load_learning_patterns()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(self._periodic_learning_analysis())
        asyncio.create_task(self._cleanup_old_data())
    
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS user_ai_profiles (
            user_id INTEGER NOT NULL,
            chat_id INTEGER NOT NULL,
            communication_style TEXT DEFAULT 'neutral',
            interests TEXT,  -- JSON array
            preferred_topics TEXT,  -- JSON array
            response_length_preference TEXT DEFAULT 'medium',
            humor_level REAL DEFAULT 0.5,
            technical_level TEXT DEFAULT 'medium',
            language_complexity TEXT DEFAULT 'medium',
            activity_times TEXT,  -- JSON array of hours
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            interaction_count INTEGER DEFAULT 0,
            
            PRIMARY KEY(user_id, chat_id),
            INDEX(chat_id),
            INDEX(last_updated)
        )
        ''')
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS conversation_contexts (
            chat_id INTEGER PRIMARY KEY,
            current_topic TEXT,
            mood TEXT DEFAULT 'neutral',
            formality_level TEXT DEFAULT 'casual',
            participants TEXT,  -- JSON array
            recent_messages TEXT,  -- JSON array
            topic_history TEXT,  -- JSON array
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—É—á–µ–Ω–∏—è
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS ai_learning_patterns (
            pattern_id TEXT PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            user_id INTEGER,
            pattern_type TEXT NOT NULL,
            pattern_data TEXT NOT NULL,  -- JSON
            confidence REAL DEFAULT 0.0,
            usage_count INTEGER DEFAULT 0,
            success_rate REAL DEFAULT 0.0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_used TIMESTAMP,
            
            INDEX(chat_id),
            INDEX(pattern_type),
            INDEX(confidence),
            INDEX(last_used)
        )
        ''')
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS ai_interaction_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            user_message TEXT NOT NULL,
            bot_response TEXT,
            response_quality REAL,  -- –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
            context_data TEXT,  -- JSON —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            INDEX(chat_id),
            INDEX(user_id),
            INDEX(timestamp),
            INDEX(response_quality)
        )
        ''')
    
    async def learn_from_interaction(self, chat_id: int, user_id: int, 
                                   user_message: str, bot_response: str,
                                   feedback_score: Optional[float] = None) -> bool:
        """üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.message_queues[chat_id].append({
                'user_id': user_id,
                'message': user_message,
                'response': bot_response,
                'timestamp': datetime.now(),
                'feedback': feedback_score
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._update_user_profile(chat_id, user_id, user_message, feedback_score)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            await self._update_conversation_context(chat_id, user_message, user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            await self.db.execute('''
            INSERT INTO ai_interaction_history 
            (chat_id, user_id, user_message, bot_response, response_quality, context_data)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                chat_id, user_id, user_message, bot_response, feedback_score,
                json.dumps({'context': 'interaction'}, ensure_ascii=False)
            ))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(self.message_queues[chat_id]) >= 10:
                asyncio.create_task(self._analyze_patterns(chat_id))
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏: {e}")
            return False
    
    async def get_adaptive_prompt(self, chat_id: int, user_id: int, 
                                user_message: str) -> str:
        """üéØ –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await self._get_user_profile(chat_id, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conv_context = await self._get_conversation_context(chat_id)
            
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            base_prompt = "–¢—ã —É–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram –±–æ—Ç–µ. "
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_profile:
                # –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
                style_prompts = {
                    'friendly': "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Ç–µ–ø–ª—ã–º –≤ –æ–±—â–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ.",
                    'formal': "–û–±—â–∞–π—Å—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –ò–∑–±–µ–≥–∞–π —Å–ª–µ–Ω–≥–∞.",
                    'casual': "–û–±—â–∞–π—Å—è –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥.",
                    'rude': "–ë—É–¥—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–º –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∏–º, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≥—Ä–∞–Ω–∏—Ü—ã."
                }
                
                base_prompt += style_prompts.get(user_profile.communication_style, 
                                               "–û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. ")
                
                # –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
                length_prompts = {
                    'short': "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏, –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. ",
                    'medium': "–û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. ",
                    'long': "–î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. "
                }
                
                base_prompt += length_prompts.get(user_profile.response_length_preference,
                                                length_prompts['medium'])
                
                # –£—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞
                if user_profile.humor_level > 0.7:
                    base_prompt += "–î–æ–±–∞–≤–ª—è–π —é–º–æ—Ä –∏ —à—É—Ç–∫–∏ –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã. "
                elif user_profile.humor_level < 0.3:
                    base_prompt += "–ë—É–¥—å —Å–µ—Ä—å–µ–∑–Ω—ã–º, –∏–∑–±–µ–≥–∞–π —à—É—Ç–æ–∫. "
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
                tech_prompts = {
                    'basic': "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏–∑–±–µ–≥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤. ",
                    'medium': "–ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏. ",
                    'advanced': "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏. "
                }
                
                base_prompt += tech_prompts.get(user_profile.technical_level,
                                              tech_prompts['medium'])
                
                # –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_profile.interests:
                    interests_str = ", ".join(user_profile.interests[:3])
                    base_prompt += f"–£—á—Ç–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è: {interests_str}. "
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if conv_context:
                # –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞
                if conv_context.current_topic:
                    base_prompt += f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {conv_context.current_topic}. "
                
                # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                mood_prompts = {
                    'positive': "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. ",
                    'negative': "–ë—É–¥—å –ø–æ–Ω–∏–º–∞—é—â–∏–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. ",
                    'neutral': ""
                }
                
                base_prompt += mood_prompts.get(conv_context.mood, "")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            base_prompt += f"\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n\n–û—Ç–≤–µ—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º:"
            
            return base_prompt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
    
    async def _update_user_profile(self, chat_id: int, user_id: int, 
                                 message: str, feedback: Optional[float]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self._get_user_profile(chat_id, user_id)
            if not profile:
                profile = UserProfile(
                    user_id=user_id,
                    chat_id=chat_id,
                    interests=[],
                    preferred_topics=[],
                    activity_times=[],
                    last_updated=datetime.now()
                )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            new_style = self._analyze_communication_style(message)
            if new_style != 'neutral':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
                profile.communication_style = self._blend_styles(profile.communication_style, new_style)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–∞
            message_length = len(message.split())
            if message_length < 5:
                profile.response_length_preference = 'short'
            elif message_length > 20:
                profile.response_length_preference = 'long'
            else:
                profile.response_length_preference = 'medium'
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
            tech_level = self._analyze_technical_level(message)
            profile.technical_level = tech_level
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            current_hour = datetime.now().hour
            if current_hour not in profile.activity_times:
                profile.activity_times.append(current_hour)
                profile.activity_times = profile.activity_times[-24:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 –∑–∞–ø–∏—Å–∏
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            profile.interaction_count += 1
            profile.last_updated = datetime.now()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self._save_user_profile(profile)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.user_profiles[(user_id, chat_id)] = profile
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def _analyze_communication_style(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        
        message_lower = message.lower()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        friendly_indicators = ['—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', 'üòä', 'üòÑ', '‚ù§Ô∏è', '–∫—Ä—É—Ç–æ', '–æ—Ç–ª–∏—á–Ω–æ']
        formal_indicators = ['—É–≤–∞–∂–∞–µ–º—ã–π', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–ø—Ä–æ—à—É', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–ø–æ–∑–≤–æ–ª—å—Ç–µ']
        casual_indicators = ['–ø—Ä–∏–≤–µ—Ç', '–æ–∫', '–Ω–æ—Ä–º', '–∫—É–ª', '—á–µ –∫–∞–∫', '–∑–¥–∞—Ä–æ–≤–∞']
        rude_indicators = ['—Ç—É–ø–æ–π', '–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '–Ω–∞—Ö', '–±–ª–∏–Ω', '—á–µ—Ä—Ç']
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        scores = {
            'friendly': sum(1 for ind in friendly_indicators if ind in message_lower),
            'formal': sum(1 for ind in formal_indicators if ind in message_lower),
            'casual': sum(1 for ind in casual_indicators if ind in message_lower),
            'rude': sum(1 for ind in rude_indicators if ind in message_lower)
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        max_style = max(scores.items(), key=lambda x: x[1])
        return max_style[0] if max_style[1] > 0 else 'neutral'
    
    def _analyze_technical_level(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        message_lower = message.lower()
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        basic_terms = ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–∞–π—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ–∞–π–ª']
        medium_terms = ['—Å–µ—Ä–≤–µ—Ä', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'api', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞']
        advanced_terms = ['–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è', 'kubernetes', 'devops']
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        basic_count = sum(1 for term in basic_terms if term in message_lower)
        medium_count = sum(1 for term in medium_terms if term in message_lower)
        advanced_count = sum(1 for term in advanced_terms if term in message_lower)
        
        if advanced_count > 0:
            return 'advanced'
        elif medium_count > 0:
            return 'medium'
        elif basic_count > 0:
            return 'basic'
        else:
            return 'medium'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def get_learning_stats(self, chat_id: Optional[int] = None) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        
        try:
            stats = {}
            
            # –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if chat_id:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                user_profiles_count = await self.db.fetch_one('''
                SELECT COUNT(*) FROM user_ai_profiles WHERE chat_id = ?
                ''', (chat_id,))
                
                patterns_count = await self.db.fetch_one('''
                SELECT COUNT(*) FROM ai_learning_patterns WHERE chat_id = ?
                ''', (chat_id,))
                
                interactions_count = await self.db.fetch_one('''
                SELECT COUNT(*) FROM ai_interaction_history WHERE chat_id = ?
                ''', (chat_id,))
                
                stats['chat_id'] = chat_id
                stats['user_profiles'] = user_profiles_count[0] if user_profiles_count else 0
                stats['learned_patterns'] = patterns_count[0] if patterns_count else 0
                stats['total_interactions'] = interactions_count[0] if interactions_count else 0
            else:
                # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats.update(self.learning_stats)
                
                total_profiles = await self.db.fetch_one('SELECT COUNT(*) FROM user_ai_profiles')
                total_patterns = await self.db.fetch_one('SELECT COUNT(*) FROM ai_learning_patterns')
                total_interactions = await self.db.fetch_one('SELECT COUNT(*) FROM ai_interaction_history')
                
                stats['total_user_profiles'] = total_profiles[0] if total_profiles else 0
                stats['total_patterns'] = total_patterns[0] if total_patterns else 0
                stats['total_interactions'] = total_interactions[0] if total_interactions else 0
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {}

# –≠–ö–°–ü–û–†–¢  
__all__ = ["AdaptiveAILearning", "UserProfile", "ConversationContext"]
