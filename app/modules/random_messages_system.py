# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/random_messages_system.py

#!/usr/bin/env python3
"""
üí¨ RANDOM MESSAGES SYSTEM v4.0
–°–∏—Å—Ç–µ–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã —Å —É–º–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import logging
import asyncio
import random
import json
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class MessageType(Enum):
    FACT = "fact"
    JOKE = "joke"
    MOTIVATION = "motivation"
    WEATHER = "weather"
    NEWS = "news"
    GREETING = "greeting"
    GOODNIGHT = "goodnight"
    CUSTOM = "custom"

@dataclass
class ScheduledMessage:
    message_id: str
    chat_id: int
    message_type: MessageType
    content: str
    schedule_type: str  # once, daily, weekly, monthly
    schedule_time: time
    schedule_days: List[int]  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (0-6, 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    is_active: bool = True
    created_at: datetime = None
    last_sent: Optional[datetime] = None
    send_count: int = 0
    creator_id: Optional[int] = None

@dataclass
class ChatMessageSettings:
    chat_id: int
    enabled: bool = False
    min_interval_hours: int = 6
    max_interval_hours: int = 24
    active_hours_start: int = 9  # 9:00
    active_hours_end: int = 22   # 22:00
    allowed_types: List[MessageType] = None
    custom_messages: List[str] = None
    last_random_message: Optional[datetime] = None

class RandomMessagesSystem:
    """üí¨ –°–∏—Å—Ç–µ–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, db_service, bot, config, entertainment_system=None):
        self.db = db_service
        self.bot = bot
        self.config = config
        self.entertainment = entertainment_system
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤
        self.chat_settings: Dict[int, ChatMessageSettings] = {}
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.scheduled_messages: Dict[str, ScheduledMessage] = {}
        
        # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.message_queue = asyncio.Queue()
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.content_templates = {
            MessageType.FACT: [
                "üß† **–ê –≤—ã –∑–Ω–∞–ª–∏?**\n{content}",
                "üí° **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**\n{content}",
                "üåü **–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç:**\n{content}"
            ],
            MessageType.JOKE: [
                "üòÑ **–®—É—Ç–∫–∞ –¥–Ω—è:**\n{content}",
                "ü§° **–í—Ä–µ–º—è —Å–º–µ—è—Ç—å—Å—è:**\n{content}",
                "üòÇ **–ê–Ω–µ–∫–¥–æ—Ç:**\n{content}"
            ],
            MessageType.MOTIVATION: [
                "üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:**\n{content}",
                "üåü **–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è –º—ã—Å–ª—å:**\n{content}",
                "üöÄ **–ó–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤–∞:**\n{content}"
            ],
            MessageType.GREETING: [
                "üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {chat_name}!**\n{content}",
                "‚òÄÔ∏è **–û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!**\n{content}",
                "üå§Ô∏è **–•–æ—Ä–æ—à–µ–≥–æ —É—Ç—Ä–∞!**\n{content}"
            ],
            MessageType.GOODNIGHT: [
                "üåô **–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, {chat_name}!**\n{content}",
                "üí´ **–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!**\n{content}",
                "üåü **–î–æ–±—Ä–æ–π –Ω–æ—á–∏!**\n{content}"
            ]
        }
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        self.motivational_quotes = [
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - —ç—Ç–æ –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å.",
            "–ù–µ –±–æ–π—Å—è –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–≥–æ.",
            "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
            "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.",
            "–ù–µ –∂–¥–∏—Ç–µ. –í—Ä–µ–º—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º.",
            "–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞.",
            "–í–∞—à–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - —ç—Ç–æ –≤–∞—à —Ä–∞–∑—É–º.",
            "–ú–µ—á—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏.",
            "–ë—É–¥—å—Ç–µ —Å–æ–±–æ–π. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.",
            "–ñ–∏–∑–Ω—å –Ω–∞ 10% —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —Å –≤–∞–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∏ –Ω–∞ 90% –∏–∑ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ."
        ]
        
        logger.info("üí¨ Random Messages System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_tables()
        await self._load_chat_settings()
        await self._load_scheduled_messages()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(self._message_sender_loop())
        asyncio.create_task(self._random_message_scheduler())
        asyncio.create_task(self._scheduled_message_checker())
    
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS chat_message_settings (
            chat_id INTEGER PRIMARY KEY,
            enabled BOOLEAN DEFAULT 0,
            min_interval_hours INTEGER DEFAULT 6,
            max_interval_hours INTEGER DEFAULT 24,
            active_hours_start INTEGER DEFAULT 9,
            active_hours_end INTEGER DEFAULT 22,
            allowed_types TEXT,  -- JSON array
            custom_messages TEXT,  -- JSON array
            last_random_message TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS scheduled_messages (
            message_id TEXT PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            message_type TEXT NOT NULL,
            content TEXT NOT NULL,
            schedule_type TEXT NOT NULL,
            schedule_time TEXT NOT NULL,  -- HH:MM format
            schedule_days TEXT,  -- JSON array of weekdays
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_sent TIMESTAMP,
            send_count INTEGER DEFAULT 0,
            creator_id INTEGER,
            
            INDEX(chat_id),
            INDEX(is_active),
            INDEX(schedule_type)
        )
        ''')
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS sent_messages_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            message_type TEXT NOT NULL,
            content_preview TEXT,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_scheduled BOOLEAN DEFAULT 0,
            message_id INTEGER,  -- ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            
            INDEX(chat_id, sent_at),
            INDEX(message_type)
        )
        ''')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS user_message_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            content_type TEXT NOT NULL,
            content TEXT NOT NULL,
            is_approved BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            approved_by INTEGER,
            approved_at TIMESTAMP,
            
            INDEX(chat_id, content_type),
            INDEX(is_approved)
        )
        ''')
    
    async def enable_random_messages(self, chat_id: int, user_id: int, 
                                   **settings) -> Tuple[bool, str]:
        """üîÑ –í–∫–ª—é—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
            if user_id not in self.config.bot.admin_ids:
                return False, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            chat_settings = ChatMessageSettings(
                chat_id=chat_id,
                enabled=True,
                min_interval_hours=settings.get('min_interval', 6),
                max_interval_hours=settings.get('max_interval', 24),
                active_hours_start=settings.get('start_hour', 9),
                active_hours_end=settings.get('end_hour', 22),
                allowed_types=[MessageType.FACT, MessageType.JOKE, MessageType.MOTIVATION],
                custom_messages=[]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.execute('''
            INSERT OR REPLACE INTO chat_message_settings 
            (chat_id, enabled, min_interval_hours, max_interval_hours, 
             active_hours_start, active_hours_end, allowed_types)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                chat_id, True, chat_settings.min_interval_hours, chat_settings.max_interval_hours,
                chat_settings.active_hours_start, chat_settings.active_hours_end,
                json.dumps([t.value for t in chat_settings.allowed_types])
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.chat_settings[chat_id] = chat_settings
            
            success_msg = f"‚úÖ **–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!**\n\n"
            success_msg += f"‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {chat_settings.min_interval_hours}-{chat_settings.max_interval_hours} —á–∞—Å–æ–≤\n"
            success_msg += f"üïê **–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è:** {chat_settings.active_hours_start:02d}:00 - {chat_settings.active_hours_end:02d}:00\n"
            success_msg += f"üìù **–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:** —Ñ–∞–∫—Ç—ã, —à—É—Ç–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è"
            
            return True, success_msg
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def schedule_message(self, chat_id: int, user_id: int, message_type: MessageType,
                             content: str, schedule_time: str, schedule_type: str = "daily",
                             schedule_days: List[int] = None) -> Tuple[bool, str]:
        """üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if user_id not in self.config.bot.admin_ids:
                return False, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            try:
                time_obj = time.fromisoformat(schedule_time)
            except ValueError:
                return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if schedule_type not in ['once', 'daily', 'weekly', 'monthly']:
                return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: once, daily, weekly, monthly"
            
            # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—Å–µ –¥–Ω–∏ –¥–ª—è daily)
            if not schedule_days:
                if schedule_type == 'weekly':
                    schedule_days = [0]  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                else:
                    schedule_days = list(range(7))  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            
            # –°–æ–∑–¥–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = f"sched_{chat_id}_{user_id}_{int(datetime.now().timestamp())}"
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            scheduled_msg = ScheduledMessage(
                message_id=message_id,
                chat_id=chat_id,
                message_type=message_type,
                content=content,
                schedule_type=schedule_type,
                schedule_time=time_obj,
                schedule_days=schedule_days,
                created_at=datetime.now(),
                creator_id=user_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.execute('''
            INSERT INTO scheduled_messages 
            (message_id, chat_id, message_type, content, schedule_type, 
             schedule_time, schedule_days, creator_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                message_id, chat_id, message_type.value, content, schedule_type,
                schedule_time, json.dumps(schedule_days), user_id
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            self.scheduled_messages[message_id] = scheduled_msg
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            days_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            days_str = ", ".join([days_names[day] for day in schedule_days])
            
            success_msg = f"üìÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!**\n\n"
            success_msg += f"üïê **–í—Ä–µ–º—è:** {schedule_time}\n"
            success_msg += f"üìÜ **–¢–∏–ø:** {schedule_type}\n"
            success_msg += f"üìã **–î–Ω–∏:** {days_str}\n"
            success_msg += f"üí¨ **–ö–æ–Ω—Ç–µ–Ω—Ç:** {content[:50]}{'...' if len(content) > 50 else ''}"
            
            return True, success_msg
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def send_random_message(self, chat_id: int) -> bool:
        """üé≤ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
            if chat_id not in self.chat_settings or not self.chat_settings[chat_id].enabled:
                return False
            
            settings = self.chat_settings[chat_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
            current_hour = datetime.now().hour
            if not (settings.active_hours_start <= current_hour <= settings.active_hours_end):
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type = random.choice(settings.allowed_types)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content = await self._generate_content(message_type, chat_id)
            
            if not content:
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
            templates = self.content_templates.get(message_type, ["{content}"])
            template = random.choice(templates)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_name = "–¥—Ä—É–∑—å—è"  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
            formatted_message = template.format(content=content, chat_name=chat_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await self.bot.send_message(chat_id, formatted_message, parse_mode="Markdown")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            settings.last_random_message = datetime.now()
            await self._update_chat_settings(settings)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            await self._log_sent_message(chat_id, message_type, content, sent_message.message_id)
            
            logger.info(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_type.value}) –≤ —á–∞—Ç {chat_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _generate_content(self, message_type: MessageType, chat_id: int) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            if message_type == MessageType.FACT:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç —á–µ—Ä–µ–∑ entertainment —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
                if self.entertainment:
                    fact = await self.entertainment.get_random_fact(chat_id, 0)  # 0 = system user
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    if fact.startswith("üß† **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç**"):
                        lines = fact.split('\n')
                        for line in lines:
                            if line.startswith("üí° "):
                                return line[3:]  # –£–±–∏—Ä–∞–µ–º "üí° "
                
                return self._get_builtin_fact()
            
            elif message_type == MessageType.JOKE:
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —à—É—Ç–æ–∫
                if self.entertainment:
                    joke = await self.entertainment.get_random_joke(chat_id, 0)
                    if joke.startswith("üòÑ **–®—É—Ç–∫–∞ –¥–Ω—è**"):
                        return joke.replace("üòÑ **–®—É—Ç–∫–∞ –¥–Ω—è**\n\n", "")
                
                return self._get_builtin_joke()
            
            elif message_type == MessageType.MOTIVATION:
                return random.choice(self.motivational_quotes)
            
            elif message_type == MessageType.GREETING:
                return random.choice([
                    "–ñ–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! ‚òÄÔ∏è",
                    "–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏! üåü",
                    "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å —Å –ø–æ–∑–∏—Ç–∏–≤–∞! üöÄ"
                ])
            
            elif message_type == MessageType.GOODNIGHT:
                return random.choice([
                    "–ü—É—Å—Ç—å –≤–∞–º –ø—Ä–∏—Å–Ω—è—Ç—Å—è —Å–ª–∞–¥–∫–∏–µ —Å–Ω—ã! üí§",
                    "–û—Ç–¥—ã—Ö–∞–π—Ç–µ —Ö–æ—Ä–æ—à–æ! üåô",
                    "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞! ‚≠ê"
                ])
            
            elif message_type == MessageType.CUSTOM:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                settings = self.chat_settings.get(chat_id)
                if settings and settings.custom_messages:
                    return random.choice(settings.custom_messages)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    def _get_builtin_fact(self) -> str:
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã"""
        facts = [
            "–ú–µ–¥—É–∑—ã –Ω–∞ 95% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–¥—ã.",
            "–ë–∞–Ω–∞–Ω—ã - —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç.",
            "–ú–æ—Ä—Å–∫–∏–µ –≤—ã–¥—Ä—ã –¥–µ—Ä–∂–∞—Ç—Å—è –∑–∞ –ª–∞–ø—ã –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞.",
            "–°–µ—Ä–¥—Ü–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –µ—ë –≥–æ–ª–æ–≤–µ.",
            "–ö–æ—à–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç 70% —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –≤–æ —Å–Ω–µ."
        ]
        return random.choice(facts)
    
    def _get_builtin_joke(self) -> str:
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—É—Ç–∫–∏"""
        jokes = [
            "‚Äî –î–æ–∫—Ç–æ—Ä, —è –∑–∞–±—ã–≤–∞—é –≤—Å—ë —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!\n‚Äî –≠—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ. –ê —Å –∫–∞–∫–∏—Ö –ø–æ—Ä —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?\n‚Äî –ß—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–¥—ë—Ç –≤ –¥—É—à. –ñ–µ–Ω–∞ –∫—Ä–∏—á–∏—Ç:\n‚Äî –ù–µ –∑–∞–±—É–¥—å –ø–æ–º—ã—Ç—å –≥–æ–ª–æ–≤—É!\n‚Äî –ü–æ–Ω—è–ª, –æ—á–∏—â—É –∫—ç—à!",
            "‚Äî –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n‚Äî –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞."
        ]
        return random.choice(jokes)

# –≠–ö–°–ü–û–†–¢
__all__ = ["RandomMessagesSystem", "MessageType", "ScheduledMessage", "ChatMessageSettings"]
