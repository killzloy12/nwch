# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/advanced_analytics.py

#!/usr/bin/env python3
"""
üìä ADVANCED ANALYTICS SYSTEM v4.0
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤
"""

import logging
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from collections import defaultdict, Counter
import calendar

logger = logging.getLogger(__name__)

@dataclass
class UserAnalytics:
    user_id: int
    chat_id: int
    username: Optional[str]
    first_name: Optional[str]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    total_messages: int = 0
    text_messages: int = 0
    media_messages: int = 0
    command_usage: int = 0
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    first_seen: Optional[datetime] = None
    last_seen: Optional[datetime] = None
    most_active_hour: Optional[int] = None
    most_active_day: Optional[str] = None
    
    # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_message_length: float = 0.0
    emoji_usage: int = 0
    question_marks: int = 0
    exclamation_marks: int = 0
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    replies_sent: int = 0
    replies_received: int = 0
    mentions_sent: int = 0
    mentions_received: int = 0
    
    # AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    ai_requests: int = 0
    ai_rating_avg: float = 0.0

@dataclass
class ChatAnalytics:
    chat_id: int
    chat_title: Optional[str]
    chat_type: str
    
    # –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    total_messages: int = 0
    total_users: int = 0
    active_users_today: int = 0
    peak_hour: Optional[int] = None
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    top_commands: List[Tuple[str, int]] = None
    top_words: List[Tuple[str, int]] = None
    emoji_stats: Dict[str, int] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    hourly_activity: List[int] = None
    daily_activity: List[int] = None
    weekly_activity: List[int] = None
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    moderation_actions: int = 0
    warnings_issued: int = 0
    
    # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    games_played: int = 0
    facts_requested: int = 0
    jokes_requested: int = 0

class AdvancedAnalyticsSystem:
    """üìä –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self, db_service, config):
        self.db = db_service
        self.config = config
        
        # –ö—ç—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.analytics_cache = {}
        self.cache_expiry = {}
        
        # –°—á–µ—Ç—á–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.real_time_stats = defaultdict(lambda: defaultdict(int))
        
        # –°–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ —Ç.–¥.)
        self.stop_words = {
            '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–∫', '–∑–∞', '–∏–∑', '—É', '–æ', '–æ–±',
            '—è', '—Ç—ã', '–æ–Ω', '–æ–Ω–∞', '–º—ã', '–≤—ã', '–æ–Ω–∏', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞',
            'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of'
        }
        
        logger.info("üìä Advanced Analytics System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_tables()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(self._periodic_analytics_update())
        asyncio.create_task(self._cleanup_old_analytics())
    
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS user_analytics (
            user_id INTEGER NOT NULL,
            chat_id INTEGER NOT NULL,
            date DATE NOT NULL,
            
            -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            username TEXT,
            first_name TEXT,
            
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages INTEGER DEFAULT 0,
            text_messages INTEGER DEFAULT 0,
            media_messages INTEGER DEFAULT 0,
            command_usage INTEGER DEFAULT 0,
            
            -- –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            first_seen TIMESTAMP,
            last_seen TIMESTAMP,
            hourly_activity TEXT,  -- JSON –º–∞—Å—Å–∏–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ —á–∞—Å–∞–º
            
            -- –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            avg_message_length REAL DEFAULT 0.0,
            emoji_usage INTEGER DEFAULT 0,
            question_marks INTEGER DEFAULT 0,
            exclamation_marks INTEGER DEFAULT 0,
            
            -- –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            replies_sent INTEGER DEFAULT 0,
            replies_received INTEGER DEFAULT 0,
            mentions_sent INTEGER DEFAULT 0,
            mentions_received INTEGER DEFAULT 0,
            
            -- AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            ai_requests INTEGER DEFAULT 0,
            ai_rating_sum REAL DEFAULT 0.0,
            ai_rating_count INTEGER DEFAULT 0,
            
            PRIMARY KEY(user_id, chat_id, date),
            INDEX(chat_id, date),
            INDEX(user_id, date),
            INDEX(last_seen)
        )
        ''')
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS chat_analytics (
            chat_id INTEGER NOT NULL,
            date DATE NOT NULL,
            
            -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            chat_title TEXT,
            chat_type TEXT,
            
            -- –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            total_messages INTEGER DEFAULT 0,
            unique_users INTEGER DEFAULT 0,
            active_users INTEGER DEFAULT 0,
            
            -- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (JSON)
            hourly_activity TEXT,
            daily_stats TEXT,
            
            -- –ö–æ–Ω—Ç–µ–Ω—Ç
            top_commands TEXT,  -- JSON
            word_frequency TEXT,  -- JSON
            emoji_stats TEXT,  -- JSON
            
            -- –ú–æ–¥–µ—Ä–∞—Ü–∏—è
            moderation_actions INTEGER DEFAULT 0,
            warnings_issued INTEGER DEFAULT 0,
            
            -- –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            games_played INTEGER DEFAULT 0,
            entertainment_requests INTEGER DEFAULT 0,
            
            PRIMARY KEY(chat_id, date),
            INDEX(date),
            INDEX(total_messages)
        )
        ''')
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS message_analytics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            message_date DATE NOT NULL,
            message_hour INTEGER NOT NULL,
            
            -- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_length INTEGER,
            word_count INTEGER,
            emoji_count INTEGER,
            has_media BOOLEAN DEFAULT 0,
            is_command BOOLEAN DEFAULT 0,
            is_reply BOOLEAN DEFAULT 0,
            
            -- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            contains_question BOOLEAN DEFAULT 0,
            contains_exclamation BOOLEAN DEFAULT 0,
            language_detected TEXT,
            
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            INDEX(chat_id, message_date),
            INDEX(user_id, message_date),
            INDEX(message_hour),
            INDEX(created_at)
        )
        ''')
        
        # –¢—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS analytics_trends (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            trend_type TEXT NOT NULL,  -- daily_growth, user_retention, etc.
            trend_data TEXT NOT NULL,  -- JSON
            period_start DATE NOT NULL,
            period_end DATE NOT NULL,
            calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            INDEX(chat_id, trend_type),
            INDEX(period_start, period_end)
        )
        ''')
    
    async def track_message(self, chat_id: int, user_id: int, message_text: str,
                          username: Optional[str] = None, first_name: Optional[str] = None,
                          has_media: bool = False, is_command: bool = False,
                          is_reply: bool = False) -> bool:
        """üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        
        try:
            now = datetime.now()
            today = now.date()
            hour = now.hour
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_length = len(message_text)
            word_count = len(message_text.split())
            emoji_count = self._count_emojis(message_text)
            contains_question = '?' in message_text
            contains_exclamation = '!' in message_text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.db.execute('''
            INSERT INTO message_analytics 
            (chat_id, user_id, message_date, message_hour, message_length, word_count,
             emoji_count, has_media, is_command, is_reply, contains_question, contains_exclamation)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                chat_id, user_id, today, hour, message_length, word_count,
                emoji_count, has_media, is_command, is_reply, contains_question, contains_exclamation
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._update_user_analytics(
                user_id, chat_id, today, username, first_name,
                message_text, has_media, is_command, is_reply, emoji_count
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–∞—Ç–∞
            await self._update_chat_analytics(
                chat_id, today, hour, message_text, is_command, has_media
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def get_user_analytics(self, chat_id: int, user_id: int, 
                               days: int = 30) -> Optional[UserAnalytics]:
        """üë§ –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            start_date = datetime.now().date() - timedelta(days=days)
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
            stats = await self.db.fetch_one('''
            SELECT 
                SUM(total_messages) as total_msg,
                SUM(text_messages) as text_msg,
                SUM(media_messages) as media_msg,
                SUM(command_usage) as cmd_usage,
                MIN(first_seen) as first_seen,
                MAX(last_seen) as last_seen,
                AVG(avg_message_length) as avg_len,
                SUM(emoji_usage) as emoji_total,
                SUM(question_marks) as questions,
                SUM(exclamation_marks) as exclamations,
                SUM(replies_sent) as replies_s,
                SUM(replies_received) as replies_r,
                SUM(mentions_sent) as mentions_s,
                SUM(mentions_received) as mentions_r,
                SUM(ai_requests) as ai_req,
                AVG(CASE WHEN ai_rating_count > 0 THEN ai_rating_sum/ai_rating_count ELSE 0 END) as ai_avg
            FROM user_analytics 
            WHERE user_id = ? AND chat_id = ? AND date >= ?
            ''', (user_id, chat_id, start_date))
            
            if not stats or not stats[0]:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
            user_info = await self.db.fetch_one('''
            SELECT username, first_name FROM user_analytics 
            WHERE user_id = ? AND chat_id = ? 
            ORDER BY date DESC LIMIT 1
            ''', (user_id, chat_id))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
            most_active_hour = await self._get_most_active_hour(user_id, chat_id, start_date)
            most_active_day = await self._get_most_active_day(user_id, chat_id, start_date)
            
            return UserAnalytics(
                user_id=user_id,
                chat_id=chat_id,
                username=user_info[0] if user_info else None,
                first_name=user_info[1] if user_info else None,
                total_messages=stats[0] or 0,
                text_messages=stats[1] or 0,
                media_messages=stats[2] or 0,
                command_usage=stats[3] or 0,
                first_seen=datetime.fromisoformat(stats[4]) if stats[4] else None,
                last_seen=datetime.fromisoformat(stats[5]) if stats[5] else None,
                avg_message_length=stats[6] or 0.0,
                emoji_usage=stats[7] or 0,
                question_marks=stats[8] or 0,
                exclamation_marks=stats[9] or 0,
                replies_sent=stats[10] or 0,
                replies_received=stats[11] or 0,
                mentions_sent=stats[12] or 0,
                mentions_received=stats[13] or 0,
                ai_requests=stats[14] or 0,
                ai_rating_avg=stats[15] or 0.0,
                most_active_hour=most_active_hour,
                most_active_day=most_active_day
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def get_chat_analytics(self, chat_id: int, days: int = 30) -> Optional[ChatAnalytics]:
        """üí¨ –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–∞—Ç–∞"""
        
        try:
            start_date = datetime.now().date() - timedelta(days=days)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            main_stats = await self.db.fetch_one('''
            SELECT 
                SUM(total_messages) as total_msg,
                AVG(unique_users) as avg_users,
                MAX(active_users) as peak_users,
                SUM(moderation_actions) as mod_actions,
                SUM(warnings_issued) as warnings,
                SUM(games_played) as games,
                SUM(entertainment_requests) as entertainment
            FROM chat_analytics 
            WHERE chat_id = ? AND date >= ?
            ''', (chat_id, start_date))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
            chat_info = await self.db.fetch_one('''
            SELECT chat_title, chat_type FROM chat_analytics 
            WHERE chat_id = ? ORDER BY date DESC LIMIT 1
            ''', (chat_id,))
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            today_stats = await self.db.fetch_one('''
            SELECT active_users FROM chat_analytics 
            WHERE chat_id = ? AND date = ?
            ''', (chat_id, today))
            
            # –ü–∏–∫–æ–≤—ã–π —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            peak_hour = await self._get_chat_peak_hour(chat_id, start_date)
            
            # –¢–æ–ø –∫–æ–º–∞–Ω–¥—ã
            top_commands = await self._get_top_commands(chat_id, start_date)
            
            # –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            hourly_activity = await self._get_hourly_activity(chat_id, start_date)
            
            return ChatAnalytics(
                chat_id=chat_id,
                chat_title=chat_info[0] if chat_info else None,
                chat_type=chat_info[1] if chat_info else "unknown",
                total_messages=main_stats[0] or 0,
                total_users=int(main_stats[1] or 0),
                active_users_today=today_stats[0] if today_stats else 0,
                peak_hour=peak_hour,
                moderation_actions=main_stats[2] or 0,
                warnings_issued=main_stats[3] or 0,
                games_played=main_stats[4] or 0,
                facts_requested=main_stats[5] or 0,
                top_commands=top_commands,
                hourly_activity=hourly_activity
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞: {e}")
            return None
    
    async def generate_analytics_report(self, chat_id: int, period: str = "week") -> str:
        """üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            if period == "day":
                days = 1
                period_name = "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
            elif period == "week":
                days = 7
                period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
            elif period == "month":
                days = 30
                period_name = "–∑–∞ –º–µ—Å—è—Ü"
            else:
                days = 7
                period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–∞—Ç–∞
            chat_analytics = await self.get_chat_analytics(chat_id, days)
            
            if not chat_analytics:
                return f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {period_name}**\n\n‚ùå –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {period_name}**\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            report += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {chat_analytics.total_messages:,}\n"
            report += f"üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {chat_analytics.total_users}\n"
            
            if chat_analytics.peak_hour is not None:
                report += f"‚è∞ **–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {chat_analytics.peak_hour:02d}:00\n"
            
            report += "\n"
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
            if chat_analytics.moderation_actions > 0:
                report += f"üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
                report += f"‚îî –î–µ–π—Å—Ç–≤–∏–π: {chat_analytics.moderation_actions}\n"
                report += f"‚îî –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {chat_analytics.warnings_issued}\n\n"
            
            # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            if chat_analytics.games_played > 0 or chat_analytics.facts_requested > 0:
                report += f"üé≤ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**\n"
                if chat_analytics.games_played > 0:
                    report += f"‚îî –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {chat_analytics.games_played}\n"
                if chat_analytics.facts_requested > 0:
                    report += f"‚îî –§–∞–∫—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {chat_analytics.facts_requested}\n"
                report += "\n"
            
            # –¢–æ–ø –∫–æ–º–∞–Ω–¥—ã
            if chat_analytics.top_commands:
                report += f"üèÜ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                for i, (cmd, count) in enumerate(chat_analytics.top_commands[:5], 1):
                    report += f"{i}. `{cmd}` ‚Äî {count} —Ä–∞–∑\n"
                report += "\n"
            
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
            if chat_analytics.hourly_activity:
                report += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:**\n"
                
                # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
                max_activity = max(chat_analytics.hourly_activity) if chat_analytics.hourly_activity else 1
                
                for hour in range(0, 24, 4):  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
                    if hour < len(chat_analytics.hourly_activity):
                        activity = chat_analytics.hourly_activity[hour]
                        bar_length = int((activity / max_activity) * 10) if max_activity > 0 else 0
                        bar = "‚ñà" * bar_length + "‚ñë" * (10 - bar_length)
                        report += f"{hour:02d}:00 {bar} {activity}\n"
                
                report += "\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            top_users = await self._get_top_users(chat_id, days)
            if top_users:
                report += f"üëë **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:**\n"
                for i, (user_id, msg_count, name) in enumerate(top_users[:5], 1):
                    user_name = name or f"ID {user_id}"
                    report += f"{i}. {user_name} ‚Äî {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"

# –≠–ö–°–ü–û–†–¢
__all__ = ["AdvancedAnalyticsSystem", "UserAnalytics", "ChatAnalytics"]
