# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/ultimate_triggers.py

#!/usr/bin/env python3
"""
‚ö° ULTIMATE TRIGGERS SYSTEM v4.0
6 —Ç–∏–ø–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import logging
import re
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class TriggerType(Enum):
    EXACT = "exact"           # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    CONTAINS = "contains"     # –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    STARTS_WITH = "starts"    # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å
    ENDS_WITH = "ends"        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞
    REGEX = "regex"           # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    SMART = "smart"           # –£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —Å AI

@dataclass
class TriggerCondition:
    type: TriggerType
    pattern: str
    case_sensitive: bool = False
    whole_words: bool = False

@dataclass 
class TriggerResponse:
    text: str
    reactions: List[str] = None
    delete_trigger: bool = False
    forward_to: Optional[int] = None

@dataclass
class TriggerConfig:
    id: str
    name: str
    chat_id: int
    creator_id: int
    conditions: List[TriggerCondition]
    responses: List[TriggerResponse]
    is_active: bool = True
    cooldown_seconds: int = 0
    max_uses_per_day: int = 0
    probability: float = 1.0  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è 0.0-1.0
    require_mention: bool = False
    admin_only: bool = False
    created_at: datetime = None
    usage_count: int = 0
    last_used: Optional[datetime] = None

class UltimateTriggersSystem:
    """‚ö° Ultimate —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ v4.0"""
    
    def __init__(self, db_service, config, ai_service=None):
        self.db = db_service
        self.config = config
        self.ai = ai_service
        
        # –ö—ç—à —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.triggers_cache: Dict[int, List[TriggerConfig]] = {}
        self.last_cache_update = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats = {}
        
        logger.info("‚ö° Ultimate Triggers System v4.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_tables()
        await self._load_triggers_cache()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(self._cleanup_expired_cooldowns())
        
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS ultimate_triggers (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            chat_id INTEGER NOT NULL,
            creator_id INTEGER NOT NULL,
            conditions TEXT NOT NULL,  -- JSON
            responses TEXT NOT NULL,   -- JSON
            is_active BOOLEAN DEFAULT 1,
            cooldown_seconds INTEGER DEFAULT 0,
            max_uses_per_day INTEGER DEFAULT 0,
            probability REAL DEFAULT 1.0,
            require_mention BOOLEAN DEFAULT 0,
            admin_only BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            usage_count INTEGER DEFAULT 0,
            last_used TIMESTAMP,
            
            INDEX(chat_id),
            INDEX(creator_id),
            INDEX(is_active),
            INDEX(name)
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS trigger_usage_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            trigger_id TEXT NOT NULL,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            triggered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            response_sent TEXT,
            
            INDEX(trigger_id),
            INDEX(chat_id),
            INDEX(triggered_at)
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS trigger_cooldowns (
            trigger_id TEXT NOT NULL,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            expires_at TIMESTAMP NOT NULL,
            
            PRIMARY KEY(trigger_id, chat_id, user_id),
            INDEX(expires_at)
        )
        ''')
    
    async def create_trigger(self, name: str, chat_id: int, creator_id: int,
                           pattern: str, response: str, trigger_type: TriggerType = TriggerType.CONTAINS,
                           **options) -> tuple[bool, str]:
        """‚ö° –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if len(name) > 50:
                return False, "‚ùå –ò–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)"
            
            if len(pattern) > 500:
                return False, "‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)"
            
            if len(response) > 1000:
                return False, "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º regex –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if trigger_type == TriggerType.REGEX:
                try:
                    re.compile(pattern)
                except re.error as e:
                    return False, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            trigger_id = f"trig_{chat_id}_{creator_id}_{abs(hash(name)) % 1000000}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞
            condition = TriggerCondition(
                type=trigger_type,
                pattern=pattern,
                case_sensitive=options.get('case_sensitive', False),
                whole_words=options.get('whole_words', False)
            )
            
            response_obj = TriggerResponse(
                text=response,
                reactions=options.get('reactions', []),
                delete_trigger=options.get('delete_trigger', False),
                forward_to=options.get('forward_to')
            )
            
            trigger_config = TriggerConfig(
                id=trigger_id,
                name=name,
                chat_id=chat_id,
                creator_id=creator_id,
                conditions=[condition],
                responses=[response_obj],
                cooldown_seconds=options.get('cooldown', 0),
                max_uses_per_day=options.get('max_uses', 0),
                probability=options.get('probability', 1.0),
                require_mention=options.get('require_mention', False),
                admin_only=options.get('admin_only', False),
                created_at=datetime.now()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.execute('''
            INSERT INTO ultimate_triggers 
            (id, name, chat_id, creator_id, conditions, responses, cooldown_seconds,
             max_uses_per_day, probability, require_mention, admin_only)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                trigger_id, name, chat_id, creator_id,
                json.dumps([condition.__dict__], ensure_ascii=False),
                json.dumps([response_obj.__dict__], ensure_ascii=False),
                trigger_config.cooldown_seconds,
                trigger_config.max_uses_per_day,
                trigger_config.probability,
                trigger_config.require_mention,
                trigger_config.admin_only
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await self._update_chat_cache(chat_id)
            
            success_msg = f"‚ö° –¢—Ä–∏–≥–≥–µ—Ä **{name}** —Å–æ–∑–¥–∞–Ω!\n\n"
            success_msg += f"üéØ –¢–∏–ø: {trigger_type.value}\n"
            success_msg += f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω: `{pattern}`\n"
            success_msg += f"üí¨ –û—Ç–≤–µ—Ç: {response[:50]}{'...' if len(response) > 50 else ''}\n"
            
            if trigger_config.cooldown_seconds > 0:
                success_msg += f"‚è∞ –ö—É–ª–¥–∞—É–Ω: {trigger_config.cooldown_seconds}—Å\n"
            
            if trigger_config.probability < 1.0:
                success_msg += f"üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {int(trigger_config.probability * 100)}%\n"
            
            return True, success_msg
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"
    
    async def process_message(self, chat_id: int, user_id: int, text: str, 
                            is_mention: bool = False, is_admin: bool = False) -> List[TriggerResponse]:
        """üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
        
        try:
            triggered_responses = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —á–∞—Ç–∞
            triggers = await self._get_chat_triggers(chat_id)
            
            for trigger in triggers:
                if not trigger.is_active:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if trigger.admin_only and not is_admin:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if trigger.require_mention and not is_mention:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                if await self._is_on_cooldown(trigger.id, chat_id, user_id):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
                if trigger.max_uses_per_day > 0:
                    today_usage = await self._get_today_usage(trigger.id, chat_id)
                    if today_usage >= trigger.max_uses_per_day:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                if trigger.probability < 1.0:
                    import random
                    if random.random() > trigger.probability:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
                for condition in trigger.conditions:
                    if await self._check_condition(condition, text):
                        # –¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
                        if trigger.cooldown_seconds > 0:
                            await self._set_cooldown(trigger.id, chat_id, user_id, trigger.cooldown_seconds)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        await self._update_trigger_stats(trigger.id, chat_id, user_id)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
                        for response in trigger.responses:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
                            processed_response = await self._process_response_variables(
                                response, chat_id, user_id, text
                            )
                            triggered_responses.append(processed_response)
                        
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —É—Å–ª–æ–≤–∏–π
            
            return triggered_responses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return []
    
    async def _check_condition(self, condition: TriggerCondition, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        
        try:
            pattern = condition.pattern
            check_text = text if condition.case_sensitive else text.lower()
            check_pattern = pattern if condition.case_sensitive else pattern.lower()
            
            if condition.type == TriggerType.EXACT:
                return check_text == check_pattern
            
            elif condition.type == TriggerType.CONTAINS:
                if condition.whole_words:
                    # –ò—â–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                    import re
                    pattern_escaped = re.escape(check_pattern)
                    regex = r'\b' + pattern_escaped + r'\b'
                    return bool(re.search(regex, check_text, re.IGNORECASE if not condition.case_sensitive else 0))
                else:
                    return check_pattern in check_text
            
            elif condition.type == TriggerType.STARTS_WITH:
                return check_text.startswith(check_pattern)
            
            elif condition.type == TriggerType.ENDS_WITH:
                return check_text.endswith(check_pattern)
            
            elif condition.type == TriggerType.REGEX:
                flags = 0 if condition.case_sensitive else re.IGNORECASE
                return bool(re.search(pattern, text, flags))
            
            elif condition.type == TriggerType.SMART:
                # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ AI
                if self.ai:
                    prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞.

–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {pattern}
–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ '–î–ê' –∏–ª–∏ '–ù–ï–¢'."""
                    
                    ai_response = await self.ai.generate_response(prompt)
                    return ai_response and '–¥–∞' in ai_response.lower()
                else:
                    # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    keywords = pattern.lower().split()
                    return any(keyword in text.lower() for keyword in keywords)
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {e}")
            return False
    
    async def _process_response_variables(self, response: TriggerResponse, 
                                        chat_id: int, user_id: int, trigger_text: str) -> TriggerResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        
        try:
            processed_text = response.text
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            variables = {
                '{user_id}': str(user_id),
                '{chat_id}': str(chat_id),
                '{trigger_text}': trigger_text,
                '{time}': datetime.now().strftime('%H:%M'),
                '{date}': datetime.now().strftime('%d.%m.%Y'),
                '{random}': str(random.randint(1, 100))
            }
            
            for var, value in variables.items():
                processed_text = processed_text.replace(var, value)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
            return TriggerResponse(
                text=processed_text,
                reactions=response.reactions,
                delete_trigger=response.delete_trigger,
                forward_to=response.forward_to
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return response

# –≠–ö–°–ü–û–†–¢
__all__ = ["UltimateTriggersSystem", "TriggerType", "TriggerConfig"]
