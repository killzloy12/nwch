# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/advanced_moderation.py

#!/usr/bin/env python3
"""
üõ°Ô∏è ULTIMATE MODERATION SYSTEM v4.0
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: –±–∞–Ω—ã, –º—É—Ç—ã, –∫–∏–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class ModerationAction(Enum):
    WARN = "warn"
    MUTE = "mute" 
    KICK = "kick"
    BAN = "ban"
    UNBAN = "unban"
    UNMUTE = "unmute"

@dataclass
class ModerationCase:
    id: str
    chat_id: int
    user_id: int
    moderator_id: int
    action: ModerationAction
    reason: str
    duration: Optional[timedelta]
    created_at: datetime
    expires_at: Optional[datetime]
    is_active: bool = True

class UltimateModerationSystem:
    """üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ Ultimate Edition"""
    
    def __init__(self, db_service, bot, config):
        self.db = db_service
        self.bot = bot
        self.config = config
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º
        self.auto_actions = {
            3: ModerationAction.MUTE,    # 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –º—É—Ç –Ω–∞ —á–∞—Å
            5: ModerationAction.KICK,    # 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π = –∫–∏–∫
            7: ModerationAction.BAN      # 7 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π = –±–∞–Ω
        }
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_durations = {
            ModerationAction.MUTE: timedelta(hours=1),
            ModerationAction.BAN: timedelta(days=1)
        }
        
        logger.info("üõ°Ô∏è Ultimate Moderation System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
        await self._create_tables()
        await self._load_active_restrictions()
    
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS moderation_cases (
            id TEXT PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            moderator_id INTEGER NOT NULL,
            action TEXT NOT NULL,
            reason TEXT NOT NULL,
            duration_minutes INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expires_at TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            
            INDEX(chat_id),
            INDEX(user_id),
            INDEX(action),
            INDEX(expires_at),
            INDEX(is_active)
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS user_warnings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            moderator_id INTEGER NOT NULL,
            reason TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            
            INDEX(chat_id, user_id),
            INDEX(is_active)
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS chat_moderation_settings (
            chat_id INTEGER PRIMARY KEY,
            auto_moderation BOOLEAN DEFAULT 1,
            max_warnings INTEGER DEFAULT 3,
            mute_duration_minutes INTEGER DEFAULT 60,
            ban_duration_hours INTEGER DEFAULT 24,
            delete_spam BOOLEAN DEFAULT 1,
            antispam_enabled BOOLEAN DEFAULT 1,
            antiflood_enabled BOOLEAN DEFAULT 1,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
    
    async def warn_user(self, chat_id: int, user_id: int, moderator_id: int, 
                       reason: str = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª") -> Tuple[bool, str, Optional[ModerationAction]]:
        """‚ö†Ô∏è –í—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await self.db.execute('''
            INSERT INTO user_warnings (chat_id, user_id, moderator_id, reason)
            VALUES (?, ?, ?, ?)
            ''', (chat_id, user_id, moderator_id, reason))
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            result = await self.db.fetch_one('''
            SELECT COUNT(*) FROM user_warnings 
            WHERE chat_id = ? AND user_id = ? AND is_active = 1
            ''', (chat_id, user_id))
            
            warnings_count = result[0] if result else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            auto_action = None
            if warnings_count in self.auto_actions:
                auto_action = self.auto_actions[warnings_count]
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                if auto_action == ModerationAction.MUTE:
                    await self.mute_user(chat_id, user_id, moderator_id, 
                                       f"–ê–≤—Ç–æ–º—É—Ç –∑–∞ {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", 
                                       self.default_durations[ModerationAction.MUTE])
                elif auto_action == ModerationAction.KICK:
                    await self.kick_user(chat_id, user_id, moderator_id, 
                                       f"–ê–≤—Ç–æ–∫–∏–∫ –∑–∞ {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                elif auto_action == ModerationAction.BAN:
                    await self.ban_user(chat_id, user_id, moderator_id, 
                                      f"–ê–≤—Ç–æ–±–∞–Ω –∑–∞ {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                                      self.default_durations[ModerationAction.BAN])
            
            success_msg = f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ!\n\n–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
            if auto_action:
                success_msg += f"\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {auto_action.value}"
            
            return True, success_msg, auto_action
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", None
    
    async def mute_user(self, chat_id: int, user_id: int, moderator_id: int, 
                       reason: str, duration: timedelta = None) -> Tuple[bool, str]:
        """üîá –ú—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            if not duration:
                duration = self.default_durations[ModerationAction.MUTE]
            
            expires_at = datetime.now() + duration
            case_id = f"mute_{chat_id}_{user_id}_{int(datetime.now().timestamp())}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.execute('''
            INSERT INTO moderation_cases 
            (id, chat_id, user_id, moderator_id, action, reason, duration_minutes, expires_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (case_id, chat_id, user_id, moderator_id, ModerationAction.MUTE.value, 
                  reason, int(duration.total_seconds() / 60), expires_at))
            
            # –ú—É—Ç–∏–º –≤ Telegram
            try:
                from aiogram.types import ChatPermissions
                await self.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=expires_at
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –≤ Telegram: {e}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–º—É—Ç
            asyncio.create_task(self._schedule_unmute(case_id, chat_id, user_id, duration))
            
            duration_str = self._format_duration(duration)
            return True, f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_str}\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞: {str(e)}"
    
    async def ban_user(self, chat_id: int, user_id: int, moderator_id: int, 
                      reason: str, duration: timedelta = None) -> Tuple[bool, str]:
        """üö´ –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            expires_at = None
            if duration:
                expires_at = datetime.now() + duration
            
            case_id = f"ban_{chat_id}_{user_id}_{int(datetime.now().timestamp())}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            duration_minutes = int(duration.total_seconds() / 60) if duration else None
            await self.db.execute('''
            INSERT INTO moderation_cases 
            (id, chat_id, user_id, moderator_id, action, reason, duration_minutes, expires_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (case_id, chat_id, user_id, moderator_id, ModerationAction.BAN.value, 
                  reason, duration_minutes, expires_at))
            
            # –ë–∞–Ω–∏–º –≤ Telegram
            try:
                await self.bot.ban_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    until_date=expires_at
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –≤ Telegram: {e}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–±–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if duration:
                asyncio.create_task(self._schedule_unban(case_id, chat_id, user_id, duration))
                duration_str = self._format_duration(duration)
                return True, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration_str}\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            else:
                return True, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {str(e)}"
    
    async def kick_user(self, chat_id: int, user_id: int, moderator_id: int, 
                       reason: str) -> Tuple[bool, str]:
        """üë¢ –ö–∏–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            case_id = f"kick_{chat_id}_{user_id}_{int(datetime.now().timestamp())}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.execute('''
            INSERT INTO moderation_cases 
            (id, chat_id, user_id, moderator_id, action, reason)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (case_id, chat_id, user_id, moderator_id, ModerationAction.KICK.value, reason))
            
            # –ö–∏–∫–∞–µ–º –≤ Telegram
            try:
                await self.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await self.bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –≤ Telegram: {e}")
            
            return True, f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∏–∫–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –∫–∏–∫–∞: {str(e)}"
    
    def _format_duration(self, duration: timedelta) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        
        total_seconds = int(duration.total_seconds())
        
        if total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫"
        elif total_seconds < 3600:
            return f"{total_seconds // 60} –º–∏–Ω"
        elif total_seconds < 86400:
            return f"{total_seconds // 3600} —á"
        else:
            return f"{total_seconds // 86400} –¥–Ω"
    
    async def _schedule_unmute(self, case_id: str, chat_id: int, user_id: int, duration: timedelta):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–º—É—Ç"""
        await asyncio.sleep(duration.total_seconds())
        await self.unmute_user(chat_id, user_id, case_id)
    
    async def _schedule_unban(self, case_id: str, chat_id: int, user_id: int, duration: timedelta):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–±–∞–Ω"""
        await asyncio.sleep(duration.total_seconds())
        await self.unban_user(chat_id, user_id, case_id)
    
    async def unmute_user(self, chat_id: int, user_id: int, case_id: str = None) -> Tuple[bool, str]:
        """üîä –†–∞–∑–º—É—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –†–∞–∑–º—É—á–∏–≤–∞–µ–º –≤ Telegram
            try:
                from aiogram.types import ChatPermissions
                default_permissions = ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
                await self.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=default_permissions
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –≤ Telegram: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            if case_id:
                await self.db.execute('''
                UPDATE moderation_cases SET is_active = 0 WHERE id = ?
                ''', (case_id,))
            
            return True, "üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º—É—Ç–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º—É—Ç–∞: {str(e)}"
    
    async def unban_user(self, chat_id: int, user_id: int, case_id: str = None) -> Tuple[bool, str]:
        """‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤ Telegram
            try:
                await self.bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –≤ Telegram: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            if case_id:
                await self.db.execute('''
                UPDATE moderation_cases SET is_active = 0 WHERE id = ?
                ''', (case_id,))
            
            return True, "‚ôªÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {str(e)}"
    
    async def get_user_warnings(self, chat_id: int, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            result = await self.db.fetch_one('''
            SELECT COUNT(*) FROM user_warnings 
            WHERE chat_id = ? AND user_id = ? AND is_active = 1
            ''', (chat_id, user_id))
            
            return result[0] if result else 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
            return 0
    
    async def clear_user_warnings(self, chat_id: int, user_id: int, moderator_id: int) -> Tuple[bool, str]:
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            result = await self.db.execute('''
            UPDATE user_warnings SET is_active = 0 
            WHERE chat_id = ? AND user_id = ? AND is_active = 1
            ''', (chat_id, user_id))
            
            return True, f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

# –≠–ö–°–ü–û–†–¢
__all__ = ["UltimateModerationSystem", "ModerationAction", "ModerationCase"]
