# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/modules/entertainment_commands.py

#!/usr/bin/env python3
"""
üé≤ ENTERTAINMENT COMMANDS SYSTEM v4.0
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: —Ñ–∞–∫—Ç—ã, –∞–Ω–µ–∫–¥–æ—Ç—ã, –∏–≥—Ä—ã
"""

import logging
import random
import asyncio
import json
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class GameType(Enum):
    COIN_FLIP = "coin_flip"
    DICE_ROLL = "dice_roll"
    RANDOM_NUMBER = "random_number"
    MAGIC_8_BALL = "magic_8_ball"
    RIDDLE = "riddle"
    QUIZ = "quiz"

@dataclass
class GameSession:
    game_id: str
    chat_id: int
    user_id: int
    game_type: GameType
    current_state: Dict[str, Any]
    score: int = 0
    started_at: datetime = None
    last_activity: datetime = None
    is_active: bool = True

@dataclass
class EntertainmentStats:
    chat_id: int
    total_games_played: int = 0
    facts_requested: int = 0
    jokes_requested: int = 0
    most_popular_game: Optional[str] = None
    top_players: List[Dict] = None

class EntertainmentSystem:
    """üé≤ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, db_service, config):
        self.db = db_service
        self.config = config
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_games: Dict[str, GameSession] = {}
        
        # –ö—ç—à —Ñ–∞–∫—Ç–æ–≤ –∏ —à—É—Ç–æ–∫
        self.facts_cache = []
        self.jokes_cache = []
        self.riddles_cache = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_cache = {}
        
        logger.info("üé≤ Entertainment System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self._create_tables()
        await self._load_content()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(self._cleanup_inactive_games())
        asyncio.create_task(self._update_content_cache())
    
    async def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π"""
        
        # –ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS game_sessions (
            game_id TEXT PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            game_type TEXT NOT NULL,
            current_state TEXT,  -- JSON
            score INTEGER DEFAULT 0,
            started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            
            INDEX(chat_id),
            INDEX(user_id),
            INDEX(game_type),
            INDEX(is_active)
        )
        ''')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS entertainment_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            command_type TEXT NOT NULL,  -- fact, joke, game, etc.
            command_details TEXT,
            used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            INDEX(chat_id),
            INDEX(user_id),
            INDEX(command_type),
            INDEX(used_at)
        )
        ''')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS user_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            content_type TEXT NOT NULL,  -- fact, joke, riddle
            content_text TEXT NOT NULL,
            is_approved BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            INDEX(chat_id),
            INDEX(content_type),
            INDEX(is_approved)
        )
        ''')
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤
        await self.db.execute('''
        CREATE TABLE IF NOT EXISTS player_ratings (
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            game_type TEXT NOT NULL,
            total_score INTEGER DEFAULT 0,
            games_played INTEGER DEFAULT 0,
            best_score INTEGER DEFAULT 0,
            last_played TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            PRIMARY KEY(chat_id, user_id, game_type),
            INDEX(total_score),
            INDEX(games_played)
        )
        ''')
    
    async def coin_flip(self, chat_id: int, user_id: int, 
                       bet: Optional[str] = None) -> Tuple[str, bool]:
        """ü™ô –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞"""
        
        try:
            # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É
            result = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
            win = False
            if bet and bet.lower() in ['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞']:
                win = (bet.lower() == result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._log_entertainment_usage(chat_id, user_id, 'coin_flip', 
                                              f"result:{result},bet:{bet},win:{win}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            coin_emoji = "ü¶Ö" if result == "–æ—Ä–µ–ª" else "üëë"
            
            response = f"ü™ô **–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç—É...**\n\n{coin_emoji} **{result.upper()}!**"
            
            if bet:
                if win:
                    response += f"\n\nüéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!** –í—ã —É–≥–∞–¥–∞–ª–∏! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ '{bet}' –≤—ã–∏–≥—Ä–∞–ª–∞!"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
                    await self._update_player_rating(chat_id, user_id, GameType.COIN_FLIP, 10)
                else:
                    response += f"\n\nüòî **–ù–µ –ø–æ–≤–µ–∑–ª–æ!** –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ '{bet}' –Ω–µ —Å—ã–≥—Ä–∞–ª–∞."
            else:
                response += "\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏!*\n`/flip –æ—Ä–µ–ª` –∏–ª–∏ `/flip —Ä–µ—à–∫–∞`"
            
            return response, win
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã", False
    
    async def roll_dice(self, chat_id: int, user_id: int, 
                       sides: int = 6, count: int = 1) -> str:
        """üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤"""
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if count > 10:
                count = 10
            if sides > 100:
                sides = 100
            if sides < 2:
                sides = 6
            
            # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏
            rolls = [random.randint(1, sides) for _ in range(count)]
            total = sum(rolls)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            dice_emoji = "üé≤" * min(count, 5)
            
            response = f"{dice_emoji} **–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞**\n\n"
            
            if count == 1:
                response += f"üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {rolls[0]}"
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è 6-—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∫—É–±–∏–∫–∞
                if sides == 6:
                    if rolls[0] == 6:
                        response += " üèÜ **–ú–ê–ö–°–ò–ú–£–ú!**"
                    elif rolls[0] == 1:
                        response += " üòÖ **–ù–µ –ø–æ–≤–µ–∑–ª–æ...**"
            else:
                rolls_str = " + ".join(map(str, rolls))
                response += f"üéØ **–ë—Ä–æ—Å–∫–∏:** {rolls_str}\n"
                response += f"üìä **–°—É–º–º–∞:** {total}"
                
                # –ë–æ–Ω—É—Å –∑–∞ –≤—Å–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if all(roll == sides for roll in rolls):
                    response += " üî• **–í–°–ï –ú–ê–ö–°–ò–ú–£–ú–´!**"
                    await self._update_player_rating(chat_id, user_id, GameType.DICE_ROLL, 50)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._log_entertainment_usage(chat_id, user_id, 'dice_roll', 
                                              f"sides:{sides},count:{count},total:{total}")
            
            # –û–±—ã—á–Ω—ã–µ –æ—á–∫–∏
            await self._update_player_rating(chat_id, user_id, GameType.DICE_ROLL, total)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞"
    
    async def magic_8_ball(self, chat_id: int, user_id: int, question: str) -> str:
        """üé± –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä 8"""
        
        try:
            # –û—Ç–≤–µ—Ç—ã —à–∞—Ä–∞
            answers = [
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
                "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞",
                "‚úÖ –ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω",
                "‚úÖ –î–∞, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ",
                "‚úÖ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞",
                "‚úÖ –ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –¥–∞",
                "‚úÖ –î–∞",
                
                # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
                "ü§î –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
                "ü§î –õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å",
                "ü§î –ù–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å",
                "ü§î –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞",
                "ü§î –¢—É–º–∞–Ω–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                
                # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
                "‚ùå –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ",
                "‚ùå –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç",
                "‚ùå –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç",
                "‚ùå –í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
                "‚ùå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ—Ç"
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            answer = random.choice(answers)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._log_entertainment_usage(chat_id, user_id, 'magic_8_ball', 
                                              f"question_length:{len(question)}")
            
            response = f"üé± **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä 8**\n\n"
            response += f"‚ùì **–í–æ–ø—Ä–æ—Å:** {question}\n\n"
            response += f"üîÆ **–û—Ç–≤–µ—Ç:** {answer}"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞: {e}")
            return "‚ùå –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä —Å–ª–æ–º–∞–ª—Å—è üé±üí•"
    
    async def get_random_fact(self, chat_id: int, user_id: int, 
                            category: Optional[str] = None) -> str:
        """üß† –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"""
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
            fact = await self._fetch_external_fact(category)
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –∫—ç—à–∞
            if not fact and self.facts_cache:
                fact = random.choice(self.facts_cache)
            
            # –ï—Å–ª–∏ –∏ –∫—ç—à –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            if not fact:
                fact = self._get_builtin_fact()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._log_entertainment_usage(chat_id, user_id, 'fact', 
                                              f"category:{category},length:{len(fact)}")
            
            response = f"üß† **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç**\n\n"
            if category:
                response += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n\n"
            response += f"üí° {fact}"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç"
    
    async def get_random_joke(self, chat_id: int, user_id: int) -> str:
        """üòÑ –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞"""
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
            joke = await self._fetch_external_joke()
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –∫—ç—à–∞
            if not joke and self.jokes_cache:
                joke = random.choice(self.jokes_cache)
            
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—É—Ç–∫–∏ –∫–∞–∫ fallback
            if not joke:
                joke = self._get_builtin_joke()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._log_entertainment_usage(chat_id, user_id, 'joke', 
                                              f"length:{len(joke)}")
            
            response = f"üòÑ **–®—É—Ç–∫–∞ –¥–Ω—è**\n\n{joke}"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—É—Ç–∫–∏: {e}")
            return "‚ùå –®—É—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòÖ"
    
    async def start_quiz(self, chat_id: int, user_id: int, 
                        category: str = "general") -> str:
        """üß© –ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            game_id = f"quiz_{chat_id}_{user_id}_{int(datetime.now().timestamp())}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
            questions = await self._get_quiz_questions(category)
            
            if not questions:
                return "‚ùå –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            game_session = GameSession(
                game_id=game_id,
                chat_id=chat_id,
                user_id=user_id,
                game_type=GameType.QUIZ,
                current_state={
                    'category': category,
                    'questions': questions,
                    'current_question': 0,
                    'correct_answers': 0,
                    'total_questions': len(questions)
                },
                started_at=datetime.now(),
                last_activity=datetime.now()
            )
            
            self.active_games[game_id] = game_session
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self._save_game_session(game_session)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            return await self._show_quiz_question(game_session)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
    
    async def answer_quiz(self, chat_id: int, user_id: int, answer: str) -> str:
        """‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        
        try:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game_session = None
            for game in self.active_games.values():
                if (game.chat_id == chat_id and game.user_id == user_id and 
                    game.game_type == GameType.QUIZ and game.is_active):
                    game_session = game
                    break
            
            if not game_session:
                return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π `/quiz`"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            state = game_session.current_state
            questions = state['questions']
            current_q = state['current_question']
            
            if current_q >= len(questions):
                return "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            
            question = questions[current_q]
            correct_answer = question['correct_answer'].lower().strip()
            user_answer = answer.lower().strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            is_correct = user_answer == correct_answer
            
            response = ""
            if is_correct:
                response += "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                state['correct_answers'] += 1
                game_session.score += 10
            else:
                response += f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                response += f"üí° **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {question['correct_answer']}\n\n"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            state['current_question'] += 1
            game_session.last_activity = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
            if state['current_question'] >= state['total_questions']:
                # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                game_session.is_active = False
                
                correct = state['correct_answers']
                total = state['total_questions']
                percentage = int((correct / total) * 100)
                
                response += f"üèÅ **–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                response += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {correct}/{total} ({percentage}%)\n"
                response += f"üèÜ **–û—á–∫–∏:** {game_session.score}\n\n"
                
                # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if percentage >= 90:
                    response += "üåü **–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!**"
                elif percentage >= 70:
                    response += "üëç **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!**"
                elif percentage >= 50:
                    response += "üëå **–ù–µ–ø–ª–æ—Ö–æ!**"
                else:
                    response += "üìö **–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!**"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                await self._update_player_rating(chat_id, user_id, GameType.QUIZ, game_session.score)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
                del self.active_games[game_session.game_id]
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                response += await self._show_quiz_question(game_session)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
            await self._save_game_session(game_session)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞"
    
    async def get_player_stats(self, chat_id: int, user_id: int) -> str:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º
            ratings = await self.db.fetch_all('''
            SELECT game_type, total_score, games_played, best_score, last_played
            FROM player_ratings 
            WHERE chat_id = ? AND user_id = ?
            ORDER BY total_score DESC
            ''', (chat_id, user_id))
            
            if not ratings:
                return "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞**\n\n–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—ã!"
            
            response = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            
            total_score = 0
            total_games = 0
            
            for rating in ratings:
                game_type, score, games, best, last_played = rating
                total_score += score
                total_games += games
                
                game_names = {
                    'coin_flip': 'ü™ô –û—Ä–µ–ª/–†–µ—à–∫–∞',
                    'dice_roll': 'üé≤ –ö—É–±–∏–∫–∏',
                    'quiz': 'üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞',
                    'magic_8_ball': 'üé± –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä'
                }
                
                game_name = game_names.get(game_type, game_type)
                
                response += f"**{game_name}**\n"
                response += f"‚îî –û—á–∫–∏: {score} | –ò–≥—Ä: {games} | –õ—É—á—à–∏–π: {best}\n\n"
            
            response += f"üèÜ **–û–±—â–∏–π —Å—á–µ—Ç:** {total_score}\n"
            response += f"üéÆ **–í—Å–µ–≥–æ –∏–≥—Ä:** {total_games}"
            
            # –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
            level = self._calculate_player_level(total_score)
            response += f"\n‚≠ê **–£—Ä–æ–≤–µ–Ω—å:** {level}"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    
    async def get_leaderboard(self, chat_id: int, game_type: Optional[str] = None) -> str:
        """üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"""
        
        try:
            if game_type:
                # –õ–∏–¥–µ—Ä—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ
                leaders = await self.db.fetch_all('''
                SELECT user_id, total_score, games_played, best_score
                FROM player_ratings 
                WHERE chat_id = ? AND game_type = ?
                ORDER BY total_score DESC 
                LIMIT 10
                ''', (chat_id, game_type))
                
                game_names = {
                    'coin_flip': 'ü™ô –û—Ä–µ–ª/–†–µ—à–∫–∞',
                    'dice_roll': 'üé≤ –ö—É–±–∏–∫–∏', 
                    'quiz': 'üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞'
                }
                
                title = f"üèÜ **–õ–∏–¥–µ—Ä—ã - {game_names.get(game_type, game_type)}**"
            else:
                # –û–±—â–∏–µ –ª–∏–¥–µ—Ä—ã
                leaders = await self.db.fetch_all('''
                SELECT user_id, SUM(total_score) as total, SUM(games_played) as games
                FROM player_ratings 
                WHERE chat_id = ?
                GROUP BY user_id 
                ORDER BY total DESC 
                LIMIT 10
                ''', (chat_id,))
                
                title = "üèÜ **–û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤**"
            
            if not leaders:
                return f"{title}\n\nü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª!"
            
            response = f"{title}\n\n"
            
            for i, leader in enumerate(leaders, 1):
                user_id = leader[0]
                score = leader[1]
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
                position_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
                
                response += f"{position_emoji} ID {user_id}: **{score}** –æ—á–∫–æ–≤\n"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"
    
    def _get_builtin_fact(self) -> str:
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã"""
        
        facts = [
            "–°–µ—Ä–¥—Ü–µ —Å–∏–Ω–µ–≥–æ –∫–∏—Ç–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–µ, —á—Ç–æ —á–µ—Ä–µ–∑ –µ–≥–æ –∞—Ä—Ç–µ—Ä–∏–∏ –º–æ–∂–µ—Ç –ø—Ä–æ–ø–ª—ã—Ç—å –º–∞–ª–µ–Ω—å–∫–∞—è —Ä—ã–±–∞.",
            "–ë–∞–Ω–∞–Ω - —ç—Ç–æ —è–≥–æ–¥–∞, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç.",
            "–û–∫—Ç–æ–ø—É—Å—ã –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å.",
            "–ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è. –ê—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤ –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö –≥—Ä–æ–±–Ω–∏—Ü–∞—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç.",
            "–ì—Ä—É–ø–ø–∞ —Ñ–ª–∞–º–∏–Ω–≥–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'flamboyance' (–ø–æ–∫–∞–∑–Ω–æ—Å—Ç—å).",
            "–ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ - –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç.",
            "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ–ª—å–∑—è –ø–ª–∞–∫–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–µ–∑—ã –Ω–µ –ø–∞–¥–∞—é—Ç –≤–Ω–∏–∑ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏.",
            "–ú–æ—Ä—Å–∫–∏–µ –≤—ã–¥—Ä—ã –¥–µ—Ä–∂–∞—Ç—Å—è –∑–∞ –ª–∞–ø—ã –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –æ–∫–µ–∞–Ω–µ.",
            "–°—Ç—Ä–µ–∫–æ–∑—ã –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —à–µ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö: –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ø–µ—Ä–µ–¥, –Ω–∞–∑–∞–¥, –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ.",
            "–ü–∏–Ω–≥–≤–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É –¥–æ 2 –º–µ—Ç—Ä–æ–≤ –∏–∑ –≤–æ–¥—ã."
        ]
        
        return random.choice(facts)
    
    def _get_builtin_joke(self) -> str:
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—É—Ç–∫–∏"""
        
        jokes = [
            "‚Äî –î–æ–∫—Ç–æ—Ä, —è –∑–∞–±—ã–≤–∞—é –≤—Å–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!\n‚Äî –≠—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ. –° –∫–∞–∫–∏—Ö –ø–æ—Ä —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?\n‚Äî –ß—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –º–æ–µ—Ç –ø–æ—Å—É–¥—É –≤ –≤–∞–Ω–Ω–æ–π. –ñ–µ–Ω–∞ –∫—Ä–∏—á–∏—Ç:\n‚Äî –ó–∞—á–µ–º –≤ –≤–∞–Ω–Ω–æ–π?!\n‚Äî –ê —Ç–∞–º –±–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–∏!",
            "‚Äî –ê–ª–ª–æ, —ç—Ç–æ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?\n‚Äî –î–∞.\n‚Äî –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n‚Äî –û–Ω –≤–∫–ª—é—á–µ–Ω?\n‚Äî –ö–æ–Ω–µ—á–Ω–æ! –î—É–º–∞–µ—Ç–µ, —è –∏–¥–∏–æ—Ç?\n‚Äî –ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.\n‚Äî –ù—É, —è –Ω–∞–∂–∏–º–∞—é –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –∞ –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.\n‚Äî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è.\n‚Äî –ù–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É? –£ –º–µ–Ω—è —Ç—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫ –≤—ã–¥–≤–∏–≥–∞–µ—Ç—Å—è...",
            "–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞:\n‚Äî –ö–∞–∫ –¥–µ–ª–∞?\n‚Äî –ö–∞–∫ –≤ –∂–∏–∑–Ω–∏ ‚Äî —Å–ø–ª–æ—à–Ω—ã–µ –±–∞–≥–∏.\n‚Äî –ê –¥–æ–º–∞?\n‚Äî –î–æ–º–∞ –∂–µ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä—É–≥–∞–µ—Ç—Å—è.\n‚Äî –≠—Ç–æ —Ç–æ–∂–µ –±–∞–≥?\n‚Äî –ù–µ—Ç, —ç—Ç–æ —Ñ–∏—á–∞!",
            "‚Äî –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω —Å –†–æ–∂–¥–µ—Å—Ç–≤–æ–º?\n‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ 31 OCT = 25 DEC!"
        ]
        
        return random.choice(jokes)

# –≠–ö–°–ü–û–†–¢
__all__ = ["EntertainmentSystem", "GameType", "GameSession"]
