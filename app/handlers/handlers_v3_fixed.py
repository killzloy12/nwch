#!/usr/bin/env python3
"""
üöÄ PERFECT HANDLERS v9.0 - –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò –û –ö–ê–†–ú–ï
"""

import logging
import asyncio
import random
import html
import json
import os
from datetime import datetime
from pathlib import Path
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

logger = logging.getLogger(__name__)

# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
DEFAULT_TRIGGER_WORDS = ["–±–æ—Ç", "bot", "—Ä–æ–±–æ—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "assistant", "—ç–π", "—Å–ª—É—à–∞–π", "–º–∞–∫—Å"]
CUSTOM_TRIGGER_WORDS = {}  # {chat_id: [—Å–ø–∏—Å–æ–∫_—Å–ª–æ–≤]}
TRIGGER_WORDS_FILE = "data/trigger_words.json"
chat_stats = {}
bot_info = None

# –ü–ï–†–°–û–ù–ê–ñ–ò –ò –ö–ê–†–ú–ê
GLOBAL_PERSONAS = {}
PERSONAS_FILE = "data/personas.json"
GLOBAL_KARMA = {}
KARMA_FILE = "data/karma.json"
USER_LAST_MESSAGES = {}

# –°–õ–û–í–ê –î–õ–Ø –ö–ê–†–ú–´
POSITIVE_WORDS = ["—Å–ø–∞—Å–∏–±–æ", "thanks", "–∫—Ä—É—Ç–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–º–æ–ª–æ–¥–µ—Ü", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–π–∫", "–ø–ª—é—Å", "+1"]
NEGATIVE_WORDS = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "—Ö—É–π–Ω—è", "–≥–æ–≤–Ω–æ", "–¥–µ—Ä—å–º–æ", "–º–∏–Ω—É—Å", "–ø–ª–æ—Ö–æ", "—Ö–µ—Ä–Ω—è"]
SPAM_WORDS = ["—Ä–µ–∫–ª–∞–º–∞", "–ø—Ä–æ–¥–∞–º", "–∫—É–ø–ª—é", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–±–∏–∑–Ω–µ—Å"]
HELP_WORDS = ["–ø–æ–º–æ–≥", "–ø–æ–º–æ–≥–ª–∏", "–æ–±—ä—è—Å–Ω–∏–ª", "–Ω–∞—É—á–∏–ª", "–ø–æ–¥—Å–∫–∞–∑–∞–ª"]

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    global GLOBAL_PERSONAS, GLOBAL_KARMA
    
    try:
        if os.path.exists(PERSONAS_FILE):
            with open(PERSONAS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                GLOBAL_PERSONAS = {int(k): v for k, v in data.items()}
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(GLOBAL_PERSONAS)}")
        
        if os.path.exists(KARMA_FILE):
            with open(KARMA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                GLOBAL_KARMA = {}
                for key, value in data.items():
                    user_id, chat_id = key.split('_')
                    GLOBAL_KARMA[(int(user_id), int(chat_id))] = value
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä–º—ã: {len(GLOBAL_KARMA)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞
        load_trigger_words()
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        GLOBAL_PERSONAS = {}
        GLOBAL_KARMA = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        Path("data").mkdir(exist_ok=True)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        personas_data = {str(k): v for k, v in GLOBAL_PERSONAS.items()}
        with open(PERSONAS_FILE, 'w', encoding='utf-8') as f:
            json.dump(personas_data, f, ensure_ascii=False, indent=2, default=str)
        
        # –ö–∞—Ä–º–∞
        karma_data = {}
        for (user_id, chat_id), value in GLOBAL_KARMA.items():
            key = f"{user_id}_{chat_id}"
            karma_data[key] = value
        with open(KARMA_FILE, 'w', encoding='utf-8') as f:
            json.dump(karma_data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def load_trigger_words():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞"""
    global CUSTOM_TRIGGER_WORDS
    
    try:
        if os.path.exists(TRIGGER_WORDS_FILE):
            with open(TRIGGER_WORDS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                CUSTOM_TRIGGER_WORDS = {int(k): v for k, v in data.items()}
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {len(CUSTOM_TRIGGER_WORDS)}")
        else:
            CUSTOM_TRIGGER_WORDS = {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {e}")
        CUSTOM_TRIGGER_WORDS = {}

def save_trigger_words():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞"""
    try:
        Path("data").mkdir(exist_ok=True)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        data_to_save = {str(k): v for k, v in CUSTOM_TRIGGER_WORDS.items()}
        
        with open(TRIGGER_WORDS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {len(CUSTOM_TRIGGER_WORDS)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞: {e}")

def get_trigger_words(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    if chat_id in CUSTOM_TRIGGER_WORDS:
        return CUSTOM_TRIGGER_WORDS[chat_id]
    return DEFAULT_TRIGGER_WORDS

def add_trigger_word(chat_id, word):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞ –¥–ª—è —á–∞—Ç–∞"""
    if chat_id not in CUSTOM_TRIGGER_WORDS:
        CUSTOM_TRIGGER_WORDS[chat_id] = DEFAULT_TRIGGER_WORDS.copy()
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    if len(CUSTOM_TRIGGER_WORDS[chat_id]) >= 50:
        return "limit"
    
    word_lower = word.lower().strip()
    if word_lower and word_lower not in CUSTOM_TRIGGER_WORDS[chat_id]:
        CUSTOM_TRIGGER_WORDS[chat_id].append(word_lower)
        save_trigger_words()
        return True
    return False

def remove_trigger_word(chat_id, word):
    """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞ –¥–ª—è —á–∞—Ç–∞"""
    if chat_id not in CUSTOM_TRIGGER_WORDS:
        return False
    
    word_lower = word.lower().strip()
    if word_lower in CUSTOM_TRIGGER_WORDS[chat_id]:
        CUSTOM_TRIGGER_WORDS[chat_id].remove(word_lower)
        save_trigger_words()
        return True
    return False

def reset_trigger_words(chat_id):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"""
    if chat_id in CUSTOM_TRIGGER_WORDS:
        del CUSTOM_TRIGGER_WORDS[chat_id]
        save_trigger_words()
        return True
    return False

async def send_karma_notification(bot, user_id, from_user_name, amount, new_karma, reason, level_up_info=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä–º—ã"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if amount > 0:
            emoji = "‚¨ÜÔ∏è"
            action = "—É–≤–µ–ª–∏—á–∏–ª"
            color = "üü¢"
        else:
            emoji = "‚¨áÔ∏è"
            action = "—É–º–µ–Ω—å—à–∏–ª"
            color = "üî¥"
        
        notification_text = (
            f"{emoji} **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–†–ú–´**\n\n"
            f"üë§ **{from_user_name}** {action} –≤–∞—à—É –∫–∞—Ä–º—É\n"
            f"{color} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {amount:+d}\n"
            f"‚öñÔ∏è **–í–∞—à–∞ –∫–∞—Ä–º–∞:** {new_karma}\n"
            f"üìã **–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if level_up_info:
            notification_text += f"\n\nüéâ **–ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!**\n{level_up_info['emoji']} **–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:** {level_up_info['name']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="Markdown"
        )
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞—Ä–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}: {amount:+d}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞—Ä–º–µ {user_id}: {e}")
        return False

def analyze_karma(text, user_id):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä–º—ã"""
    if not text:
        return {"karma_change": 0, "reason": "–ø—É—Å—Ç–æ–µ"}
    
    text_lower = text.lower()
    karma_change = random.randint(1, 2)
    reasons = [f"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å +{karma_change}"]
    
    # –ü–æ–∑–∏—Ç–∏–≤
    positive_count = sum(1 for word in POSITIVE_WORDS if word in text_lower)
    if positive_count > 0:
        bonus = min(positive_count * 3, 10)
        karma_change += bonus
        reasons.append(f"–ø–æ–∑–∏—Ç–∏–≤ +{bonus}")
    
    # –ù–µ–≥–∞—Ç–∏–≤
    negative_count = sum(1 for word in NEGATIVE_WORDS if word in text_lower)
    if negative_count > 0:
        penalty = min(negative_count * 5, 15)
        karma_change -= penalty
        reasons.append(f"–Ω–µ–≥–∞—Ç–∏–≤ -{penalty}")
    
    # –°–ø–∞–º
    spam_count = sum(1 for word in SPAM_WORDS if word in text_lower)
    if spam_count > 0:
        penalty = min(spam_count * 10, 25)
        karma_change -= penalty
        reasons.append(f"—Å–ø–∞–º -{penalty}")
    
    # –ü–æ–º–æ—â—å
    help_count = sum(1 for word in HELP_WORDS if word in text_lower)
    if help_count > 0:
        bonus = min(help_count * 8, 20)
        karma_change += bonus
        reasons.append(f"–ø–æ–º–æ—â—å +{bonus}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ
    if len(text) > 100:
        karma_change += 2
        reasons.append("–¥–ª–∏–Ω–Ω—ã–π +2")
    
    if text.count('?') >= 1:
        karma_change += 1
        reasons.append("–≤–æ–ø—Ä–æ—Å +1")
    
    # –ü–æ–≤—Ç–æ—Ä—ã
    if user_id in USER_LAST_MESSAGES:
        if text in USER_LAST_MESSAGES[user_id]:
            karma_change -= 8
            reasons.append("–ø–æ–≤—Ç–æ—Ä -8")
        USER_LAST_MESSAGES[user_id].append(text)
        if len(USER_LAST_MESSAGES[user_id]) > 5:
            USER_LAST_MESSAGES[user_id].pop(0)
    else:
        USER_LAST_MESSAGES[user_id] = [text]
    
    karma_change = max(-30, min(karma_change, 50))
    return {"karma_change": karma_change, "reason": ", ".join(reasons)}

def get_karma(user_id, chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä–º—É"""
    key = (user_id, chat_id)
    if key not in GLOBAL_KARMA:
        GLOBAL_KARMA[key] = {
            'karma': random.randint(10, 100),
            'level': 1,
            'messages_count': 0,
            'created_at': datetime.now().isoformat()
        }
        save_data()
    return GLOBAL_KARMA[key]

def add_karma(user_id, chat_id, amount):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä–º—É"""
    karma_data = get_karma(user_id, chat_id)
    old_level = karma_data['level']
    
    karma_data['karma'] += amount
    karma_data['messages_count'] += 1
    
    if karma_data['karma'] < 0:
        karma_data['karma'] = 0
    
    # –£—Ä–æ–≤–Ω–∏
    if karma_data['karma'] >= 2000:
        karma_data['level'] = 20
    elif karma_data['karma'] >= 1500:
        karma_data['level'] = 15
    elif karma_data['karma'] >= 1000:
        karma_data['level'] = 10
    elif karma_data['karma'] >= 700:
        karma_data['level'] = 8
    elif karma_data['karma'] >= 500:
        karma_data['level'] = 5
    elif karma_data['karma'] >= 300:
        karma_data['level'] = 4
    elif karma_data['karma'] >= 200:
        karma_data['level'] = 3
    elif karma_data['karma'] >= 100:
        karma_data['level'] = 2
    else:
        karma_data['level'] = 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    level_up_info = None
    if karma_data['level'] > old_level:
        logger.info(f"üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {user_id}: {old_level} ‚Üí {karma_data['level']}")
        
        level_info = {
            1: {"name": "–ù–æ–≤–∏—á–æ–∫", "emoji": "üå±"},
            2: {"name": "–ó–Ω–∞–∫–æ–º—ã–π", "emoji": "‚≠ê"},
            3: {"name": "–ê–∫—Ç–∏–≤–Ω—ã–π", "emoji": "üî•"},
            4: {"name": "–û–ø—ã—Ç–Ω—ã–π", "emoji": "üî•"},
            5: {"name": "–≠–∫—Å–ø–µ—Ä—Ç", "emoji": "üíé"},
            8: {"name": "–ì—É—Ä—É", "emoji": "üíé"},
            10: {"name": "–ú–∞—Å—Ç–µ—Ä", "emoji": "üëë"},
            15: {"name": "–ó–≤–µ–∑–¥–∞", "emoji": "‚≠ê"},
            20: {"name": "–õ–µ–≥–µ–Ω–¥–∞", "emoji": "üèÜ"}
        }
        
        level_up_info = level_info.get(karma_data['level'], {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "emoji": "‚ùì"})
    
    save_data()
    return karma_data, level_up_info

async def check_karma_triggers(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∫–∞—Ä–º—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        if not message.text or not message.reply_to_message:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—á–∞—é—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.reply_to_message.from_user.id == message.from_user.id:
            return  # –ù–µ –º–µ–Ω—è–µ–º –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ
        
        text_lower = message.text.lower()
        target_user_id = message.reply_to_message.from_user.id
        from_user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –ö–ê–†–ú–´
        karma_commands = {
            # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ
            '+1': 5, '–ø–ª—é—Å': 5, '–ª–∞–π–∫': 3, '–∫—Ä—É—Ç–æ': 4, '–∫–ª–∞—Å—Å': 4, 
            '—Å–ø–∞—Å–∏–±–æ': 6, '–±–ª–∞–≥–æ–¥–∞—Ä—é': 6, '–æ—Ç–ª–∏—á–Ω–æ': 5, '—Å—É–ø–µ—Ä': 4,
            '–º–æ–ª–æ–¥–µ—Ü': 5, '—Ö–æ—Ä–æ—à–æ': 3, '–±—Ä–∞–≤–æ': 4, '—Ä–µ—Å–ø–µ–∫—Ç': 5,
            
            # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ  
            '-1': -5, '–º–∏–Ω—É—Å': -5, '–¥–∏–∑–ª–∞–π–∫': -3, '–ø–ª–æ—Ö–æ': -4,
            '—Ö–µ—Ä–Ω—è': -6, '—Ñ–∏–≥–Ω—è': -4, '–æ—Ç—Å—Ç–æ–π': -5, '—Ñ—É—Ñ–ª–æ': -4
        }
        
        karma_change = 0
        triggered_words = []
        
        for word, value in karma_commands.items():
            if word in text_lower:
                karma_change += value
                triggered_words.append(word)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã
        if karma_change != 0 and abs(karma_change) >= 3:
            karma_data, level_up_info = add_karma(target_user_id, chat_id, karma_change)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä–º—É
            from_user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            reason = f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({', '.join(triggered_words)})"
            await send_karma_notification(
                message.bot, 
                target_user_id, 
                from_user_name, 
                karma_change, 
                karma_data['karma'], 
                reason, 
                level_up_info
            )
            
            logger.info(f"‚öñÔ∏è –ö–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {from_user_id} ‚Üí {target_user_id}: {karma_change:+d}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∫–∞—Ä–º—ã: {e}")

def safe_escape(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if not text:
        return ""
    return html.escape(str(text))

def register_all_handlers(dp, modules):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è PERFECT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–∞—Ä–º—ã"""
    
    router = Router()
    global bot_info
    
    load_data()
    
    ultimate_system = modules.get('ultimate')
    is_ultimate_mode = ultimate_system is not None
    
    logger.info(f"üéØ PERFECT –†–ï–ñ–ò–ú: {'ULTIMATE' if is_ultimate_mode else '–ë–ê–ó–û–í–´–ô'}")
    
    ai_service = modules.get('ai')
    logger.info(f"üîç AI: {ai_service}")
    
    async def get_bot_info():
        global bot_info
        try:
            bot_info = await modules['bot'].get_me()
            logger.info(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
    
    asyncio.create_task(get_bot_info())
    
    async def check_access(message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            config = modules['config']
            user_id = message.from_user.id
            chat_id = message.chat.id
            
            if user_id in config.bot.admin_ids:
                return True
                
            if not hasattr(config.bot, 'allowed_chat_ids') or not config.bot.allowed_chat_ids:
                return True
                
            return chat_id in config.bot.allowed_chat_ids
        except:
            return True
    
    async def update_stats(message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–∞—Ä–º–∞"""
        try:
            chat_id = message.chat.id
            user_id = message.from_user.id
            
            if chat_id not in chat_stats:
                chat_stats[chat_id] = {
                    'messages_count': 0,
                    'unique_users': set(),
                    'last_activity': datetime.now()
                }
            
            chat_stats[chat_id]['messages_count'] += 1
            chat_stats[chat_id]['unique_users'].add(user_id)
            chat_stats[chat_id]['last_activity'] = datetime.now()
            
            # –ö–∞—Ä–º–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if message.text:
                analysis = analyze_karma(message.text, user_id)
                karma_change = analysis["karma_change"]
                
                if karma_change != 0:
                    karma_data, level_up_info = add_karma(user_id, chat_id, karma_change)
                    
                    if abs(karma_change) >= 5:
                        logger.info(f"‚öñÔ∏è –ö–∞—Ä–º–∞ {user_id}: {karma_change:+d} = {karma_data['karma']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∫–∞—Ä–º—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            await check_karma_triggers(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def check_admin(message, feature="—Ñ—É–Ω–∫—Ü–∏—è"):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞"""
        if message.from_user.id not in modules['config'].bot.admin_ids:
            await message.reply(
                f"üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
                f"{feature.capitalize()} —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"
            )
            return False
        return True
    
    # –ö–û–ú–ê–ù–î–´
    
    @router.message(CommandStart())
    async def start_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            user_name = safe_escape(message.from_user.first_name or "–¥—Ä—É–≥")
            greetings = [
                f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user_name}! Karma Edition —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                f"‚ö° –ô–æ, {user_name}! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞—Ä–º—ã –∞–∫—Ç–∏–≤–Ω—ã!",
                f"üéØ –î–∞—Ä–æ–≤–∞, {user_name}! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            ]
            
            await message.reply(random.choice(greetings))
            logger.info(f"‚úÖ KARMA /start: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /start: {e}")
            await message.reply("üëã –ü—Ä–∏–≤–µ—Ç!")
    
    @router.message(Command(commands=['help']))
    async def help_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            is_admin = message.from_user.id in modules['config'].bot.admin_ids
            
            if is_admin:
                help_text = (
                    "üöÄ **ULTIMATE BOT v9.0 - KARMA ADMIN**\n\n"
                    "üë§ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                    "‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                    "‚Ä¢ `/karma` - –º–æ—è –∫–∞—Ä–º–∞\n"
                    "‚Ä¢ `/karma_help` - –∫–∞–∫ –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—Ä–º—É\n\n"
                    "üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (–∞–¥–º–∏–Ω—ã):**\n"
                    "‚Ä¢ `/be –æ–ø–∏—Å–∞–Ω–∏–µ` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
                    "‚Ä¢ `/persona` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ\n\n"
                    "üé≤ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**\n"
                    "‚Ä¢ `/flip` - –æ—Ä–µ–ª/—Ä–µ—à–∫–∞\n"
                    "‚Ä¢ `/dice` - –∫—É–±–∏–∫ 1-6\n"
                    "‚Ä¢ `/joke` - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n"
                    "‚Ä¢ `/fact` - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
                    "‚Ä¢ `/8ball –≤–æ–ø—Ä–æ—Å` - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä\n\n"
                    "‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:**\n"
                    "‚Ä¢ `/crypto BTC` - –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
                    "üîß **–°–∏—Å—Ç–µ–º–∞ (–∞–¥–º–∏–Ω—ã):**\n"
                    "‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ `/debug` - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                    "üß† **AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ–ø–ª–∞–∏**\n"
                    "‚öñÔ∏è **Karma Edition v9.0 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä–º–µ!**"
                )
            else:
                help_text = (
                    "ü§ñ **ULTIMATE BOT v9.0 - KARMA**\n\n"
                    "üë§ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                    "‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                    "‚Ä¢ `/karma` - –º–æ—è –∫–∞—Ä–º–∞\n"
                    "‚Ä¢ `/karma_help` - –∫–∞–∫ –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—Ä–º—É\n\n"
                    "üé≤ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**\n"
                    "‚Ä¢ `/flip` - –æ—Ä–µ–ª/—Ä–µ—à–∫–∞\n"
                    "‚Ä¢ `/dice` - –∫—É–±–∏–∫ 1-6\n"
                    "‚Ä¢ `/joke` - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n"
                    "‚Ä¢ `/fact` - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
                    "‚Ä¢ `/8ball –≤–æ–ø—Ä–æ—Å` - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä\n\n"
                    "‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:**\n"
                    "‚Ä¢ `/crypto BTC` - –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
                    "üé≠ **AI –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:**\n"
                    "–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ–ø–ª–∞–∏.\n"
                    "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.\n\n"
                    "‚öñÔ∏è **Karma Edition v9.0 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä–º–µ!**"
                )
            
            await message.reply(help_text)
            logger.info(f"‚úÖ KARMA /help: {message.from_user.id} (–∞–¥–º–∏–Ω: {is_admin})")
            
        except Exception as e:
            logger.error(f"‚ùå /help: {e}")
            await message.reply("üìñ –°–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    @router.message(Command(commands=['karma']))
    async def karma_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            user_id = message.from_user.id
            chat_id = message.chat.id
            user_name = safe_escape(message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            karma_data = get_karma(user_id, chat_id)
            
            level_info = {
                1: {"name": "–ù–æ–≤–∏—á–æ–∫", "emoji": "üå±"},
                2: {"name": "–ó–Ω–∞–∫–æ–º—ã–π", "emoji": "‚≠ê"},
                3: {"name": "–ê–∫—Ç–∏–≤–Ω—ã–π", "emoji": "üî•"},
                4: {"name": "–û–ø—ã—Ç–Ω—ã–π", "emoji": "üî•"},
                5: {"name": "–≠–∫—Å–ø–µ—Ä—Ç", "emoji": "üíé"},
                8: {"name": "–ì—É—Ä—É", "emoji": "üíé"},
                10: {"name": "–ú–∞—Å—Ç–µ—Ä", "emoji": "üëë"},
                15: {"name": "–ó–≤–µ–∑–¥–∞", "emoji": "‚≠ê"},
                20: {"name": "–õ–µ–≥–µ–Ω–¥–∞", "emoji": "üèÜ"}
            }
            
            level = karma_data['level']
            karma_value = karma_data['karma']
            messages_count = karma_data.get('messages_count', 0)
            
            current_level = level_info.get(level, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "emoji": "‚ùì"})
            
            text = (
                f"‚öñÔ∏è **–ö–ê–†–ú–ê {user_name}**\n\n"
                f"üî• **–ö–∞—Ä–º–∞:** {karma_value}\n"
                f"{current_level['emoji']} **–£—Ä–æ–≤–µ–Ω—å:** {current_level['name']} (lvl {level})\n"
                f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {messages_count}\n\n"
                f"üí° **–ö–∞—Ä–º–∞ —Ä–∞—Å—Ç–µ—Ç –∑–∞ –ø–æ–∑–∏—Ç–∏–≤, –ø–∞–¥–∞–µ—Ç –∑–∞ –Ω–µ–≥–∞—Ç–∏–≤**\n"
                f"üì± **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä–º–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ª–∏—á–∫—É**"
            )
            
            await message.reply(text)
            logger.info(f"‚úÖ KARMA /karma: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /karma: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä–º—ã")
    
    @router.message(Command(commands=['karma_help']))
    async def karma_help_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            help_text = (
                "‚öñÔ∏è **–ö–ê–ö –í–õ–ò–Ø–¢–¨ –ù–ê –ö–ê–†–ú–£ –î–†–£–ì–ò–•**\n\n"
                "üéØ **–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
                "‚úÖ **–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—Ä–º—É (+3 –¥–æ +6):**\n"
                "‚Ä¢ `+1`, `–ø–ª—é—Å`, `–ª–∞–π–∫`\n"
                "‚Ä¢ `—Å–ø–∞—Å–∏–±–æ`, `–±–ª–∞–≥–æ–¥–∞—Ä—é`\n"
                "‚Ä¢ `–∫—Ä—É—Ç–æ`, `–∫–ª–∞—Å—Å`, `–æ—Ç–ª–∏—á–Ω–æ`, `—Å—É–ø–µ—Ä`\n"
                "‚Ä¢ `–º–æ–ª–æ–¥–µ—Ü`, `—Ö–æ—Ä–æ—à–æ`, `–±—Ä–∞–≤–æ`, `—Ä–µ—Å–ø–µ–∫—Ç`\n\n"
                "‚ùå **–£–º–µ–Ω—å—à–∏—Ç—å –∫–∞—Ä–º—É (-3 –¥–æ -6):**\n"
                "‚Ä¢ `-1`, `–º–∏–Ω—É—Å`, `–¥–∏–∑–ª–∞–π–∫`\n"
                "‚Ä¢ `–ø–ª–æ—Ö–æ`, `—Ö–µ—Ä–Ω—è`, `—Ñ–∏–≥–Ω—è`\n"
                "‚Ä¢ `–æ—Ç—Å—Ç–æ–π`, `—Ñ—É—Ñ–ª–æ`\n\n"
                "üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                "1Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "2Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
                "3Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É\n\n"
                "‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞:**\n"
                "‚Ä¢ –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç +3 –¥–æ +6 / -3 –¥–æ -6\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ª–∏—á–∫—É\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è"
            )
            
            await message.reply(help_text)
            logger.info(f"‚úÖ KARMA /karma_help: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /karma_help: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞—Ä–º–µ")
    
    @router.message(Command(commands=['be']))
    async def be_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            if not await check_admin(message, "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"):
                return
            
            command_args = message.text.split(' ', 1)
            if len(command_args) < 2:
                await message.reply("üé≠ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/be –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`")
                return
            
            description = command_args[1].strip()
            
            if len(description) < 5:
                await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
                return
            
            chat_id = message.chat.id
            words = description.split()[:2]
            persona_name = ' '.join(words).title()
            
            GLOBAL_PERSONAS[chat_id] = {
                'name': persona_name,
                'description': description,
                'created_by': message.from_user.id,
                'created_at': datetime.now().isoformat()
            }
            
            save_data()
            
            response = (
                f"üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"**–ò–º—è:** {safe_escape(persona_name)}\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {safe_escape(description[:200])}\n\n"
                f"üéØ **–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞**"
            )
            
            await message.reply(response)
            logger.info(f"‚úÖ KARMA /be: {message.from_user.id} - {persona_name}")
                
        except Exception as e:
            logger.error(f"‚ùå /be: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    
    @router.message(Command(commands=['persona']))
    async def persona_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            chat_id = message.chat.id
            
            if chat_id in GLOBAL_PERSONAS:
                persona = GLOBAL_PERSONAS[chat_id]
                
                response = (
                    f"üé≠ **–ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂**\n\n"
                    f"**–ò–º—è:** {safe_escape(persona['name'])}\n"
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {safe_escape(persona['description'][:200])}\n\n"
                    f"üéØ **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"
                )
                
            else:
                response = (
                    "ü§∑‚Äç‚ôÇÔ∏è **–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                    "üé≠ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/be –æ–ø–∏—Å–∞–Ω–∏–µ`\n"
                    "üëë –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å"
                )
            
            await message.reply(response)
            logger.info(f"‚úÖ KARMA /persona: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /persona: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    
    @router.message(Command(commands=['flip']))
    async def flip_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            result = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])
            emoji = "ü¶Ö" if result == "–æ—Ä–µ–ª" else "üëë"
            await message.reply(f"ü™ô **–ú–æ–Ω–µ—Ç–∞:** {emoji} **{result.upper()}!**")
            logger.info(f"‚úÖ KARMA /flip: {message.from_user.id} - {result}")
            
        except Exception as e:
            logger.error(f"‚ùå /flip: {e}")
            await message.reply("ü™ô –û—à–∏–±–∫–∞ –º–æ–Ω–µ—Ç—ã")
    
    @router.message(Command(commands=['dice']))
    async def dice_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            result = random.randint(1, 6)
            await message.reply(f"üé≤ **–ö—É–±–∏–∫:** {result}")
            logger.info(f"‚úÖ KARMA /dice: {message.from_user.id} - {result}")
            
        except Exception as e:
            logger.error(f"‚ùå /dice: {e}")
            await message.reply("üé≤ –û—à–∏–±–∫–∞ –∫—É–±–∏–∫–∞")
    
    @router.message(Command(commands=['joke']))
    async def joke_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            jokes = [
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 OCT = 25 DEC!",
                "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—å–µ—Ç –∫–æ—Ñ–µ? –°–ø—è—â–∏–π —Ä–µ–∂–∏–º.",
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤.",
                "–î–≤–∞ –±–∞–π—Ç–∞ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —É–ª–∏—Ü–µ. –û–¥–∏–Ω –≥–æ–≤–æ—Ä–∏—Ç: '–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –∫–∞–∫ NULL'.",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—à–µ–ª –≤ –º–∞–≥–∞–∑–∏–Ω. –ñ–µ–Ω–∞ –ø–æ–ø—Ä–æ—Å–∏–ª–∞: '–ö—É–ø–∏ –º–æ–ª–æ–∫–æ, –µ—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –≤–æ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫'. –û–Ω –≤–µ—Ä–Ω—É–ª—Å—è —Å 10 –ø–∞—á–∫–∞–º–∏ –º–æ–ª–æ–∫–∞."
            ]
            
            joke = random.choice(jokes)
            await message.reply(f"üòÑ **–®—É—Ç–∫–∞ –¥–Ω—è:**\n\n{joke}")
            logger.info(f"‚úÖ KARMA /joke: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /joke: {e}")
            await message.reply("üòÖ –®—É—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
    
    @router.message(Command(commands=['fact']))
    async def fact_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            facts = [
                "–ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è. –ê—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤ –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö –≥—Ä–æ–±–Ω–∏—Ü–∞—Ö.",
                "–ë–∞–Ω–∞–Ω - —ç—Ç–æ —è–≥–æ–¥–∞, –∞ –∫–ª—É–±–Ω–∏–∫–∞ - –Ω–µ—Ç.",
                "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–∏–Ω—é—é –∫—Ä–æ–≤—å.",
                "–í–∞—à –º–æ–∑–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–∫–æ–ª–æ 20% –≤—Å–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ª–∞.",
                "Python –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∫–æ–º–µ–¥–∏–π–Ω–æ–≥–æ —à–æ—É '–õ–µ—Ç–∞—é—â–∏–π —Ü–∏—Ä–∫ –ú–æ–Ω—Ç–∏ –ü–∞–π—Ç–æ–Ω–∞'.",
                "–ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –±–∞–≥ –±—ã–ª –Ω–∞—Å—Ç–æ—è—â–∏–º –Ω–∞—Å–µ–∫–æ–º—ã–º, –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –≤ 1947 –≥–æ–¥—É."
            ]
            
            fact = random.choice(facts)
            await message.reply(f"üß† **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**\n\n{fact}")
            logger.info(f"‚úÖ KARMA /fact: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /fact: {e}")
            await message.reply("ü§î –§–∞–∫—Ç –ø–æ—Ç–µ—Ä—è–ª—Å—è")
    
    @router.message(Command(commands=['8ball']))
    async def ball_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            command_args = message.text.split(' ', 1)
            if len(command_args) < 2:
                help_msg = (
                    "üé± **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä**\n\n"
                    "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/8ball –≤–∞—à –≤–æ–ø—Ä–æ—Å?`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "`/8ball –ë—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å?`\n"
                    "`/8ball –°—Ç–æ–∏—Ç –ª–∏ —É—á–∏—Ç—å Python?`"
                )
                await message.reply(help_msg)
                return
            
            question = command_args[1].strip()
            if len(question) < 3:
                await message.reply("‚ùì –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å")
                return
            
            answers = [
                "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ!", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞!", "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è!", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω!",
                "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π!", "–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç!", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ!", "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ!",
                "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ!", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å!", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ!", "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
            ]
            
            answer = random.choice(answers)
            
            response = (
                f"üé± **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç:**\n\n"
                f"**–í–æ–ø—Ä–æ—Å:** {safe_escape(question)}\n\n"
                f"**–û—Ç–≤–µ—Ç:** {answer}"
            )
            
            await message.reply(response)
            logger.info(f"‚úÖ KARMA /8ball: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /8ball: {e}")
            await message.reply("üé± –®–∞—Ä —Å–ª–æ–º–∞–ª—Å—è")
    
    @router.message(Command(commands=['crypto']))
    async def crypto_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            command_args = message.text.split()
            if len(command_args) < 2:
                help_msg = (
                    "‚Çø **–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**\n\n"
                    "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                    "`/crypto BTC` - –∫—É—Ä—Å Bitcoin\n"
                    "`/crypto ETH` - –∫—É—Ä—Å Ethereum\n\n"
                    "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ:** BTC, ETH, BNB, ADA"
                )
                await message.reply(help_msg)
                return
            
            symbol = command_args[1].upper()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
            fake_prices = {
                'BTC': {'price': 43250, 'change': '+2.5%', 'name': 'Bitcoin'},
                'ETH': {'price': 2650, 'change': '+1.8%', 'name': 'Ethereum'},
                'BNB': {'price': 245, 'change': '-0.5%', 'name': 'Binance Coin'},
                'ADA': {'price': 0.38, 'change': '+3.2%', 'name': 'Cardano'}
            }
            
            if symbol in fake_prices:
                data = fake_prices[symbol]
                change_emoji = "üü¢" if '+' in data['change'] else "üî¥"
                
                response = (
                    f"‚Çø **{data['name']} ({symbol})**\n\n"
                    f"üí∞ **–¶–µ–Ω–∞:** ${data['price']:,}\n"
                    f"{change_emoji} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {data['change']}\n\n"
                    f"‚ö†Ô∏è *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*"
                )
                
                await message.reply(response)
            else:
                supported = ", ".join(fake_prices.keys())
                await message.reply(f"‚ùå **–ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è**\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {supported}")
            
            logger.info(f"‚úÖ KARMA /crypto: {message.from_user.id} - {symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå /crypto: {e}")
            await message.reply("‚Çø –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞")
    
    @router.message(Command(commands=['stats']))
    async def stats_handler(message):
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            user_name = safe_escape(message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            user_id = message.from_user.id
            chat_id = message.chat.id
            
            karma_data = get_karma(user_id, chat_id)
            
            if chat_id in chat_stats:
                chat_data = chat_stats[chat_id]
                total_messages = chat_data['messages_count']
                unique_users = len(chat_data['unique_users'])
            else:
                total_messages = 0
                unique_users = 0
            
            response = (
                f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê {user_name}**\n\n"
                f"‚öñÔ∏è **–í–∞—à–∞ –∫–∞—Ä–º–∞:** {karma_data['karma']}\n"
                f"üìù **–í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:** {karma_data.get('messages_count', 0)}\n\n"
                f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:** {total_messages}\n"
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:** {unique_users}\n\n"
            )
            
            if chat_id in GLOBAL_PERSONAS:
                persona = GLOBAL_PERSONAS[chat_id]
                response += f"üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —á–∞—Ç–∞:** {persona['name']}"
            else:
                response += f"üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂:** –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            await message.reply(response)
            logger.info(f"‚úÖ KARMA /stats: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /stats: {e}")
            await message.reply("üìä –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    @router.message(Command(commands=['debug']))
    async def debug_handler(message):
        try:
            if not await check_admin(message, "–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                return
            await update_stats(message)
            
            debug_info = (
                f"üîß **KARMA DEBUG v9.0**\n\n"
                f"ü§ñ **–ë–æ—Ç:** @{bot_info.username if bot_info else '?'}\n"
                f"üíª **–†–µ–∂–∏–º:** {'Ultimate' if is_ultimate_mode else '–ë–∞–∑–æ–≤—ã–π'}\n"
                f"üß† **AI:** {'‚úÖ' if modules.get('ai') else '‚ùå'}\n\n"
                f"üìä **–î–ê–ù–ù–´–ï:**\n"
                f"üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π:** {len(GLOBAL_PERSONAS)}\n"
                f"‚öñÔ∏è **–ó–∞–ø–∏—Å–µ–π –∫–∞—Ä–º—ã:** {len(GLOBAL_KARMA)}\n"
                f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:** {len(chat_stats)}\n\n"
                f"üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"‚öñÔ∏è **Karma Edition v9.0 —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–Ω–∞!**"
            )
            
            await message.reply(debug_info)
            logger.info(f"‚úÖ KARMA /debug: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /debug: {e}")
            await message.reply("üîß –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏")
    
    
    @router.message(Command(commands=['wake_words']))
    async def wake_words_handler(message):
        """üìù –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞"""
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            chat_id = message.chat.id
            current_words = get_trigger_words(chat_id)
            is_custom = chat_id in CUSTOM_TRIGGER_WORDS
            
            words_text = "`, `".join(current_words)
            
            response = (
                f"üî§ **–°–õ–û–í–ê –ü–†–ò–ó–´–í–ê –ß–ê–¢–ê**"
                f"üìã **–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞:** `{words_text}`"
                f"üéØ **–°—Ç–∞—Ç—É—Å:** {'üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ' if is_custom else 'üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ'}"
                f"üìä **–í—Å–µ–≥–æ —Å–ª–æ–≤:** {len(current_words)}"
                f"üí° **–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —ç—Ç–∏ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö**"
                f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):**"
                f"‚Ä¢ `/wake_add —Å–ª–æ–≤–æ` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
                f"‚Ä¢ `/wake_remove —Å–ª–æ–≤–æ` - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
                f"‚Ä¢ `/wake_reset` - —Å–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"
                f"‚Ä¢ `/wake_help` - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
                )
            
            await message.reply(response)
            logger.info(f"‚úÖ WAKE /wake_words: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /wake_words: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞")
    
    @router.message(Command(commands=['wake_add']))
    async def wake_add_handler(message):
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            if not await check_admin(message, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞"):
                return
            
            command_args = message.text.split(' ', 1)
            if len(command_args) < 2:
                help_msg = (
                    "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞**"
                    "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**"
                    "`/wake_add –Ω–æ–≤–æ–µ_—Å–ª–æ–≤–æ`"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**"
                    "`/wake_add —á–∞—Ç`"
                    "`/wake_add ai`"
                    "`/wake_add –ø—Ä–∏–≤–µ—Ç`"
                    "‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞:**"
                    "‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∑–∞ —Ä–∞–∑"
                    "‚Ä¢ –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º"
                    "‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
                )
                await message.reply(help_msg)
                return
            
            new_word = command_args[1].strip().lower()
            
            if len(new_word) < 2:
                await message.reply("‚ùå **–°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ**–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
                return
            
            if len(new_word) > 20:
                await message.reply("‚ùå **–°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**–ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            if not new_word.replace('_', '').replace('-', '').isalnum():
                await message.reply("‚ùå **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã**–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -")
                return
            
            chat_id = message.chat.id
            
            result = add_trigger_word(chat_id, new_word)
            
            if result == "limit":
                await message.reply("‚ùå **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–ª–æ–≤**–ú–∞–∫—Å–∏–º—É–º 50 —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞ –Ω–∞ —á–∞—Ç")
            elif result:
                current_words = get_trigger_words(chat_id)
                
                response = (
                    f"‚úÖ **–°–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**"
                    f"üÜï **–î–æ–±–∞–≤–ª–µ–Ω–æ:** `{new_word}`"
                    f"üìä **–í—Å–µ–≥–æ —Å–ª–æ–≤:** {len(current_words)}"
                    f"üí° **–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ**"
                    )
                
                await message.reply(response)
                logger.info(f"‚úÖ WAKE –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ {new_word} –≤ —á–∞—Ç {chat_id}")
            else:
                await message.reply(f"‚ö†Ô∏è **–°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç**–°–ª–æ–≤–æ `{new_word}` —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞")
            
        except Exception as e:
            logger.error(f"‚ùå /wake_add: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞")
    
    @router.message(Command(commands=['wake_remove']))
    async def wake_remove_handler(message):
        """‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            if not await check_admin(message, "—É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞"):
                return
            
            command_args = message.text.split(' ', 1)
            if len(command_args) < 2:
                help_msg = (
                    "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞**"
                    "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**"
                    "`/wake_remove —Å–ª–æ–≤–æ_–¥–ª—è_—É–¥–∞–ª–µ–Ω–∏—è`"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**"
                    "`/wake_remove —á–∞—Ç`"
                    "`/wake_remove ai`"
                    "üí° **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞:** `/wake_words`"
                    )
                await message.reply(help_msg)
                return
            
            word_to_remove = command_args[1].strip().lower()
            chat_id = message.chat.id
            
            current_words = get_trigger_words(chat_id)
            
            if word_to_remove not in current_words:
                words_text = "`, `".join(current_words)
                await message.reply(f"‚ùå **–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**–°–ª–æ–≤–∞ `{word_to_remove}` –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ**–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞:** `{words_text}`")
                return
            
            if remove_trigger_word(chat_id, word_to_remove):
                updated_words = get_trigger_words(chat_id)
                
                response = (
                    f"‚úÖ **–°–ª–æ–≤–æ –ø—Ä–∏–∑—ã–≤–∞ —É–¥–∞–ª–µ–Ω–æ!**"
                    f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ:** `{word_to_remove}`"
                    f"üìä **–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤:** {len(updated_words)}"
                    f"üí° **–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ**"
                    )
                
                await message.reply(response)
                logger.info(f"‚úÖ WAKE —É–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ {word_to_remove} –∏–∑ —á–∞—Ç–∞ {chat_id}")
            else:
                await message.reply("‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è**–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
            
        except Exception as e:
            logger.error(f"‚ùå /wake_remove: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞")
    
    @router.message(Command(commands=['wake_reset']))
    async def wake_reset_handler(message):
        """üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            if not await check_admin(message, "—Å–±—Ä–æ—Å —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞"):
                return
            
            chat_id = message.chat.id
            
            if chat_id not in CUSTOM_TRIGGER_WORDS:
                default_words = "`, `".join(DEFAULT_TRIGGER_WORDS)
                await message.reply(f"‚ÑπÔ∏è **–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞****–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ:** `{default_words}`")
                return
            
            reset_trigger_words(chat_id)
            
            default_words = "`, `".join(DEFAULT_TRIGGER_WORDS)
            
            response = (
                f"üîÑ **–°–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ —Å–±—Ä–æ—à–µ–Ω—ã!**"
                f"üì¶ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞:**"
                f"`{default_words}`"
                f"üìä **–í—Å–µ–≥–æ —Å–ª–æ–≤:** {len(DEFAULT_TRIGGER_WORDS)}"
                f"üí° **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã**"
                )
            
            await message.reply(response)
            logger.info(f"‚úÖ WAKE —Å–±—Ä–æ—à–µ–Ω—ã —Å–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ –≤ —á–∞—Ç–µ {chat_id}")
            
        except Exception as e:
            logger.error(f"‚ùå /wake_reset: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–ª–æ–≤ –ø—Ä–∏–∑—ã–≤–∞")
    
    @router.message(Command(commands=['wake_help']))
    async def wake_help_handler(message):
        """‚ùì –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º –ø—Ä–∏–∑—ã–≤–∞"""
        try:
            if not await check_access(message):
                return
            await update_stats(message)
            
            help_text = (
                "üî§ **–°–ò–°–¢–ï–ú–ê –°–õ–û–í –ü–†–ò–ó–´–í–ê**"
                "üéØ **–ß—Ç–æ —ç—Ç–æ:**"
                "–°–ª–æ–≤–∞ –ø—Ä–∏–∑—ã–≤–∞ - —ç—Ç–æ —Å–ª–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ AI."
                "üì¶ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞:**"
                "`–±–æ—Ç`, `bot`, `—Ä–æ–±–æ—Ç`, `–ø–æ–º–æ—â–Ω–∏–∫`, `assistant`, `—ç–π`, `—Å–ª—É—à–∞–π`, `–º–∞–∫—Å`"
                "üë• **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:**"
                "‚Ä¢ `/wake_words` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞"
                "üëë **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:**"
                "‚Ä¢ `/wake_add —Å–ª–æ–≤–æ` - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"
                "‚Ä¢ `/wake_remove —Å–ª–æ–≤–æ` - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
                "‚Ä¢ `/wake_reset` - —Å–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"
                "‚Ä¢ `/wake_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
                "üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**"
                "‚Ä¢ `–≠–π, –∫–∞–∫ –¥–µ–ª–∞?` - –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç"
                "‚Ä¢ `–ë–æ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É` - –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç"
                "‚Ä¢ `–ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ` - –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç"
                "‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞:**"
                "‚Ä¢ –°–ª–æ–≤–∞ –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–ª–æ–≤ –Ω–∞ —á–∞—Ç"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"
                "üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞:**"
                "‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @–∏–º—è_–±–æ—Ç–∞"
                "‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"
                "‚Ä¢ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç)"
                )
            
            await message.reply(help_text)
            logger.info(f"‚úÖ WAKE /wake_help: {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå /wake_help: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º –ø—Ä–∏–∑—ã–≤–∞")

    # AI –û–ë–†–ê–ë–û–¢–ß–ò–ö
    
    @router.message(F.text & ~F.text.startswith("/"))
    async def ai_handler(message):
        try:
            await update_stats(message)
            
            if not await check_access(message):
                return
            
            text_lower = message.text.lower()
            should_respond = False
            
            # –£—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç–∞
            if message.reply_to_message and message.reply_to_message.from_user.id == modules['bot'].id:
                should_respond = True
                logger.info("‚úÖ KARMA –†–ï–ü–õ–ê–ô")
            elif any(word in text_lower for word in get_trigger_words(message.chat.id)):
                matched_word = next((word for word in get_trigger_words(message.chat.id) if word in text_lower), "")
                should_respond = True
                logger.info(f"‚úÖ KARMA –°–õ–û–í–û –ü–†–ò–ó–´–í–ê: {matched_word}")
            elif bot_info and f'@{bot_info.username.lower()}' in text_lower:
                should_respond = True
                logger.info("‚úÖ KARMA –£–ü–û–ú–ò–ù–ê–ù–ò–ï")
            elif message.chat.type == 'private':
                should_respond = True
                logger.info("‚úÖ KARMA –õ–ò–ß–ù–´–ô –ß–ê–¢")
            
            if should_respond:
                logger.info("üß† KARMA –ó–ê–ü–£–°–ö AI")
                
                ai_service = modules.get('ai')
                
                if ai_service is None:
                    try:
                        from app.services.ai_service import AIService
                        ai_service = AIService(modules['config'])
                        logger.info("‚úÖ KARMA AI —Å–æ–∑–¥–∞–Ω")
                    except Exception as e:
                        logger.error(f"‚ùå KARMA AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                        await message.reply("‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        return
                
                # –ü–µ—Ä—Å–æ–Ω–∞–∂
                chat_id = message.chat.id
                active_personality = GLOBAL_PERSONAS.get(chat_id)
                
                if active_personality:
                    persona_name = active_personality['name']
                    persona_desc = active_personality['description']
                    
                    prompt = f"""–¢—ã - {persona_name}. {persona_desc}

–û—Ç–≤–µ—á–∞–π –≤ —Ä–æ–ª–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.
–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –∂–∏–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}
–û—Ç–≤–µ—Ç:"""
                    
                    logger.info(f"üé≠ KARMA –ü–ï–†–°–û–ù–ê–ñ: {persona_name}")
                    
                else:
                    prompt = f"""–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫.

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.
–ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}
–û—Ç–≤–µ—Ç:"""
                    
                    logger.info("ü§ñ KARMA –û–ë–´–ß–ù–´–ô AI")
                
                try:
                    if hasattr(ai_service, 'generate_response'):
                        response = await ai_service.generate_response(prompt)
                    elif hasattr(ai_service, 'ask'):
                        response = await ai_service.ask(prompt)
                    else:
                        response = None
                    
                    if response and str(response).strip():
                        await message.reply(str(response).strip())
                        logger.info("‚úÖ KARMA AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        return
                        
                except Exception as e:
                    logger.error(f"üí• KARMA AI –æ—à–∏–±–∫–∞: {e}")
                
                # Fallback
                if active_personality:
                    fallbacks = ["–•–º...", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...", "–ê?", "–ß—Ç–æ?"]
                else:
                    fallbacks = ["–î–∞!", "–°–ª—ã—à—É!", "–ü—Ä–∏–≤–µ—Ç!", "–û–∫–µ–π!"]
                
                await message.reply(random.choice(fallbacks))
                logger.info("‚úÖ KARMA Fallback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"üí• KARMA AI handler –æ—à–∏–±–∫–∞: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    dp.include_router(router)
    
    logger.info(f"üéõÔ∏è KARMA –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({'Ultimate' if is_ultimate_mode else 'Base'})")
    
    commands = [
        "/start", "/help", "/karma", "/karma_help", "/be", "/persona", "/flip", "/dice", 
        "/joke", "/fact", "/8ball", "/crypto", "/stats", "/debug", "/wake_words", 
        "/wake_add", "/wake_remove", "/wake_reset", "/wake_help"
        ]
    
    logger.info(f"üìã KARMA –∫–æ–º–∞–Ω–¥—ã: {', '.join(commands)}")
