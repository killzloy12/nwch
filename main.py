#!/usr/bin/env python3
"""
üíÄ ENHANCED TELEGRAM BOT v3.0 - –ü–†–û–°–¢–û–ô –ó–ê–ü–£–°–ö
üî• –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Ultimate Edition
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from config_harsh import load_config
    from database import DatabaseService
except ImportError as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å {e.name}")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã config_harsh.py –∏ database.py")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(1)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
modules_available = False
try:
    from app.services.ai_service import AIService
    from app.services.analytics_service import AnalyticsService
    from app.services.crypto_service import CryptoService
    modules_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

# –°–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∫–∞—Ä–º—ã
personality_system_available = False
karma_system_available = False

try:
    from app.modules.custom_personality_system import CustomPersonalityManager
    personality_system_available = True
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞–π–¥–µ–Ω–∞!")
except ImportError as e:
    print(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

try:
    from app.modules.karma_system import KarmaManager
    karma_system_available = True
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –Ω–∞–π–¥–µ–Ω–∞!")
except ImportError as e:
    print(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
handlers_available = False
try:
    from app.handlers.handlers_v3_fixed import register_all_handlers
    handlers_available = True
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
except ImportError:
    try:
        from app.handlers.handlers_v3_simple import register_all_handlers
        handlers_available = True
        print("‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def setup_bot_commands(bot: Bot):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="be", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand(command="reset_persona", description="–°–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand(command="current_persona", description="–¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂"),
        BotCommand(command="karma", description="–ú–æ—è –∫–∞—Ä–º–∞"),
    ]

    await bot.set_my_commands(commands)
    logger.info("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


async def main():
    """üíÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""

    print("üé≠ ENHANCED TELEGRAM BOT v3.0 - –ë–ê–ó–û–í–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 50)

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = ['data/logs', 'data/backups', 'app/services', 'app/modules', 'app/handlers']
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler('data/logs/bot.log', encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logging.getLogger().addHandler(file_handler)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()

        if not config.bot.token:
            print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
            return

        if not config.bot.admin_ids:
            print("‚ùå –û–®–ò–ë–ö–ê: ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env!")
            return

        print(f"üëë –ê–î–ú–ò–ù–´: {config.bot.admin_ids}")
        if config.bot.allowed_chat_ids:
            print(f"üîí –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´: {config.bot.allowed_chat_ids}")

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(
            token=config.bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )

        dp = Dispatcher(storage=MemoryStorage())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        bot_info = await bot.get_me()
        print(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_service = DatabaseService(config.database)
        await db_service.initialize()

        # –°–ª–æ–≤–∞—Ä—å –º–æ–¥—É–ª–µ–π
        modules = {
            'config': config,
            'db': db_service,
            'bot': bot
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        if modules_available:
            print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
            try:
                modules['ai'] = AIService(config)
                print("  ‚úÖ AI —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            except Exception:
                print("  ‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            try:
                modules['analytics_service'] = AnalyticsService(db_service)
                print("  ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception:
                print("  ‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            try:
                modules['crypto_service'] = CryptoService(config)
                print("  ‚úÖ –ö—Ä–∏–ø—Ç–æ —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            except Exception:
                print("  ‚ùå –ö—Ä–∏–ø—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if personality_system_available:
            print("üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
            modules['custom_personality_manager'] = CustomPersonalityManager(
                db_service, config, modules.get('ai')
            )
            await modules['custom_personality_manager'].initialize()
            print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≥–æ—Ç–æ–≤–∞")

        # –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã
        if karma_system_available:
            print("‚öñÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã...")
            modules['karma_manager'] = KarmaManager(db_service, config)
            await modules['karma_manager'].initialize()
            print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã –≥–æ—Ç–æ–≤–∞")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if handlers_available:
            print("üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            register_all_handlers(dp, modules)
            print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        await setup_bot_commands(bot)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in config.bot.admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    f"üé≠ <b>ENHANCED BOT v3.0 –ó–ê–ü–£–©–ï–ù!</b>\n\n"
                    f"<b>–ë–æ—Ç:</b> @{bot_info.username}\n"
                    f"<b>–†–µ–∂–∏–º:</b> –ë–∞–∑–æ–≤—ã–π\n"
                    f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:</b> {'‚úÖ' if personality_system_available else '‚ùå'}\n"
                    f"<b>–ö–∞—Ä–º–∞:</b> {'‚úÖ' if karma_system_available else '‚ùå'}\n\n"
                    f"<b>–ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!</b>"
                )
                print(f"  üì§ –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω: {admin_id}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {admin_id}: {e}")

        print("\n" + "=" * 50)
        print("üé≠ ENHANCED BOT v3.0 –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")

        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot, skip_updates=True)

    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí• –û–®–ò–ë–ö–ê: {e}")
    finally:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        try:
            if 'modules' in locals():
                if 'crypto_service' in modules:
                    await modules['crypto_service'].close()
                if 'db' in modules:
                    await modules['db'].close()
            if 'bot' in locals():
                await bot.session.close()
        except Exception:
            pass
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    asyncio.run(main())
