#!/usr/bin/env python3
"""
‚öôÔ∏è CONFIGURATION v3.0 - –ì–†–£–ë–´–ô –°–¢–ò–õ–¨
üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏

–ù–û–í–û–ï:
‚Ä¢ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
‚Ä¢ –ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
"""

import os
import logging
from pathlib import Path
from typing import List
from dataclasses import dataclass, field
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)


@dataclass
class BotConfig:
    """ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    token: str = ""
    admin_ids: List[int] = field(default_factory=list)
    allowed_chat_ids: List[int] = field(default_factory=list)  # –ù–û–í–û–ï: —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    random_reply_chance: float = 0.01  # –ú–∏–Ω–∏–º—É–º
    debug: bool = False
    smart_responses: bool = True
    mention_responses: bool = True
    reply_responses: bool = True


@dataclass
class DatabaseConfig:
    """üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    path: str = "data/bot.db"
    backup_enabled: bool = True
    backup_interval_hours: int = 24
    max_backups: int = 7
    wal_mode: bool = True


@dataclass
class AIConfig:
    """üß† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI"""
    openai_api_key: str = ""
    anthropic_api_key: str = ""
    default_model: str = "gpt-4o-mini"
    daily_limit: int = 1000
    user_limit: int = 50
    temperature: float = 0.3  # –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–µ —á–µ—Ç–∫–æ—Å—Ç–∏
    max_tokens: int = 1024    # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
    context_memory: bool = True
    adaptive_responses: bool = True


@dataclass
class CryptoConfig:
    """‚Çø –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    enabled: bool = True
    coingecko_api_key: str = ""
    cache_ttl_seconds: int = 300
    default_vs_currency: str = "usd"
    trending_limit: int = 5
    price_alerts: bool = False


@dataclass
class ModerationConfig:
    """üõ°Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    enabled: bool = True
    auto_moderation: bool = True
    toxicity_threshold: float = 0.7  # –°—Ç—Ä–æ–∂–µ
    flood_threshold: int = 3         # –°—Ç—Ä–æ–∂–µ
    max_warnings: int = 2            # –ú–µ–Ω—å—à–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    ban_duration_hours: int = 24
    log_actions: bool = True
    delete_spam: bool = True
    ban_for_excessive_warnings: bool = True
    mute_duration_minutes: int = 60  # –î–æ–ª—å—à–µ –º—É—Ç
    admin_immunity: bool = True


@dataclass
class AnalyticsConfig:
    """üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    enabled: bool = True
    track_messages: bool = True
    track_activity: bool = True
    retention_days: int = 365
    detailed_stats: bool = True
    behavior_analysis: bool = True
    export_enabled: bool = True


@dataclass
class TriggersConfig:
    """‚ö° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    enabled: bool = True
    max_triggers_per_user: int = 5    # –ú–µ–Ω—å—à–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
    max_triggers_per_admin: int = 100
    allow_regex: bool = True
    allow_global_triggers: bool = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    cooldown_seconds: int = 2
    max_response_length: int = 500


@dataclass
class PermissionsConfig:
    """üîí –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    enabled: bool = True
    use_whitelist: bool = True    # –í–ö–õ–Æ–ß–ï–ù–û: —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    use_blacklist: bool = True
    strict_mode: bool = True      # –ñ–ï–°–¢–ö–ò–ô –†–ï–ñ–ò–ú
    admin_override: bool = True
    log_access_attempts: bool = True


@dataclass
class SmartResponsesConfig:
    """üß† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    enabled: bool = True
    mention_detection: bool = True
    reply_detection: bool = True
    keyword_detection: bool = True
    question_detection: bool = True
    min_message_length: int = 3
    response_delay_seconds: float = 0.5  # –ë—ã—Å—Ç—Ä–µ–µ


@dataclass
class LoggingConfig:
    """üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level: str = "INFO"
    file_path: str = "data/logs/bot.log"
    max_file_size_mb: int = 10
    backup_count: int = 5
    log_user_messages: bool = False
    log_ai_requests: bool = True
    log_moderation_actions: bool = True
    log_trigger_activations: bool = True
    log_chat_access: bool = True  # –ù–û–í–û–ï: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç–∞–º


@dataclass
class Config:
    """‚öôÔ∏è –ì–ª–∞–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v3.0"""
    bot: BotConfig = field(default_factory=BotConfig)
    database: DatabaseConfig = field(default_factory=DatabaseConfig)
    ai: AIConfig = field(default_factory=AIConfig)
    crypto: CryptoConfig = field(default_factory=CryptoConfig)
    moderation: ModerationConfig = field(default_factory=ModerationConfig)
    analytics: AnalyticsConfig = field(default_factory=AnalyticsConfig)
    triggers: TriggersConfig = field(default_factory=TriggersConfig)
    permissions: PermissionsConfig = field(default_factory=PermissionsConfig)
    smart_responses: SmartResponsesConfig = field(default_factory=SmartResponsesConfig)
    logging: LoggingConfig = field(default_factory=LoggingConfig)


def load_config() -> Config:
    """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    config = Config()
    
    # =================== BOT CONFIG ===================
    config.bot.token = os.getenv("BOT_TOKEN", "")
    
    # –ü–∞—Ä—Å–∏–º admin_ids
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    if admin_ids_str:
        try:
            config.bot.admin_ids = [
                int(admin_id.strip()) 
                for admin_id in admin_ids_str.split(",") 
                if admin_id.strip().isdigit()
            ]
        except ValueError:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å ADMIN_IDS")
    
    # –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–º allowed_chat_ids
    allowed_chats_str = os.getenv("ALLOWED_CHAT_IDS", "")
    if allowed_chats_str:
        try:
            config.bot.allowed_chat_ids = [
                int(chat_id.strip()) 
                for chat_id in allowed_chats_str.split(",") 
                if chat_id.strip().lstrip('-').isdigit()  # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID
            ]
        except ValueError:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å ALLOWED_CHAT_IDS")
    
    config.bot.random_reply_chance = float(os.getenv("RANDOM_REPLY_CHANCE", "0.01"))
    config.bot.debug = os.getenv("DEBUG", "false").lower() == "true"
    config.bot.smart_responses = os.getenv("SMART_RESPONSES", "true").lower() == "true"
    config.bot.mention_responses = os.getenv("MENTION_RESPONSES", "true").lower() == "true"
    config.bot.reply_responses = os.getenv("REPLY_RESPONSES", "true").lower() == "true"
    
    # =================== DATABASE CONFIG ===================
    config.database.path = os.getenv("DATABASE_PATH", "data/bot.db")
    config.database.backup_enabled = os.getenv("DB_BACKUP_ENABLED", "true").lower() == "true"
    config.database.wal_mode = os.getenv("DB_WAL_MODE", "true").lower() == "true"
    
    # =================== AI CONFIG ===================
    config.ai.openai_api_key = os.getenv("OPENAI_API_KEY", "")
    config.ai.anthropic_api_key = os.getenv("ANTHROPIC_API_KEY", "")
    config.ai.default_model = os.getenv("AI_DEFAULT_MODEL", "gpt-4o-mini")
    config.ai.daily_limit = int(os.getenv("AI_DAILY_LIMIT", "1000"))
    config.ai.user_limit = int(os.getenv("AI_USER_LIMIT", "50"))
    config.ai.temperature = float(os.getenv("AI_TEMPERATURE", "0.3"))
    config.ai.max_tokens = int(os.getenv("AI_MAX_TOKENS", "1024"))
    config.ai.context_memory = os.getenv("AI_CONTEXT_MEMORY", "true").lower() == "true"
    config.ai.adaptive_responses = os.getenv("AI_ADAPTIVE_RESPONSES", "true").lower() == "true"
    
    # =================== –û–°–¢–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===================
    config.crypto.enabled = os.getenv("CRYPTO_ENABLED", "true").lower() == "true"
    config.crypto.coingecko_api_key = os.getenv("COINGECKO_API_KEY", "")
    config.crypto.cache_ttl_seconds = int(os.getenv("CRYPTO_CACHE_TTL", "300"))
    
    config.moderation.enabled = os.getenv("MODERATION_ENABLED", "true").lower() == "true"
    config.moderation.auto_moderation = os.getenv("AUTO_MODERATION", "true").lower() == "true"
    config.moderation.toxicity_threshold = float(os.getenv("TOXICITY_THRESHOLD", "0.7"))
    config.moderation.flood_threshold = int(os.getenv("FLOOD_THRESHOLD", "3"))
    config.moderation.max_warnings = int(os.getenv("MAX_WARNINGS", "2"))
    
    config.permissions.enabled = os.getenv("PERMISSIONS_ENABLED", "true").lower() == "true"
    config.permissions.use_whitelist = os.getenv("USE_WHITELIST", "true").lower() == "true"
    config.permissions.strict_mode = os.getenv("STRICT_MODE", "true").lower() == "true"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        Path(config.database.path).parent,
        Path(config.logging.file_path).parent,
        Path("data/charts"),
        Path("data/exports"), 
        Path("data/backups"),
        Path("data/triggers"),
        Path("data/moderation")
    ]
    
    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if config.bot.allowed_chat_ids:
        logger.info(f"üîí –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´: {config.bot.allowed_chat_ids}")
        print(f"üíÄ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –¢–û–õ–¨–ö–û –í –ß–ê–¢–ê–•: {config.bot.allowed_chat_ids}")
    else:
        logger.warning("‚ö†Ô∏è –ù–ï–¢ –†–ê–ó–†–ï–®–ï–ù–ù–´–• –ß–ê–¢–û–í - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ ALLOWED_CHAT_IDS")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï –£–ö–ê–ó–ê–ù–´ –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´")
    
    if config.bot.admin_ids:
        logger.info(f"üëë –ê–î–ú–ò–ù–´: {config.bot.admin_ids}")
        print(f"üëë –ê–î–ú–ò–ù–´ –ë–û–¢–ê: {config.bot.admin_ids}")
    else:
        logger.warning("‚ö†Ô∏è –ù–ï–¢ –ê–î–ú–ò–ù–û–í - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v3.0 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ì–†–£–ë–´–ô –†–ï–ñ–ò–ú)")
    
    return config


def create_example_env() -> str:
    """üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ .env —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä—É–±–æ–≥–æ –±–æ—Ç–∞"""
    
    return """# Enhanced Telegram Bot v3.0 - –ì—Ä—É–±—ã–π —Ä–µ–∂–∏–º
# ============================================

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
BOT_TOKEN=your_bot_token_from_BotFather
ADMIN_IDS=your_telegram_id,another_admin_id

# –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´ (–ù–û–í–û–ï!)
ALLOWED_CHAT_IDS=-1001234567890,-1001234567891,1093943977

# AI –°–ï–†–í–ò–°–´
OPENAI_API_KEY=your_openai_api_key
ANTHROPIC_API_KEY=your_anthropic_api_key
AI_DEFAULT_MODEL=gpt-4o-mini
AI_TEMPERATURE=0.3
AI_MAX_TOKENS=1024

# –ì–†–£–ë–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
RANDOM_REPLY_CHANCE=0.01
STRICT_MODE=true
USE_WHITELIST=true

# –ú–û–î–ï–†–ê–¶–ò–Ø (–ñ–ï–°–¢–ß–ï)
AUTO_MODERATION=true
TOXICITY_THRESHOLD=0.7
FLOOD_THRESHOLD=3
MAX_WARNINGS=2

# –¢–†–ò–ì–ì–ï–†–´ (–û–ì–†–ê–ù–ò–ß–ï–ù–ù–û)
TRIGGERS_ENABLED=true
MAX_TRIGGERS_PER_USER=5

# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
LOG_LEVEL=INFO
LOG_CHAT_ACCESS=true
"""


if __name__ == "__main__":
    config = load_config()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞
    env_example = create_example_env()
    with open(".env.example", "w", encoding="utf-8") as f:
        f.write(env_example)
    
    print("\nüìù –°–æ–∑–¥–∞–Ω .env.example —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥—Ä—É–±–æ–≥–æ –±–æ—Ç–∞")
    print("\nüíÄ –ù–ê–°–¢–†–û–ô–¢–ï ALLOWED_CHAT_IDS –í .env –§–ê–ô–õ–ï!")