version: '3.8'

services:
  enhanced-bot:
    build: .
    container_name: enhanced_telegram_bot_v3
    restart: unless-stopped

    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_IDS=${ADMIN_IDS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATABASE_URL=postgresql://bot_user:${POSTGRES_PASSWORD}@postgres:5432/telegram_bot
      - SMART_RESPONSES=true
      - TRIGGERS_ENABLED=true
      - AUTO_MODERATION=true
      - LOG_LEVEL=INFO

    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups

    depends_on:
      - postgres
      - redis

    networks:
      - bot_network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: bot_postgres
    restart: unless-stopped

    environment:
      POSTGRES_DB: telegram_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups

    networks:
      - bot_network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d telegram_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: bot_redis
    restart: unless-stopped

    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

    volumes:
      - redis_data:/data

    networks:
      - bot_network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Опционально: Nginx для веб-интерфейса
  nginx:
    image: nginx:alpine
    container_name: bot_nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro

    depends_on:
      - enhanced-bot

    networks:
      - bot_network

  # Мониторинг с Grafana (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: bot_grafana
    restart: unless-stopped

    ports:
      - "3000:3000"

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

    volumes:
      - grafana_data:/var/lib/grafana

    networks:
      - bot_network

networks:
  bot_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 
  grafana_data:
