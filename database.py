#!/usr/bin/env python3
"""
üíæ DATABASE SERVICE v3.0 - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã, –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–±–ª–∏—Ü—ã

–§–ò–ù–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –£–±—Ä–∞–Ω—ã –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
"""

import asyncio
import logging
import sqlite3
import aiosqlite
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from pathlib import Path
import json

logger = logging.getLogger(__name__)


class DatabaseService:
    """üíæ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config):
        self.config = config
        self.db_path = config.path
        self.connection = None
        logger.info("üíæ DatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
            self.connection = await aiosqlite.connect(
                self.db_path,
                timeout=30.0
            )
            
            # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if self.config.wal_mode:
                await self.connection.execute("PRAGMA journal_mode=WAL")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self.connection.execute("PRAGMA foreign_keys=ON")
            await self.connection.execute("PRAGMA cache_size=-2000")
            await self.connection.execute("PRAGMA synchronous=NORMAL")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await self._create_tables()
            await self._create_indexes()
            
            logger.info("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def close(self):
        """üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.connection:
                await self.connection.close()
                logger.info("üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    async def _create_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        tables = [
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                full_name TEXT,
                language_code TEXT,
                is_premium BOOLEAN DEFAULT FALSE,
                is_bot BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # –ß–∞—Ç—ã
            """
            CREATE TABLE IF NOT EXISTS chats (
                id INTEGER PRIMARY KEY,
                type TEXT NOT NULL,
                title TEXT,
                username TEXT,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô (–ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê)
            """
            CREATE TABLE IF NOT EXISTS chat_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                full_name TEXT,
                text TEXT,
                message_type TEXT DEFAULT 'text',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            """
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message_id INTEGER,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                text TEXT,
                message_type TEXT DEFAULT 'text',
                reply_to_message_id INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            """
            CREATE TABLE IF NOT EXISTS user_actions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                action TEXT NOT NULL,
                details TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            """
            CREATE TABLE IF NOT EXISTS system_settings (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL,
                updated_by INTEGER,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            """
            CREATE TABLE IF NOT EXISTS ai_interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                prompt TEXT NOT NULL,
                response TEXT,
                model_used TEXT,
                tokens_used INTEGER,
                response_time REAL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
            """
            CREATE TABLE IF NOT EXISTS memory_contexts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                context_key TEXT NOT NULL,
                context_value TEXT NOT NULL,
                expires_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –¢—Ä–∏–≥–≥–µ—Ä—ã
            """
            CREATE TABLE IF NOT EXISTS triggers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                user_id INTEGER NOT NULL,
                trigger_text TEXT NOT NULL,
                response_text TEXT NOT NULL,
                is_regex BOOLEAN DEFAULT FALSE,
                is_global BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE,
                usage_count INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è - –±–∞–Ω—ã
            """
            CREATE TABLE IF NOT EXISTS bans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                admin_id INTEGER NOT NULL,
                reason TEXT,
                ban_type TEXT DEFAULT 'permanent',
                expires_at DATETIME,
                is_active BOOLEAN DEFAULT TRUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id),
                FOREIGN KEY (admin_id) REFERENCES users (id)
            )
            """,
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            """
            CREATE TABLE IF NOT EXISTS warnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                admin_id INTEGER NOT NULL,
                reason TEXT,
                severity_level INTEGER DEFAULT 1,
                is_active BOOLEAN DEFAULT TRUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id),
                FOREIGN KEY (admin_id) REFERENCES users (id)
            )
            """,
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            """
            CREATE TABLE IF NOT EXISTS behavior_patterns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                pattern_type TEXT NOT NULL,
                pattern_data TEXT NOT NULL,
                confidence REAL DEFAULT 0.0,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            """
        ]
        
        for table_sql in tables:
            try:
                await self.connection.execute(table_sql)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        
        await self.connection.commit()
        logger.info("üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    async def _create_indexes(self):
        """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        indexes = [
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            "CREATE INDEX IF NOT EXISTS idx_chat_logs_user ON chat_logs(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_chat_logs_chat ON chat_logs(chat_id, timestamp)",
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            "CREATE INDEX IF NOT EXISTS idx_messages_user ON messages(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_messages_chat ON messages(chat_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_user_actions_user ON user_actions(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_ai_interactions_user ON ai_interactions(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_memory_contexts_user ON memory_contexts(user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_triggers_active ON triggers(is_active, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_bans_active ON bans(is_active, user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_warnings_active ON warnings(is_active, user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_behavior_user ON behavior_patterns(user_id, pattern_type)"
        ]
        
        for index_sql in indexes:
            try:
                await self.connection.execute(index_sql)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        await self.connection.commit()
        logger.info("üöÄ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # =================== –û–°–ù–û–í–ù–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò ===================
    
    async def execute(self, query: str, params: tuple = None):
        """‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if params:
                await self.connection.execute(query, params)
            else:
                await self.connection.execute(query)
            await self.connection.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    async def fetch_one(self, query: str, params: tuple = None):
        """üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            if params:
                cursor = await self.connection.execute(query, params)
            else:
                cursor = await self.connection.execute(query)
            
            row = await cursor.fetchone()
            if row:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                columns = [description[0] for description in cursor.description]
                return dict(zip(columns, row))
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    async def fetch_all(self, query: str, params: tuple = None):
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            if params:
                cursor = await self.connection.execute(query, params)
            else:
                cursor = await self.connection.execute(query)
            
            rows = await cursor.fetchall()
            if rows:
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            return []
    
    # =================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===================
    
    async def save_user(self, user_data: Dict[str, Any]) -> bool:
        """üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO users 
                (id, username, first_name, last_name, full_name, language_code, is_premium, is_bot, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_data['id'],
                user_data.get('username'),
                user_data.get('first_name'),
                user_data.get('last_name'),
                user_data.get('full_name'),
                user_data.get('language_code'),
                user_data.get('is_premium', False),
                user_data.get('is_bot', False),
                datetime.now()
            ))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def save_chat(self, chat_data: Dict[str, Any]) -> bool:
        """üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–∞"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO chats 
                (id, type, title, username, description, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                chat_data['id'],
                chat_data['type'],
                chat_data.get('title'),
                chat_data.get('username'),
                chat_data.get('description'),
                datetime.now()
            ))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    # =================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô (–ù–û–í–û–ï) ===================
    
    async def log_message(self, chat_id: int, user_id: int, username: str, full_name: str, 
                          text: str, message_type: str = 'text', timestamp=None):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if timestamp is None:
            timestamp = datetime.now()
        
        try:
            await self.connection.execute("""
                INSERT INTO chat_logs (chat_id, user_id, username, full_name, text, message_type, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (chat_id, user_id, username, full_name, text, message_type, timestamp))
            
            await self.connection.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def get_user_stats(self, user_id: int) -> dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await self.fetch_one("""
                SELECT 
                    COUNT(*) as total_messages,
                    MIN(timestamp) as first_seen,
                    MAX(timestamp) as last_seen
                FROM chat_logs 
                WHERE user_id = ?
            """, (user_id,))
            
            if result:
                return {
                    'total_messages': result['total_messages'],
                    'first_seen': result['first_seen'],
                    'last_seen': result['last_seen']
                }
            else:
                return {'total_messages': 0, 'first_seen': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'last_seen': '–Ω–∏–∫–æ–≥–¥–∞'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_messages': 0, 'first_seen': '–æ—à–∏–±–∫–∞', 'last_seen': '–æ—à–∏–±–∫–∞'}
    
    async def export_recent_logs(self, limit: int = 1000) -> list:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
        try:
            results = await self.fetch_all("""
                SELECT chat_id, user_id, username, full_name, text, message_type, timestamp
                FROM chat_logs 
                ORDER BY timestamp DESC 
                LIMIT ?
            """, (limit,))
            
            return results if results else []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            return []
    
    # =================== AI –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø ===================
    
    async def save_ai_interaction(self, interaction_data: Dict[str, Any]) -> bool:
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            await self.connection.execute("""
                INSERT INTO ai_interactions 
                (user_id, chat_id, prompt, response, model_used, tokens_used, response_time)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                interaction_data['user_id'],
                interaction_data.get('chat_id'),
                interaction_data['prompt'],
                interaction_data['response'],
                interaction_data.get('model_used'),
                interaction_data.get('tokens_used'),
                interaction_data.get('response_time')
            ))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False
    
    # =================== –ü–ê–ú–Ø–¢–¨ –ö–û–ù–¢–ï–ö–°–¢–û–í ===================
    
    async def save_memory_context(self, user_id: int, chat_id: int, context_key: str, 
                                  context_value: str, expires_at: datetime = None) -> bool:
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞–º—è—Ç–∏"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO memory_contexts 
                (user_id, chat_id, context_key, context_value, expires_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, chat_id, context_key, context_value, expires_at, datetime.now()))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    async def get_memory_context(self, user_id: int, chat_id: int, context_key: str) -> str:
        """üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏"""
        try:
            result = await self.fetch_one("""
                SELECT context_value FROM memory_contexts 
                WHERE user_id = ? AND chat_id = ? AND context_key = ?
                AND (expires_at IS NULL OR expires_at > ?)
            """, (user_id, chat_id, context_key, datetime.now()))
            
            return result['context_value'] if result else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    # =================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ===================
    
    async def track_user_action(self, user_id: int, chat_id: int, action: str, details: Dict = None):
        """üìä –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.connection.execute("""
                INSERT INTO user_actions (user_id, chat_id, action, details)
                VALUES (?, ?, ?, ?)
            """, (user_id, chat_id, action, json.dumps(details) if details else None))
            
            await self.connection.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    
    # =================== –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===================
    
    async def get_setting(self, key: str) -> str:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            result = await self.fetch_one("SELECT value FROM system_settings WHERE key = ?", (key,))
            return result['value'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return None
    
    async def set_setting(self, key: str, value: str, updated_by: int = None) -> bool:
        """‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO system_settings (key, value, updated_by, updated_at)
                VALUES (?, ?, ?, ?)
            """, (key, value, updated_by, datetime.now()))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return False
    
    # =================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===================
    
    async def cleanup_expired_data(self):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            await self.connection.execute("""
                DELETE FROM memory_contexts 
                WHERE expires_at IS NOT NULL AND expires_at < ?
            """, (datetime.now(),))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            await self.connection.execute("""
                DELETE FROM chat_logs 
                WHERE timestamp < ?
            """, (datetime.now() - timedelta(days=30),))
            
            await self.connection.commit()
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def get_database_stats(self) -> Dict[str, int]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stats = {}
            
            tables = ['users', 'chats', 'chat_logs', 'messages', 'ai_interactions', 
                     'memory_contexts', 'triggers', 'user_actions']
            
            for table in tables:
                result = await self.fetch_one(f"SELECT COUNT(*) as count FROM {table}")
                stats[table] = result['count'] if result else 0
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {}


# =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===================

async def create_database_service(config) -> DatabaseService:
    """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ë–î"""
    service = DatabaseService(config)
    await service.initialize()

#!/usr/bin/env python3
"""
üíæ DATABASE SERVICE v3.0 - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã, –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–±–ª–∏—Ü—ã

–§–ò–ù–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –£–±—Ä–∞–Ω—ã –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
"""

import asyncio
import logging
import sqlite3
import aiosqlite
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from pathlib import Path
import json

logger = logging.getLogger(__name__)


class DatabaseService:
    """üíæ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config):
        self.config = config
        self.db_path = config.path
        self.connection = None
        logger.info("üíæ DatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
            self.connection = await aiosqlite.connect(
                self.db_path,
                timeout=30.0
            )
            
            # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if self.config.wal_mode:
                await self.connection.execute("PRAGMA journal_mode=WAL")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self.connection.execute("PRAGMA foreign_keys=ON")
            await self.connection.execute("PRAGMA cache_size=-2000")
            await self.connection.execute("PRAGMA synchronous=NORMAL")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await self._create_tables()
            await self._create_indexes()
            
            logger.info("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def close(self):
        """üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.connection:
                await self.connection.close()
                logger.info("üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    async def _create_tables(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        tables = [
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                full_name TEXT,
                language_code TEXT,
                is_premium BOOLEAN DEFAULT FALSE,
                is_bot BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # –ß–∞—Ç—ã
            """
            CREATE TABLE IF NOT EXISTS chats (
                id INTEGER PRIMARY KEY,
                type TEXT NOT NULL,
                title TEXT,
                username TEXT,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô (–ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê)
            """
            CREATE TABLE IF NOT EXISTS chat_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                full_name TEXT,
                text TEXT,
                message_type TEXT DEFAULT 'text',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            """
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message_id INTEGER,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                text TEXT,
                message_type TEXT DEFAULT 'text',
                reply_to_message_id INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            """
            CREATE TABLE IF NOT EXISTS user_actions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                action TEXT NOT NULL,
                details TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            """
            CREATE TABLE IF NOT EXISTS system_settings (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL,
                updated_by INTEGER,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """,
            
            # AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            """
            CREATE TABLE IF NOT EXISTS ai_interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                prompt TEXT NOT NULL,
                response TEXT,
                model_used TEXT,
                tokens_used INTEGER,
                response_time REAL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
            """
            CREATE TABLE IF NOT EXISTS memory_contexts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                context_key TEXT NOT NULL,
                context_value TEXT NOT NULL,
                expires_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –¢—Ä–∏–≥–≥–µ—Ä—ã
            """
            CREATE TABLE IF NOT EXISTS triggers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                user_id INTEGER NOT NULL,
                trigger_text TEXT NOT NULL,
                response_text TEXT NOT NULL,
                is_regex BOOLEAN DEFAULT FALSE,
                is_global BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE,
                usage_count INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id)
            )
            """,
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è - –±–∞–Ω—ã
            """
            CREATE TABLE IF NOT EXISTS bans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                admin_id INTEGER NOT NULL,
                reason TEXT,
                ban_type TEXT DEFAULT 'permanent',
                expires_at DATETIME,
                is_active BOOLEAN DEFAULT TRUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id),
                FOREIGN KEY (admin_id) REFERENCES users (id)
            )
            """,
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            """
            CREATE TABLE IF NOT EXISTS warnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                admin_id INTEGER NOT NULL,
                reason TEXT,
                severity_level INTEGER DEFAULT 1,
                is_active BOOLEAN DEFAULT TRUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (chat_id) REFERENCES chats (id),
                FOREIGN KEY (admin_id) REFERENCES users (id)
            )
            """,
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            """
            CREATE TABLE IF NOT EXISTS behavior_patterns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                pattern_type TEXT NOT NULL,
                pattern_data TEXT NOT NULL,
                confidence REAL DEFAULT 0.0,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            """
        ]
        
        for table_sql in tables:
            try:
                await self.connection.execute(table_sql)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        
        await self.connection.commit()
        logger.info("üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    async def _create_indexes(self):
        """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        indexes = [
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            "CREATE INDEX IF NOT EXISTS idx_chat_logs_user ON chat_logs(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_chat_logs_chat ON chat_logs(chat_id, timestamp)",
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            "CREATE INDEX IF NOT EXISTS idx_messages_user ON messages(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_messages_chat ON messages(chat_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_user_actions_user ON user_actions(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_ai_interactions_user ON ai_interactions(user_id, timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_memory_contexts_user ON memory_contexts(user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_triggers_active ON triggers(is_active, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_bans_active ON bans(is_active, user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_warnings_active ON warnings(is_active, user_id, chat_id)",
            "CREATE INDEX IF NOT EXISTS idx_behavior_user ON behavior_patterns(user_id, pattern_type)"
        ]
        
        for index_sql in indexes:
            try:
                await self.connection.execute(index_sql)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        await self.connection.commit()
        logger.info("üöÄ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # =================== –û–°–ù–û–í–ù–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò ===================
    
    async def execute(self, query: str, params: tuple = None):
        """‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if params:
                await self.connection.execute(query, params)
            else:
                await self.connection.execute(query)
            await self.connection.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    async def fetch_one(self, query: str, params: tuple = None):
        """üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            if params:
                cursor = await self.connection.execute(query, params)
            else:
                cursor = await self.connection.execute(query)
            
            row = await cursor.fetchone()
            if row:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                columns = [description[0] for description in cursor.description]
                return dict(zip(columns, row))
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    async def fetch_all(self, query: str, params: tuple = None):
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            if params:
                cursor = await self.connection.execute(query, params)
            else:
                cursor = await self.connection.execute(query)
            
            rows = await cursor.fetchall()
            if rows:
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            return []
    
    # =================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===================
    
    async def save_user(self, user_data: Dict[str, Any]) -> bool:
        """üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO users 
                (id, username, first_name, last_name, full_name, language_code, is_premium, is_bot, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_data['id'],
                user_data.get('username'),
                user_data.get('first_name'),
                user_data.get('last_name'),
                user_data.get('full_name'),
                user_data.get('language_code'),
                user_data.get('is_premium', False),
                user_data.get('is_bot', False),
                datetime.now()
            ))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def save_chat(self, chat_data: Dict[str, Any]) -> bool:
        """üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–∞"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO chats 
                (id, type, title, username, description, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                chat_data['id'],
                chat_data['type'],
                chat_data.get('title'),
                chat_data.get('username'),
                chat_data.get('description'),
                datetime.now()
            ))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    # =================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô (–ù–û–í–û–ï) ===================
    
    async def log_message(self, chat_id: int, user_id: int, username: str, full_name: str, 
                          text: str, message_type: str = 'text', timestamp=None):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if timestamp is None:
            timestamp = datetime.now()
        
        try:
            await self.connection.execute("""
                INSERT INTO chat_logs (chat_id, user_id, username, full_name, text, message_type, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (chat_id, user_id, username, full_name, text, message_type, timestamp))
            
            await self.connection.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def get_user_stats(self, user_id: int) -> dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await self.fetch_one("""
                SELECT 
                    COUNT(*) as total_messages,
                    MIN(timestamp) as first_seen,
                    MAX(timestamp) as last_seen
                FROM chat_logs 
                WHERE user_id = ?
            """, (user_id,))
            
            if result:
                return {
                    'total_messages': result['total_messages'],
                    'first_seen': result['first_seen'],
                    'last_seen': result['last_seen']
                }
            else:
                return {'total_messages': 0, 'first_seen': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'last_seen': '–Ω–∏–∫–æ–≥–¥–∞'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_messages': 0, 'first_seen': '–æ—à–∏–±–∫–∞', 'last_seen': '–æ—à–∏–±–∫–∞'}
    
    async def export_recent_logs(self, limit: int = 1000) -> list:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
        try:
            results = await self.fetch_all("""
                SELECT chat_id, user_id, username, full_name, text, message_type, timestamp
                FROM chat_logs 
                ORDER BY timestamp DESC 
                LIMIT ?
            """, (limit,))
            
            return results if results else []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            return []
    
    # =================== AI –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø ===================
    
    async def save_ai_interaction(self, interaction_data: Dict[str, Any]) -> bool:
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            await self.connection.execute("""
                INSERT INTO ai_interactions 
                (user_id, chat_id, prompt, response, model_used, tokens_used, response_time)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                interaction_data['user_id'],
                interaction_data.get('chat_id'),
                interaction_data['prompt'],
                interaction_data['response'],
                interaction_data.get('model_used'),
                interaction_data.get('tokens_used'),
                interaction_data.get('response_time')
            ))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False
    
    # =================== –ü–ê–ú–Ø–¢–¨ –ö–û–ù–¢–ï–ö–°–¢–û–í ===================
    
    async def save_memory_context(self, user_id: int, chat_id: int, context_key: str, 
                                  context_value: str, expires_at: datetime = None) -> bool:
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞–º—è—Ç–∏"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO memory_contexts 
                (user_id, chat_id, context_key, context_value, expires_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, chat_id, context_key, context_value, expires_at, datetime.now()))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    async def get_memory_context(self, user_id: int, chat_id: int, context_key: str) -> str:
        """üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏"""
        try:
            result = await self.fetch_one("""
                SELECT context_value FROM memory_contexts 
                WHERE user_id = ? AND chat_id = ? AND context_key = ?
                AND (expires_at IS NULL OR expires_at > ?)
            """, (user_id, chat_id, context_key, datetime.now()))
            
            return result['context_value'] if result else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    # =================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ===================
    
    async def track_user_action(self, user_id: int, chat_id: int, action: str, details: Dict = None):
        """üìä –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.connection.execute("""
                INSERT INTO user_actions (user_id, chat_id, action, details)
                VALUES (?, ?, ?, ?)
            """, (user_id, chat_id, action, json.dumps(details) if details else None))
            
            await self.connection.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    
    # =================== –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===================
    
    async def get_setting(self, key: str) -> str:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            result = await self.fetch_one("SELECT value FROM system_settings WHERE key = ?", (key,))
            return result['value'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return None
    
    async def set_setting(self, key: str, value: str, updated_by: int = None) -> bool:
        """‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            await self.connection.execute("""
                INSERT OR REPLACE INTO system_settings (key, value, updated_by, updated_at)
                VALUES (?, ?, ?, ?)
            """, (key, value, updated_by, datetime.now()))
            
            await self.connection.commit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return False
    
    # =================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===================
    
    async def cleanup_expired_data(self):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            await self.connection.execute("""
                DELETE FROM memory_contexts 
                WHERE expires_at IS NOT NULL AND expires_at < ?
            """, (datetime.now(),))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            await self.connection.execute("""
                DELETE FROM chat_logs 
                WHERE timestamp < ?
            """, (datetime.now() - timedelta(days=30),))
            
            await self.connection.commit()
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def get_database_stats(self) -> Dict[str, int]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stats = {}
            
            tables = ['users', 'chats', 'chat_logs', 'messages', 'ai_interactions', 
                     'memory_contexts', 'triggers', 'user_actions']
            
            for table in tables:
                result = await self.fetch_one(f"SELECT COUNT(*) as count FROM {table}")
                stats[table] = result['count'] if result else 0
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {}


# =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===================

async def create_database_service(config) -> DatabaseService:
    """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ë–î"""
    service = DatabaseService(config)
    await service.initialize()
    return service